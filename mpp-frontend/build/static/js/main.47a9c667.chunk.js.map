{"version":3,"sources":["assets/images/w-logo.png","assets/images/logo-white.png","assets/images/logo.png","assets/images/dashboard/under-development.svg","assets/images/dashboard/hold.svg","assets/images/dashboard/dropped.svg","assets/images/dashboard/filed.svg","assets/images/dashboard/approved.svg","assets/images/loader.svg","assets/images/mpp_logo_white.png","util/config.js","util/IntlMessages.js","appRedux/reducers/Settings.js","constants/ThemeSetting.js","constants/ActionTypes.js","appRedux/reducers/Common.js","constants/app.constants.js","constants/auth.constants.js","constants/loader.constants.js","constants/admin-products.constants.js","constants/admin-partner.constants.js","constants/product-development-timeline.constants.js","constants/filing-plans.constants.js","constants/sales-report.constants.js","constants/partner-dashboard.constants.js","constants/admin-dashboard.constants.js","appRedux/reducers/Loader.js","appRedux/reducers/AdminProducts.js","appRedux/reducers/AdminPartner.js","appRedux/reducers/PartnerDashboard.js","appRedux/reducers/ProductDevelopmentTimeline.js","appRedux/reducers/FilingPlans.js","appRedux/reducers/SalesReport.js","appRedux/reducers/UserAuthentication.js","appRedux/reducers/AdminDashboard.js","appRedux/store/index.js","lngProvider/entries/en-US.js","lngProvider/entries/zh-Hans-CN.js","lngProvider/entries/ar_SA.js","lngProvider/entries/it_IT.js","lngProvider/entries/es_ES.js","lngProvider/index.js","lngProvider/entries/fr_FR.js","util/CustomScrollbars.js","appRedux/actions/Setting.js","containers/Sidebar/SidebarLogo.js","helpers/history.js","helpers/auth-header.js","helpers/message.js","helpers/util.js","helpers/sample-response.js","containers/Sidebar/SidebarContent.js","containers/Sidebar/index.js","containers/Topbar/languageData.js","components/SearchBox/index.js","components/UserInfo/index.js","components/AppNotification/NotificationItem.js","components/AppNotification/data.js","util/Auxiliary.js","components/AppNotification/index.js","components/MailNotification/NotificationItem.js","components/MailNotification/data.js","components/MailNotification/index.js","containers/Topbar/HorizontalNav.js","containers/Topbar/HorizontalDefault/index.js","containers/Topbar/HorizontalDark/index.js","containers/Topbar/InsideHeader/index.js","containers/Topbar/AboveHeader/index.js","containers/Topbar/BelowHeader/index.js","containers/Topbar/index.js","helpers/auth.js","services/handle-response.js","services/Auth.js","services/SalesReport.js","services/AdminDashboard.js","appRedux/actions/Loader.js","appRedux/actions/AdminDashboard.js","components/Widget/index.js","components/dashboardCountProjects/DashboardCountProjects.js","routes/pages/dashboard/dashboard-tables/project-wise/project-count.js","components/dashboardProductWiseCompany/DashboardProductWiseCompany.js","routes/pages/dashboard/dashboard-tables/product-wise/product-company-count.js","components/dashboardProductWiseCountry/DashboardProductWiseCountry.js","routes/pages/dashboard/dashboard-tables/product-wise/product-country-count.js","components/dashboardCompanyWiseStatus/DashboardCompanyWiseStatus.js","routes/pages/dashboard/dashboard-tables/company-wise/company-count.js","components/dashboardCountryWiseProduct/DashboardCountryWiseProduct.js","routes/pages/dashboard/dashboard-tables/country-wise/country-product.js","components/dashboardSalesProductWiseCompany/DashboardSalesProductWiseCompany.js","routes/pages/dashboard/dashboard-tables/sales-wise/product-wise/product-company-sales.js","components/dashboardSalesProductWisePeriod/DashboardSalesProductWisePeriod.js","routes/pages/dashboard/dashboard-tables/sales-wise/product-wise/product-period-sales.js","components/dashboardSalesProductWiseCountry/DashboardSalesProductWiseCountry.js","routes/pages/dashboard/dashboard-tables/sales-wise/product-wise/product-country-sales.js","components/dashboardSalesCompanyWiseProduct/DashboardCompanyWiseProduct.js","routes/pages/dashboard/dashboard-tables/sales-wise/company-wise/company-product-sales.js","components/dashboardSalesCompanyWisePeriod/DashboardSalesCompanyWisePeriod.js","routes/pages/dashboard/dashboard-tables/sales-wise/company-wise/company-period-sales.js","components/dashboardSalesCompanyWiseCountry/DashboardSalesCompanyWiseCountry.js","routes/pages/dashboard/dashboard-tables/sales-wise/company-wise/company-country-sales.js","components/dashboardSalesCountryWiseProduct/DashboardSalesCountryWiseProduct.js","routes/pages/dashboard/dashboard-tables/sales-wise/country-wise/country-product-sales.js","components/dashboardSalesCountryWisePeriod/DashboardSalesCountryWisePeriod.js","routes/pages/dashboard/dashboard-tables/sales-wise/country-wise/country-period-sales.js","components/dashboardSalesCountryWiseCompany/DashboardSalesCountryWiseCompany.js","routes/pages/dashboard/dashboard-tables/sales-wise/country-wise/country-company-sales.js","components/dashboardSalesPeriodWiseProduct/DashboardSalesPeriodWiseProduct.js","routes/pages/dashboard/dashboard-tables/sales-wise/period-wise/period-product-sales.js","components/dashboardSalesPeriodWiseCompany/DashboardSalesPeriodWiseCompany.js","routes/pages/dashboard/dashboard-tables/sales-wise/period-wise/period-company-sales.js","components/dashboardSalesPeriodWiseCountry/DashboardSalesPeriodWiseCountry.js","routes/pages/dashboard/dashboard-tables/sales-wise/period-wise/period-country-sales.js","components/dashboardSalesPricePerPack/DashboardSalesPricePerPack.js","routes/pages/dashboard/dashboard-tables/sales-wise/price-per-pack.js","components/dashboardSalesPricePerTreatment/DashboardSalesPricePerTreatment.js","routes/pages/dashboard/dashboard-tables/sales-wise/price-per-treatment.js","routes/pages/dashboard/dashboard-tables/admin-dashboard-summary.js","routes/pages/dashboard/adminDashboard.js","appRedux/actions/PartnerDashboard.js","services/PartnerDashboard.js","components/TemplateTile/index.js","routes/pages/partner-dashboard/index.js","appRedux/actions/AdminPartner.js","services/AdminPartner.js","routes/pages/partner-list-new/index.js","routes/pages/partner-peformance/index.js","appRedux/actions/Auth.js","appRedux/actions/AdminProducts.js","services/AdminProduct.js","appRedux/actions/ProductDevelopmentTimeline.js","services/ProductDevTimeline.js","appRedux/actions/FilingPlans.js","services/FilingPlans.js","appRedux/actions/SalesReport.js","routes/pages/product-list/index.js","components/AdminNotifications/NotificationItem.js","components/AdminNotifications/index.js","routes/pages/development-timeline/index.js","routes/pages/filing-plans/index.js","routes/pages/sales-report/searchSelect.js","routes/pages/sales-report/sales-report-util.js","routes/pages/sales-report/productVerificationModal.js","routes/pages/sales-report/index.js","routes/pages/change-password/index.js","routes/pages/add-partner/index.js","routes/pages/add-product/index.js","routes/pages/report-pdt/index.js","routes/pages/report-filing-plans/index.js","routes/pages/report-sales-report/index.js","components/profile-userInfo/AboutItem.js","components/profile-userInfo/index.js","routes/pages/profile/index.js","routes/pages/admin-settings/index.js","routes/index.js","containers/App/MainApp.js","containers/Login.js","containers/Logout.js","containers/ResetPassword.js","components/CircularProgress/index.js","containers/SetPassword.js","containers/App/index.js","util/asyncComponent.js","components/loader/index.js","NextApp.js","appRedux/reducers/index.js","registerServiceWorker.js","index.js"],"names":["module","exports","footerText","injectIntl","props","withRef","initialSettings","navCollapsed","navStyle","layoutType","themeType","colorSelection","pathname","width","window","innerWidth","isDirectionRTL","locale","languageId","name","icon","settings","state","action","type","payload","location","INIT_STATE","error","loading","message","config","process","authConstants","roleConstants","loaderConstants","adminProductConstants","adminPartnerConstants","pdtConstants","filingPlansConstants","salesReportConstants","partnerDashboardConstants","adminDashboardConstants","showLoader","Loader","isProductAdded","isProductEdited","isProductLoaded","productList","productItem","productDetails","isLoaded","AdminProducts","data","isLoisProductLoadedaded","isPartnerAdded","isPartnerEdited","isPartnerDeleted","setCutoffSuccess","partnerList","countryList","partnerDetails","cutOffDate","AdminPartner","partnerDashboard","pdtList","pdtReportData","ProductDevelopmentTimeline","plansList","plansReportData","FilingPlans","apiSalesList","fdfSalesList","apiSalesReportData","fdfSalesReportData","SalesReport","productVerificationList","isUserLoggedIn","changePasswordSuccess","validateTokenSuccess","setPasswordSuccess","isMailSend","UserAuthentication","project_count","isProjectCountLoaded","product_company_count","isProductCompanyCountLoaded","product_country_count","isProductCountryCountLoaded","product_country_quarter_count","future_quarters","isProductCountryQuarterCountLoaded","company_count","isCompanyCountLoaded","country_product_count","isCountryProductLoaded","product_company_sales","isProductCompanySalesLoaded","product_period_sales","isProductPeriodSalesLoaded","product_country_sales","isProductCountrySalesLoaded","company_product_sales","isCompanyProductSalesLoaded","company_period_sales","isCompanyPeriodSalesLoaded","company_country_sales","isCompanyCountrySalesLoaded","country_product_sales","isCountryProductSalesLoaded","country_period_sales","isCountryPeriodSalesLoaded","country_company_sales","isCountryCompanySalesLoaded","period_product_sales","isPeriodProductSalesLoaded","period_country_sales","isPeriodCountrySalesLoaded","period_company_sales","isPeriodCompanySalesLoaded","pack_period_sales","isPackPeriodSalesLoaded","treatment_period_sales","isTreatmentPeriodSalesLoaded","admin_dashboard_summary","isAdminDashboardSummaryLoaded","setBulkReminderSuccess","AdminDashboard","isCountryProductstatusLoaded","isCountryProductStatusLoaded","history","createBrowserHistory","require","routeMiddleware","routerMiddleware","middlewares","thunk","logger","EnLang","messages","enMessages","antd","antdEn","ZhLan","zhMessages","saLang","saMessages","antdSA","AppLocale","en","enLang","zh","zhLang","ar","arLang","it","itLang","es","esLang","fr","CustomScrollbars","autoHide","renderTrackHorizontal","style","display","className","toggleCollapsedSideNav","onNavStyleChange","dispatch","switchLanguage","SidebarLogo","useDispatch","useSelector","onClick","to","alt","src","authHeader","user","JSON","parse","localStorage","getItem","access","showMessage","msgTxt","success","info","warning","getRole","role","getQuarter","curr_quarter","getUserDetails","username","exportToXLXS","fileData","fileName","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","showConfirm","title","onSuccess","Modal","confirm","okText","cancelText","onOk","onCancel","statusArray","id","monthArray","formulationType","currencyList","countryCodeList","SidebarContent","useState","isUserAdmin","setIsUserAdmin","getNavStyleSubMenuClass","selectedKeys","substr","defaultOpenKeys","split","length","getMenuItems","key","link","name_id","UsergroupAddOutlined","MedicineBoxOutlined","FileSearchOutlined","BarChartOutlined","displayMenuItems","itemsArray","map","value","Item","IntlMessages","useEffect","theme","mode","menuItems","SubMenu","popupClassName","submenuItems","LockOutlined","splice","getProfileMenuItems","LogoutOutlined","Sider","Layout","Sidebar","addEventListener","updateWindowWidth","drawerStyle","trigger","collapsed","collapsible","placement","closable","onClose","visible","languageData","SearchBox","styleName","placeholder","onChange","defaultProps","UserInfo","userMenuOptions","overlayClassName","content","NotificationItem","notification","image","time","notifications","Auxiliary","children","AppNotification","index","badge","MailNotification","Menu","MenuItemGroup","ItemGroup","HorizontalNav","Header","Option","Select","menu","e","handleChange","console","log","HorizontalDefault","searchText","setSearchText","updateSearchChatUser","evt","target","defaultValue","overlay","Icon","language","stringify","HorizontalDark","connect","AboveHeader","BelowHeader","Topbar","Auth","WrappedComponent","Roles","isAuthorized","setIsAuthorized","userRole","filter","push","handleResponse","response","text","then","ok","status","Promise","reject","removeItem","reload","url","indexOf","detail","replace","statusText","getSalesReport","requestOptions","method","headers","fetch","postSalesReport","body","adminGetSalesReport","adminPostSalesReport","getConsolidatedSalesReport","downloadConsolidatedSalesReport","responseType","blob","getSales","map_with","endpoint","concat","hideLoader","projectCount","getProjectCount","catch","productCompanyCount","getProductCompanyCount","productCountryCount","getProductCountryCount","companyCount","getCompanyCount","countryProduct","getCountryProduct","productPeriodSales","period","companyPeriodSales","countryPeriodSales","adminDashboardSummary","getDashboardSummary","bulkReminderMail","sendReminderBulkMail","Widget","cover","extra","actions","DashboardCountProjects","count","cardColor","dataStatus","imgHold","imgUnderDevelopment","imgDropped","imgFiled","imgApproved","toLowerCase","AdminDashboardProjectCount","setData","adminDashboard","projectCountList","rowData","span","xs","description","columns","dataIndex","fixed","DashboardProductWise","disabled","val","omit","DownloadOutlined","dataSource","scroll","y","bordered","size","AdminDashboardProductCompanyCount","productComapnyCountList","product_id","product_name","UNDER_DEVELOPMENT","DROPPED","ON_HOLD","FILED","APPROVED","DashboardProductWiseCompany","DashboardProductWiseCountry","updateStatus","AdminDashboardProductCountryCount","setColumns","productCountryList","futureQuarters","setStatus","AdminDashboardCompanyCount","comapnyCountList","partner_id","company_name","DashboardCompanyWiseStatus","DashboardCountryWiseProduct","AdminDashboardCountryProduct","List","setType","temp_id","country_name","no_of_partners","DashboardSalesProductWiseCompany","AdminDashboardProductCompanySales","productCompanySalesList","company_id","total_value","DashboardSalesProductWisePeriod","AdminDashboardProductPeriodSales","productPeriodSalesList","setPeriod","year","month","quarter","quarter_name","DashboardSalesProductWiseCountry","AdminDashboardProductCountrySales","country_id","DashboardSalesCompanyWiseProduct","AdminDashboardCompanyProductSales","DashboardSalesCompanyWisePeriod","AdminDashboardCompanyPeriodSales","DashboardSalesCompanyWiseCountry","AdminDashboardCompanyCountrySales","DashboardSalesCountryWiseProduct","AdminDashboardCountryProductSales","DashboardSalesCountryWisePeriod","AdminDashboardCountryPeriodSales","DashboardSalesCountryWiseCompany","AdminDashboardCountryCompanySales","DashboardSalesPeriodWiseProduct","AdminDashboardPeriodProductSales","DashboardSalesPeriodWiseCompany","AdminDashboardPeriodCompanySales","DashboardSalesPeriodWiseCountry","AdminDashboardPeriodCountrySales","DashboardSalesPricePerPack","AdminDashboardPackPeriodSales","packPeriodSales","price_per_pack","Number","DashboardSalesPricePerTreatment","AdminDashboardTreatmentPeriodSales","treatmentPeriodSales","price_per_treatment","AdminDashboardSummary","showName","setShowName","columnData","partner","company_email","email","render","navigateToPdt","navigateToFilingPlans","navigateToSalesReport","template_data","showPDT","showFilingPlan","showSales","obj","template_type","is_approved","item","temp","not_submitted","report_status","BellOutlined","TabPane","Tabs","tabPosition","tab","getPartnerDashboardAction","getPartnerDashboard","TemplateTile","no_of_days_to_submit","last_message","moment","format","PartnerDashboard","adminAddPartner","addPartner","errorMsg","adminEditPartner","editPartner","getAdminPartnerList","getPartnerList","getAdminSinglePartner","getPartner","deleteAdminSinglePartner","deletePartner","adminSendReminder","sendReportReminder","resetEditPartner","getAdminCountryList","getRegionList","adminSetCutOffDate","date","setReportCutOffDate","adminGetCutOffDate","getReportCutOffDate","PartnerList","adminPartner","adminPartnerList","setSearchedColumn","searchInput","useRef","active_products","pdt","getTemplateData","filing_plans","sales_report","templateList","templateData","findIndex","handleSearch","renderTemplateData","viewReport","sendReminder","has","submission_time","updated_at","InfoCircleTwoTone","twoToneColor","checked","CheckCircleTwoTone","CloseCircleTwoTone","EyeTwoTone","BellTwoTone","showDeletePartner","toUpperCase","filterDropdown","setSelectedKeys","clearFilters","padding","ref","onPressEnter","marginBottom","SearchOutlined","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","includes","onFilterDropdownVisibleChange","sorter","a","b","localeCompare","products","align","alignItems","navigateToContent","EditTwoTone","DeleteTwoTone","PartnerPerformance","userLogin","password","login","setItem","userChangePassword","changePassword","validateToken","token","tokenValidate","setPassword","passwordSet","userForgetPassword","forgotPassword","adminAddProduct","addProduct","adminEditProduct","editProduct","getAdminProductList","showRecent","getProductList","getAdminProduct","getProduct","deleteAdminProduct","deleteProduct","getAdminProductDetails","getProductDetails","resetProduct","getPdtData","getPDT","getAdminPDTReport","getPDTReport","downloadPDTReport","filename","downloadpdtReport","postPdtData","postPDT","getAdminPdtData","adminGetPDT","postAdminPdtData","adminPostPDT","approvePDTReport","approvePDT","submitPDTReport","submitPDT","partnerMarkMessageRead","markPDTMessageRead","getFilingPlansData","getFilingPlans","getAdminFilingPlansReport","getFilingPlansReport","downloadFilingReport","downloadFilingPlansReport","postFilingPlansData","postFilingPlans","getAdminFilingPlansData","adminGetFilingPlans","postAdminFilingPlansData","adminPostFilingPlans","approveFilingPlansReport","approveFilingPlans","submitFilingPlansReport","submitFilingPlans","partnerMarkFilingPlansMessageRead","markFilingPlansMessageRead","postApiSalesReportData","postFdfSalesReportData","postAdminApiSalesData","postAdminFdfSalesData","approveSalesReportData","approveSalesReport","submitSalesReportData","submitSalesReport","partnerMarkSalesReportMessageRead","markSalesReportMessageRead","getAdminProductsToBeVerified","getProductsToBeVerified","postAdminProductsToBeVerified","postProductsToBeVerified","ProductList","adminProducts","adminProductList","filteredInfo","category","therapyArea","therapy_area","ellipsis","filters","filteredValue","navigateToEditProduct","showDeleteProduct","isAdmin","created_at","is_partner_message","UserOutlined","AdminNotifications","getDatePicker","Datepicker","prototype","init","params","this","eInput","document","createElement","classList","add","height","$","datepicker","dateFormat","getGui","afterGuiAttached","focus","select","getValue","destroy","isPopup","DevelopmentTimeline","isDataReady","setIsDataReady","showReport","setShowReport","reportDetails","setReportDetails","quarterEditDetails","setQuarterEditDetails","messageCount","setMessageCount","partnerId","setPartnerId","gridApi","setGridApi","setRowData","quarterOrder","setQuarterOrder","headerName","field","editable","rowGroup","hide","columnDefs","setColumnDefs","Form","useForm","form","setPDT","addQuarter","navigateBack","match","setValues","rows","quarter_order","unread_message_count","pdt_meta","quarter_editable","isEmpty","quarterNumber","column","cellClass","cellEditorSelector","component","values","cellClassRules","i","cellEditor","checkDate","sortable","forEachNode","node","product","setExpanded","handleUndefinedValues","tempRowData","forEach","hasOwnProperty","stage_id","checkRow","statusFlag","dateFlag","Object","keys","some","saveReportBeforeAction","callback","stopEditing","selectAll","selectedNodes","getSelectedNodes","d","deselectAll","product_status","notes","start_date_name","end_date_name","start_date","end_date","saveData","approver","msg","isApproved","resetFields","showCommentsForm","layout","rules","required","TextArea","downloadExcel","exportDataAsExcel","sheetName","LeftOutlined","partner_name","approval_time","displayHeader","CheckCircleOutlined","close","validateFields","commentData","CloseCircleOutlined","MailOutlined","displayCTA","innerHeight","paddingBottom","onGridReady","api","defaultColGroupDef","marryChildren","defaultColDef","resizable","autoGroupColumnDef","minWidth","suppressRowTransform","enableRangeSelection","enableCellChangeFlash","onCellValueChanged","colDef","newValue","oldValue","rowNode","getRowNode","fieldNameList","setDataValue","animateRows","components","datePicker","setColumnApi","setProductList","apiStatusArray","setApiStatusArray","fdfStatusArray","setFdfStatusArray","filingPlans","setFilingPlans","rowValue","product_details","filing_meta","status_dropdown","product_type","apiFlag","fdfFlag","columnApi","SearchSelect","forwardRef","optionValue","setOptionValue","editing","setEditing","productNameList","setProductNameList","refContainer","productSelect","selectValues","tempSelectValues","useImperativeHandle","setTimeout","container","ReactDOM","findDOMNode","current","tabIndex","showSearch","showArrow","allowClear","onSelect","onSearch","tempProductList","initRowData","rowValueList","suppressEnter","event","which","ProductVerificationModal","hideVerificationModal","setSalesReport","verificationForm","salesReport","toBeVerifiedProductList","setToBeVerifiedProductList","pending_products","existing_products","handleProductSearch","footer","pick","initialValues","onValuesChange","newValueList","fields","remove","validateTrigger","label","fieldKey","tempToBeVerifiedProductList","does_product_exist","setFieldsValue","handleProductSelect","Group","buttonStyle","Button","isFdfInitialized","setIsFdfInitialized","areApiRowsSelected","setAreApiRowsSelected","areFdfRowsSelected","setAreFdfRowsSelected","deleteApiIds","setDeleteApiIds","deleteFdfIds","setDeleteFdfIds","addApiRowNumber","setAddApiRowNumber","addFdfRowNumber","setAddFdfRowNumber","showVerificationModal","setShowVerificationModal","pendingProducts","setPendingProducts","apiGridApi","setApiGridApi","fdfGridApi","setFdfGridApi","ApiRowData","setApiRowData","FdfRowData","setFdfRowData","ApiColumnDefs","setApiColumnDefs","FdfColumnDefs","setFdfColumnDefs","countryOrder","setCountryOrder","countryDropdown","setCountryDropdown","apiProductOrder","setApiProductOrder","apiProductDropdown","setApiProductDropdown","fdfProductOrder","setFdfProductOrder","fdfProductDropdown","setFdfProductDropdown","yearDropdown","setYearDropdown","monthDropdown","setMonthDropdown","tabKey","setTabKey","addApiColumns","addFdfColumns","getAdminApiSalesData","apiData","setApiValues","getAdminFdfSalesData","fdfData","setFdfValues","getApiSalesData","country_order","product_order","sales_meta","pending_product_count","currentYear","Date","yearArray","unshift","yearList","apiColumns","checkboxSelection","valueGetter","headerCheckboxSelection","isNaN","suppressKeyboardEvent","valueParser","fdfColumns","checkApiRowNodes","dataList","checkApiRow","flag","errorData","errorIndex","apiErrorList","errorkeys","errorKey","checkFdfRowNodes","checkFdfRow","fdfErrorList","checkNullRow","selectedApiNodes","nodeData","finalApiData","saveApiData","selectedFdfNodes","finalFdfData","saveFdfData","active_product_id","columnKeys","setReportHeight","viewVerificationModal","showIcon","displayProductVerification","tabBarExtraContent","displayGridCta","currentTabKey","columnTypes","valueColumn","rowSelection","suppressRowClickSelection","onSelectionChanged","source","join","frameworkComponents","searchSelector","min","max","rowIndexList","rowIndex","tempDeleteIds","sales_report_id","finalData","suppressAggFuncInHeader","displayVerificationModal","FormItem","ChangePassword","authentication","remember","onFinish","onFinishFailed","errorInfo","pattern","Password","dependencies","hasFeedback","getFieldValue","validator","rule","resolve","htmlType","formItemLayout","labelCol","sm","wrapperCol","AddPartner","editFlag","setEditFlag","partnerEmployeeData","setPartnerEmployeeData","path","employee","contact","contact_number","slice","prefix","substring","address","region","setEmployeeData","employee_id","prefixSelector","noStyle","optionFilterProp","filterOption","sortBy","code","goBack","editData","first_name","last_name","scrollToFirstError","len","addonBefore","MinusCircleOutlined","margin","PlusOutlined","AddProduct","PDTReport","setRows","total","setTotal","page_number","page_size","requestObj","setRequestObj","total_rows","dataCols","pagination","pageSize","FilingPlansReport","x","ConsolidatedSalesReport","apiRows","setApiRows","fdfRows","setFdfRows","apitotal","setApiTotal","fdftotal","setFdfTotal","apiRequestObj","setApiRequestObj","fdfRequestObj","setFdfRequestObj","getAdminConsolidatedFdfReport","downloadFdfSalesReport","AboutItem","desc","userList","descClass","About","aboutList","about","xl","lg","md","UserProfilePage","userDetails","setUserDetails","getUserInfo","AdminSettings","cut_off_date","AdminDashboardPage","PartnerDashboardPage","ChangePasswordPage","AdminProfilePage","PartnerProfilePage","PartnerListNewPage","PartnerListNew","AddPartnerPage","PartnerPerformancePage","ProductListPage","AddProductPage","DevelopmentTimelinePage","FilingPlansPage","SalesReportPage","PDTReportPage","FilingPlansReportPage","ConsolidatedSalesReportPage","AdminSettingsPage","NotFoundRedirect","App","exact","Component","Content","MainApp","Footer","getSidebar","getNavStyles","getContainerClass","Login","isLoggedIn","navigatePostLogin","trim","valuePropName","Logout","ResetPassword","isResetToken","setIsResetToken","URLSearchParams","search","get","CircularProgress","loader","SetPassword","navigatePostSetPassword","RestrictedRoute","authUser","rest","from","setThemeType","onLayoutTypeChange","setLayoutType","setNavStyle","importComponent","currentAppLocale","Nprogress","start","mounted","default","done","setState","ready","store","preloadedState","createStore","combineReducers","router","connectRouter","Settings","commonData","Common","compose","applyMiddleware","configureStore","NextApp","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","URL","origin","unregister","checkValidServiceWorker","registerServiceWorker","getElementById"],"mappings":"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O,gBACP,IAAO,yBACP,IAAO,yBACP,IAAO,gBACP,IAAO,iBACP,IAAO,gBACP,IAAO,kBACP,IAAO,iBACP,IAAO,gBACP,IAAO,qBACP,IAAO,mBACP,IAAO,mBACP,IAAO,mBACP,IAAO,gBACP,IAAO,iBACP,IAAO,mBACP,IAAO,oBACP,IAAO,qBACP,IAAO,aACP,IAAO,eACP,IAAO,cACP,IAAO,eACP,IAAO,qBACP,IAAO,eACP,IAAO,kBACP,IAAO,kBACP,IAAO,eACP,IAAO,kBACP,IAAO,iBACP,IAAO,iBACP,IAAO,iBACP,IAAO,mBACP,IAAO,mBACP,IAAO,gBACP,IAAO,wBACP,IAAO,oBACP,IAAO,cACP,IAAO,iBACP,IAAO,mBACP,IAAO,kBACP,IAAO,eACP,IAAO,eACP,IAAO,kBACP,IAAO,eACP,IAAO,kBACP,IAAO,mBACP,IAAO,cACP,IAAO,mBACP,IAAO,kBACP,IAAO,iCACP,IAAO,sBACP,IAAO,kBACP,IAAO,oBACP,IAAO,kBACP,IAAO,eACP,IAAO,oBACP,IAAO,qBACP,IAAO,kBACP,IAAO,iBACP,IAAO,wBACP,IAAO,kBACP,IAAO,iBACP,IAAO,qBACP,IAAO,aACP,IAAO,oBACP,IAAO,qBACP,IAAO,yBACP,IAAO,kBACP,IAAO,kBACP,IAAO,eACP,IAAO,qBACP,IAAO,cACP,IAAO,eACP,IAAO,gBACP,IAAO,gBACP,IAAO,gBACP,IAAO,cACP,IAAO,yBACP,IAAO,oBACP,IAAO,iBACP,IAAO,gBACP,IAAO,mBACP,IAAO,qBACP,IAAO,uBACP,IAAO,kBACP,IAAO,oBACP,IAAO,uBACP,IAAO,kDACP,IAAO,uCACP,IAAO,sBACP,IAAO,eACP,IAAO,kBACP,IAAO,YACP,IAAO,qBACP,IAAO,sBACP,IAAO,iBACP,IAAO,iBACP,IAAO,eACP,IAAO,6BACP,IAAO,oBACP,IAAO,qBACP,IAAO,oBACP,IAAO,mBACP,IAAO,uBACP,IAAO,iBACP,IAAO,iBACP,IAAO,qCACP,IAAO,iCACP,IAAO,kBACP,IAAO,eACP,IAAO,cACP,IAAO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","file":"static/js/main.47a9c667.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/w-logo.8c50da44.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-white.8c50da44.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.8c50da44.png\";","module.exports = __webpack_public_path__ + \"static/media/under-development.6836bb77.svg\";","module.exports = __webpack_public_path__ + \"static/media/hold.55e99642.svg\";","module.exports = __webpack_public_path__ + \"static/media/dropped.5646de68.svg\";","module.exports = __webpack_public_path__ + \"static/media/filed.5b223711.svg\";","module.exports = __webpack_public_path__ + \"static/media/approved.21eebcb6.svg\";","module.exports = __webpack_public_path__ + \"static/media/loader.74caa41d.svg\";","module.exports = __webpack_public_path__ + \"static/media/mpp_logo_white.a1b35837.png\";","module.exports = {\r\n  footerText: 'Copyright Medicines Patent Pool © 2020',\r\n}\r\n","import React from \"react\";\r\nimport {FormattedMessage, injectIntl} from \"react-intl\";\r\n\r\nconst InjectMassage = props => <FormattedMessage {...props} />;\r\nexport default injectIntl(InjectMassage, {\r\n  withRef: false\r\n});\r\n","import { SWITCH_LANGUAGE, TOGGLE_COLLAPSED_NAV, WINDOW_WIDTH } from \"constants/ActionTypes\";\r\nimport {\r\n  LAYOUT_TYPE,\r\n  LAYOUT_TYPE_FULL,\r\n  NAV_STYLE,\r\n  NAV_STYLE_MINI_SIDEBAR,\r\n  THEME_COLOR_SELECTION,\r\n  THEME_COLOR_SELECTION_PRESET,\r\n  THEME_TYPE,\r\n  THEME_TYPE_LITE,\r\n  THEME_TYPE_SEMI_DARK\r\n} from \"../../constants/ThemeSetting\";\r\n\r\nconst initialSettings = {\r\n  navCollapsed: true,\r\n  navStyle: NAV_STYLE_MINI_SIDEBAR,\r\n  layoutType: LAYOUT_TYPE_FULL,\r\n  themeType: THEME_TYPE_SEMI_DARK,\r\n  colorSelection: THEME_COLOR_SELECTION_PRESET,\r\n\r\n  pathname: '',\r\n  width: window.innerWidth,\r\n  isDirectionRTL: false,\r\n  locale: {\r\n    languageId: 'english',\r\n    locale: 'en',\r\n    name: 'English',\r\n    icon: 'us'\r\n  }\r\n};\r\n\r\nconst settings = (state = initialSettings, action) => {\r\n  switch (action.type) {\r\n    case '@@router/LOCATION_CHANGE':\r\n      return {\r\n        ...state,\r\n        pathname: action.payload.location.pathname,\r\n        navCollapsed: false\r\n      };\r\n    case TOGGLE_COLLAPSED_NAV:\r\n      return {\r\n        ...state,\r\n        navCollapsed: action.navCollapsed\r\n      };\r\n    case WINDOW_WIDTH:\r\n      return {\r\n        ...state,\r\n        width: action.width,\r\n      };\r\n    case THEME_TYPE:\r\n      return {\r\n        ...state,\r\n        themeType: action.themeType\r\n      };\r\n    case THEME_COLOR_SELECTION:\r\n      return {\r\n        ...state,\r\n        colorSelection: action.colorSelection\r\n      };\r\n\r\n    case NAV_STYLE:\r\n      return {\r\n        ...state,\r\n        navStyle: action.navStyle\r\n      };\r\n    case LAYOUT_TYPE:\r\n      return {\r\n        ...state,\r\n        layoutType: action.layoutType\r\n      };\r\n\r\n    case SWITCH_LANGUAGE:\r\n      return {\r\n        ...state,\r\n        locale: action.payload,\r\n\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default settings;\r\n","// Customizer const\r\nexport const THEME_TYPE = 'THEME_TYPE';\r\nexport const THEME_TYPE_LITE = 'THEME_TYPE_LITE';\r\nexport const THEME_TYPE_DARK = 'THEME_TYPE_DARK';\r\nexport const THEME_TYPE_SEMI_DARK = 'THEME_TYPE_SEMI_DARK';\r\nexport const THEME_COLOR = 'THEME_COLOR';\r\n\r\n\r\nexport const THEME_COLOR_SELECTION = 'THEME_COLOR_SELECTION';\r\nexport const THEME_COLOR_SELECTION_PRESET = 'THEME_COLOR_SELECTION_PRESET';\r\nexport const THEME_COLOR_SELECTION_CUSTOMIZE = 'THEME_COLOR_SELECTION_CUSTOMIZE';\r\n\r\nexport const HORIZONTAL_NAVIGATION = 'HORIZONTAL_NAVIGATION';\r\n\r\nexport const HORIZONTAL_MENU_POSITION = 'HORIZONTAL_MENU_POSITION';\r\nexport const ABOVE_THE_HEADER = 'ABOVE_THE_HEADER';\r\nexport const INSIDE_THE_HEADER = 'INSIDE_THE_HEADER';\r\nexport const BELOW_THE_HEADER = 'BELOW_THE_HEADER';\r\n\r\nexport const VERTICAL_NAVIGATION = 'VERTICAL_NAVIGATION';\r\nexport const NAV_STYLE_MINI = 'NAV_STYLE_MINI';\r\n\r\nexport const LAYOUT_TYPE = 'LAYOUT_TYPE';\r\n\r\nexport const LAYOUT_TYPE_FRAMED = 'LAYOUT_TYPE_FRAMED';\r\nexport const LAYOUT_TYPE_BOXED = 'LAYOUT_TYPE_BOXED';\r\nexport const LAYOUT_TYPE_FULL = 'LAYOUT_TYPE_FULL';\r\n\r\n\r\nexport const NAV_STYLE = 'NAV_STYLE';\r\n\r\nexport const NAV_STYLE_FIXED = 'NAV_STYLE_FIXED';\r\nexport const NAV_STYLE_MINI_SIDEBAR = 'NAV_STYLE_MINI_SIDEBAR';\r\nexport const NAV_STYLE_CUSTOM_MINI_SIDEBAR = 'NAV_STYLE_CUSTOM_MINI_SIDEBAR';\r\nexport const NAV_STYLE_DRAWER = 'NAV_STYLE_DRAWER';\r\nexport const NAV_STYLE_NO_HEADER_MINI_SIDEBAR = 'NAV_STYLE_NO_HEADER_MINI_SIDEBAR';\r\nexport const NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR = 'NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR';\r\n\r\nexport const NAV_STYLE_DEFAULT_HORIZONTAL = 'NAV_STYLE_DEFAULT_HORIZONTAL';\r\nexport const NAV_STYLE_DARK_HORIZONTAL = 'NAV_STYLE_DARK_HORIZONTAL';\r\nexport const NAV_STYLE_INSIDE_HEADER_HORIZONTAL = 'NAV_STYLE_INSIDE_HEADER_HORIZONTAL';\r\nexport const NAV_STYLE_BELOW_HEADER = 'NAV_STYLE_BELOW_HEADER';\r\nexport const NAV_STYLE_ABOVE_HEADER = 'NAV_STYLE_ABOVE_HEADER';\r\n\r\n\r\nexport const LIGHT_PURPLE = '#8A2BE2';\r\nexport const LIGHT_PURPLE_SEC = '#00B378';\r\nexport const LIGHT_PURPLE_NAV_DARK_BG = '#32394F';\r\nexport const LIGHT_PURPLE_DARK_TEXT_COLOR = '#9799AC';\r\n\r\nexport const RED = '#FF2B7A';\r\nexport const RED_SEC = '#00D9C9';\r\nexport const RED_NAV_DARK_BG = '#3C3766';\r\nexport const RED_DARK_TEXT_COLOR = '#878BAB';\r\n\r\nexport const BLUE = '#3DA4E6';\r\nexport const BLUE_SEC = '#FCB53B';\r\nexport const BLUE_NAV_DARK_BG = '#444342';\r\nexport const BLUE_DARK_TEXT_COLOR = '#AAA59A';\r\n\r\nexport const DARK_BLUE = '#0469B9';\r\nexport const DARK_BLUE_SEC = '#17BDE5';\r\nexport const DARK_BLUE_NAV_DARK_BG = '#086880';\r\nexport const DARK_BLUE_DARK_TEXT_COLOR = '#9DDAE9';\r\n\r\nexport const ORANGE = '#F18805';\r\nexport const ORANGE_SEC = '#F1D065';\r\nexport const ORANGE_NAV_DARK_BG = '#272932';\r\nexport const ORANGE_DARK_TEXT_COLOR = '#ABA895';\r\n\r\nexport const LIGHT_BLUE = '#6A95FF';\r\nexport const LIGHT_BLUE_SEC = '#59DCFF';\r\nexport const LIGHT_BLUE_NAV_DARK_BG = '#1B2642';\r\nexport const LIGHT_BLUE_DARK_TEXT_COLOR = '#92A2C8';\r\n\r\n\r\nexport const DEEP_ORANGE = '#F87060';\r\nexport const DEEP_ORANGE_SEC = '#70A288';\r\nexport const DEEP_ORANGE_NAV_DARK_BG = '#08415C';\r\nexport const DEEP_ORANGE_DARK_TEXT_COLOR = '#97B8C7';\r\n\r\nexport const LIGHT_PURPLE_1 = '#A172E7';\r\nexport const LIGHT_PURPLE_1_SEC = '#E14594';\r\nexport const LIGHT_PURPLE_1_NAV_DARK_BG = '#182952';\r\nexport const LIGHT_PURPLE_1_DARK_TEXT_COLOR = '#8288B4';\r\n\r\nexport const LIGHT_PURPLE_2 = '#956FE7';\r\nexport const LIGHT_PURPLE_2_SEC = '#64D7D6';\r\nexport const LIGHT_PURPLE_2_NAV_DARK_BG = '#284C7C';\r\nexport const LIGHT_PURPLE_2_DARK_TEXT_COLOR = '#5782BB';\r\n\r\n\r\nexport const TAB_SIZE = 992;\r\n","// Customizer const\r\nexport const TOGGLE_COLLAPSED_NAV = 'TOGGLE_COLLAPSE_MENU';\r\nexport const WINDOW_WIDTH = 'WINDOW-WIDTH';\r\nexport const SWITCH_LANGUAGE = 'SWITCH-LANGUAGE';\r\n\r\n//Contact Module const\r\nexport const FETCH_START = 'fetch_start';\r\nexport const FETCH_SUCCESS = 'fetch_success';\r\nexport const FETCH_ERROR = 'fetch_error';\r\nexport const SHOW_MESSAGE = 'SHOW_MESSAGE';\r\nexport const HIDE_MESSAGE = 'HIDE_MESSAGE';\r\nexport const ON_SHOW_LOADER = 'ON_SHOW_LOADER';\r\nexport const ON_HIDE_LOADER = 'ON_HIDE_LOADER';\r\n\r\n//Auth const\r\nexport const SIGNUP_USER = 'SIGNUP_USER';\r\nexport const SIGNUP_USER_SUCCESS = 'SIGNUP_USER_SUCCESS';\r\nexport const SIGNIN_GOOGLE_USER = 'SIGNIN_GOOGLE_USER';\r\nexport const SIGNIN_GOOGLE_USER_SUCCESS = 'SIGNIN_GOOGLE_USER_SUCCESS';\r\nexport const SIGNIN_FACEBOOK_USER = 'SIGNIN_FACEBOOK_USER';\r\nexport const SIGNIN_FACEBOOK_USER_SUCCESS = 'SIGNIN_FACEBOOK_USER_SUCCESS';\r\nexport const SIGNIN_TWITTER_USER = 'SIGNIN_TWITTER_USER';\r\nexport const SIGNIN_TWITTER_USER_SUCCESS = 'SIGNIN_TWITTER_USER_SUCCESS';\r\nexport const SIGNIN_GITHUB_USER = 'SIGNIN_GITHUB_USER';\r\nexport const SIGNIN_GITHUB_USER_SUCCESS = 'signin_github_user_success';\r\nexport const SIGNIN_USER = 'SIGNIN_USER';\r\nexport const SIGNIN_USER_SUCCESS = 'SIGNIN_USER_SUCCESS';\r\nexport const SIGNOUT_USER = 'SIGNOUT_USER';\r\nexport const SIGNOUT_USER_SUCCESS = 'SIGNOUT_USER_SUCCESS';\r\nexport const INIT_URL = 'INIT_URL';\r\nexport const USER_DATA = 'user_data';\r\nexport const USER_TOKEN_SET = 'user_token_set';\r\n\r\n","import {FETCH_ERROR, FETCH_START, FETCH_SUCCESS, HIDE_MESSAGE, SHOW_MESSAGE} from '../../constants/ActionTypes'\r\n\r\nconst INIT_STATE = {\r\n  error: \"\",\r\n  loading: false,\r\n  message: ''\r\n};\r\n\r\nexport default (state = INIT_STATE, action) => {\r\n  switch (action.type) {\r\n    case FETCH_START: {\r\n      return {...state, error: '', message: '', loading: true};\r\n    }\r\n    case FETCH_SUCCESS: {\r\n      return {...state, error: '', message: '', loading: false};\r\n    }\r\n    case SHOW_MESSAGE: {\r\n      return {...state, error: '', message: action.payload, loading: false};\r\n    }\r\n    case FETCH_ERROR: {\r\n      return {...state, loading: false, error: action.payload, message: ''};\r\n    }\r\n    case HIDE_MESSAGE: {\r\n      return {...state, loading: false, error: '', message: ''};\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export const config = {\r\n    API_URL: process.env.REACT_APP_API_ENDPOINT,\r\n    // API_URL: 'http://3.6.94.126:8000/api',\r\n}\r\n\r\nexport const sentryData = {\r\n    SENTRY_DSN: \"https://7384d5f97c8c430b9818607c6929631b@o445214.ingest.sentry.io/5421223\",\r\n}","export const authConstants = {\r\n    LOGIN_SUCCESS: 'LOGIN_SUCCESS',\r\n    LOGIN_FAILURE: 'LOGIN_FAILURE',\r\n\r\n    LOGOUT_SUCCESS: 'LOGOUT_SUCCESS',\r\n\r\n    CHANGE_PASSWORD_REQUEST: 'CHANGE_PASSWORD_REQUEST',\r\n    CHANGE_PASSWORD_SUCCESS: 'CHANGE_PASSWORD_SUCCESS',\r\n    CHANGE_PASSWORD_FAILURE: 'CHANGE_PASSWORD_FAILURE',\r\n\r\n    FORGOT_PASSWORD_REQUEST: 'FORGOT_PASSWORD_REQUEST',\r\n    FORGOT_PASSWORD_SUCCESS: 'FORGOT_PASSWORD_SUCCESS',\r\n    FORGOT_PASSWORD_FAILURE: 'FORGOT_PASSWORD_FAILURE',\r\n\r\n    VALIDATE_TOKEN_REQUEST: 'VALIDATE_TOKEN_REQUEST',\r\n    VALIDATE_TOKEN_SUCCESS: 'VALIDATE_TOKEN_SUCCESS',\r\n    VALIDATE_TOKEN_FAILURE: 'VALIDATE_TOKEN_FAILURE',\r\n\r\n    SET_PASSWORD_REQUEST: 'SET_PASSWORD_REQUEST',\r\n    SET_PASSWORD_SUCCESS: 'SET_PASSWORD_SUCCESS',\r\n    SET_PASSWORD_FAILURE: 'SET_PASSWORD_FAILURE',\r\n};\r\n\r\n\r\nexport const roleConstants = {\r\n    ADMIN: 'ADMIN',\r\n    PARTNER: 'PARTNER'\r\n}","export const loaderConstants = {\r\n    SHOW_LOADER: 'SHOW_LOADER',\r\n    HIDE_LOADER: 'HIDE_LOADER'\r\n};","export const adminProductConstants = {\r\n    ADD_PRODUCT_REQUEST: 'ADD_PRODUCT_REQUEST',\r\n    ADD_PRODUCT_SUCCESS: 'ADD_PRODUCT_SUCCESS',\r\n    ADD_PRODUCT_FAILURE: 'ADD_PRODUCT_FAILURE',\r\n\r\n    EDIT_PRODUCT_REQUEST: 'EDIT_PRODUCT_REQUEST',\r\n    EDIT_PRODUCT_SUCCESS: 'EDIT_PRODUCT_SUCCESS',\r\n    EDIT_PRODUCT_FAILURE: 'EDIT_PRODUCT_FAILURE',\r\n\r\n    GET_PRODUCT_LIST_REQUEST: 'GET_PRODUCT_LIST_REQUEST',\r\n    GET_PRODUCT_LIST_SUCCESS: 'GET_PRODUCT_LIST_SUCCESS',\r\n    GET_PRODUCT_LIST_FAILURE: 'GET_PRODUCT_LIST_FAILURE',\r\n\r\n    GET_PRODUCT_REQUEST: 'GET_PRODUCT_REQUEST',\r\n    GET_PRODUCT_SUCCESS: 'GET_PRODUCT_SUCCESS',\r\n    GET_PRODUCT_FAILURE: 'GET_PRODUCT_FAILURE',\r\n\r\n    DELETE_PRODUCT_REQUEST: 'DELETE_PRODUCT_REQUEST',\r\n    DELETE_PRODUCT_SUCCESS: 'DELETE_PRODUCT_SUCCESS',\r\n    DELETE_PRODUCT_FAILURE: 'DELETE_PRODUCT_FAILURE',\r\n\r\n    GET_PRODUCT_DETAILS_REQUEST: 'GET_PRODUCT_DETAILS_REQUEST',\r\n    GET_PRODUCT_DETAILS_SUCCESS: 'GET_PRODUCT_DETAILS_SUCCESS',\r\n    GET_PRODUCT_DETAILS_FAILURE: 'GET_PRODUCT_DETAILS_FAILURE',\r\n\r\n    RESET_PRODUCT: 'RESET_PRODUCT'\r\n};","export const adminPartnerConstants = {\r\n    ADD_PARTNER_REQUEST: 'ADD_PARTNER_REQUEST',\r\n    ADD_PARTNER_SUCCESS: 'ADD_PARTNER_SUCCESS',\r\n    ADD_PARTNER_FAILURE: 'ADD_PARTNER_FAILURE',\r\n\r\n    EDIT_PARTNER_REQUEST: 'EDIT_PARTNER_REQUEST',\r\n    EDIT_PARTNER_SUCCESS: 'EDIT_PARTNER_SUCCESS',\r\n    EDIT_PARTNER_FAILURE: 'EDIT_PARTNER_FAILURE',\r\n\r\n    GET_PARTNER_LIST_REQUEST: 'GET_PARTNER_LIST_REQUEST',\r\n    GET_PARTNER_LIST_SUCCESS: 'GET_PARTNER_LIST_SUCCESS',\r\n    GET_PARTNER_LIST_FAILURE: 'GET_PARTNER_LIST_FAILURE',\r\n\r\n    GET_PARTNER_REQUEST: 'GET_PARTNER_REQUEST',\r\n    GET_PARTNER_SUCCESS: 'GET_PARTNER_SUCCESS',\r\n    GET_PARTNER_FAILURE: 'GET_PARTNER_FAILURE',\r\n\r\n    DELETE_PARTNER_REQUEST: 'DELETE_PARTNER_REQUEST',\r\n    DELETE_PARTNER_SUCCESS: 'DELETE_PARTNER_SUCCESS',\r\n    DELETE_PARTNER_FAILURE: 'DELETE_PARTNER_FAILURE',\r\n\r\n    SEND_REMINDER_REQUEST: 'SEND_REMINDER_REQUEST',\r\n    SEND_REMINDER_SUCCESS: 'SEND_REMINDER_SUCCESS',\r\n    SEND_REMINDER_FAILURE: 'SEND_REMINDER_FAILURE',\r\n\r\n    RESET_EDIT_PARTNER: 'RESET_EDIT_PARTNER',\r\n\r\n    GET_COUNTRY_LIST_REQUEST: 'GET_COUNTRY_LIST_REQUEST',\r\n    GET_COUNTRY_LIST_SUCCESS: 'GET_COUNTRY_LIST_SUCCESS',\r\n    GET_COUNTRY_LIST_FAILURE: 'GET_COUNTRY_LIST_FAILURE',\r\n\r\n    SET_CUT_OFF_DATE_REQUEST: 'SET_CUT_OFF_DATE_REQUEST',\r\n    SET_CUT_OFF_DATE_SUCCESS: 'SET_CUT_OFF_DATE_SUCCESS',\r\n    SET_CUT_OFF_DATE_FAILURE: 'SET_CUT_OFF_DATE_FAILURE',\r\n\r\n    GET_CUT_OFF_DATE_REQUEST: 'GET_CUT_OFF_DATE_REQUEST',\r\n    GET_CUT_OFF_DATE_SUCCESS: 'GET_CUT_OFF_DATE_SUCCESS',\r\n    GET_CUT_OFF_DATE_FAILURE: 'GET_CUT_OFF_DATE_FAILURE'\r\n};","export const pdtConstants = {\r\n    GET_PDT_REQUEST: 'GET_PDT_REQUEST',\r\n    GET_PDT_SUCCESS: 'GET_PDT_SUCCESS',\r\n    GET_PDT_FAILURE: 'GET_PDT_FAILURE',\r\n\r\n    GET_PDT_REPORT_REQUEST: 'GET_PDT_REPORT_REQUEST',\r\n    GET_PDT_REPORT_SUCCESS: 'GET_PDT_REPORT_SUCCESS',\r\n    GET_PDT_REPORT_FAILURE: 'GET_PDT_REPORT_FAILURE',\r\n\r\n    POST_PDT_REQUEST: 'POST_PDT_REQUEST',\r\n    POST_PDT_SUCCESS: 'POST_PDT_SUCCESS',\r\n    POST_PDT_FAILURE: 'POST_PDT_FAILURE',\r\n\r\n    GET_ADMIN_PDT_REQUEST: 'GET_ADMIN_PDT_REQUEST',\r\n    GET_ADMIN_PDT_SUCCESS: 'GET_ADMIN_PDT_SUCCESS',\r\n    GET_ADMIN_PDT_FAILURE: 'GET_ADMIN_PDT_FAILURE',\r\n\r\n    POST_ADMIN_PDT_REQUEST: 'POST_ADMIN_PDT_REQUEST',\r\n    POST_ADMIN_PDT_SUCCESS: 'POST_ADMIN_PDT_SUCCESS',\r\n    POST_ADMIN_PDT_FAILURE: 'POST_ADMIN_PDT_FAILURE',\r\n\r\n    APPROVE_PDT_REQUEST: 'APPROVE_PDT_REQUEST',\r\n    APPROVE_PDT_SUCCESS: 'APPROVE_PDT_SUCCESS',\r\n    APPROVE_PDT_FAILURE: 'APPROVE_PDT_FAILURE',\r\n\r\n    REPORT_PDT_REQUEST: 'REPORT_PDT_REQUEST',\r\n    REPORT_PDT_SUCCESS: 'REPORT_PDT_SUCCESS',\r\n    REPORT_PDT_FAILURE: 'REPORT_PDT_FAILURE',\r\n\r\n    REPORT_DOWNLOAD_PDT_REQUEST: 'REPORT_DOWNLOAD_PDT_REQUEST',\r\n    REPORT_DOWNLOAD_PDT_SUCCESS: 'REPORT_DOWNLOAD_PDT_SUCCESS',\r\n    REPORT_DOWNLOAD_PDT_FAILURE: 'REPORT_DOWNLOAD_PDT_FAILURE',\r\n\r\n    MESSAGE_READ_REQUEST: 'MESSAGE_READ_REQUEST',\r\n    MESSAGE_READ_SUCCESS: 'MESSAGE_READ_SUCCESS',\r\n    MESSAGE_READ_FAILURE: 'MESSAGE_READ_FAILURE',\r\n};","export const filingPlansConstants = {\r\n    GET_FILING_PLANS_REQUEST: 'GET_FILING_PLANS_REQUEST',\r\n    GET_FILING_PLANS_SUCCESS: 'GET_FILING_PLANS_SUCCESS',\r\n    GET_FILING_PLANS_FAILURE: 'GET_FILING_PLANS_FAILURE',\r\n\r\n    GET_FILING_PLANS_REPORT_REQUEST: 'GET_FILING_PLANS_REPORT_REQUEST',\r\n    GET_FILING_PLANS_REPORT_SUCCESS: 'GET_FILING_PLANS_REPORT_SUCCESS',\r\n    GET_FILING_PLANS_REPORT_FAILURE: 'GET_FILING_PLANS_REPORT_FAILURE',\r\n\r\n    POST_FILING_PLANS_REQUEST: 'POST_FILING_PLANS_REQUEST',\r\n    POST_FILING_PLANS_SUCCESS: 'POST_FILING_PLANS_SUCCESS',\r\n    POST_FILING_PLANS_FAILURE: 'POST_FILING_PLANS_FAILURE',\r\n\r\n    GET_ADMIN_FILING_PLANS_REQUEST: 'GET_ADMIN_FILING_PLANS_REQUEST',\r\n    GET_ADMIN_FILING_PLANS_SUCCESS: 'GET_ADMIN_FILING_PLANS_SUCCESS',\r\n    GET_ADMIN_FILING_PLANS_FAILURE: 'GET_ADMIN_FILING_PLANS_FAILURE',\r\n\r\n    POST_ADMIN_FILING_PLANS_REQUEST: 'POST_ADMIN_FILING_PLANS_REQUEST',\r\n    POST_ADMIN_FILING_PLANS_SUCCESS: 'POST_ADMIN_FILING_PLANS_SUCCESS',\r\n    POST_ADMIN_FILING_PLANS_FAILURE: 'POST_ADMIN_FILING_PLANS_FAILURE',\r\n\r\n    APPROVE_FILING_PLANS_REQUEST: 'APPROVE_FILING_PLANS_REQUEST',\r\n    APPROVE_FILING_PLANS_SUCCESS: 'APPROVE_FILING_PLANS_SUCCESS',\r\n    APPROVE_FILING_PLANS_FAILURE: 'APPROVE_FILING_PLANS_FAILURE',\r\n\r\n    REPORT_FILING_PLANS_REQUEST: 'REPORT_FILING_PLANS_REQUEST',\r\n    REPORT_FILING_PLANS_SUCCESS: 'REPORT_FILING_PLANS_SUCCESS',\r\n    REPORT_FILING_PLANS_FAILURE: 'REPORT_FILING_PLANS_FAILURE',\r\n\r\n    REPORT_DOWNLOAD_FILING_PLANS_REQUEST: 'REPORT_DOWNLOAD_FILING_PLANS_REQUEST',\r\n    REPORT_DOWNLOAD_FILING_PLANS_SUCCESS: 'REPORT_DOWNLOAD_FILING_PLANS_SUCCESS',\r\n    REPORT_DOWNLOAD_FILING_PLANS_FAILURE: 'REPORT_DOWNLOAD_FILING_PLANS_FAILURE',\r\n\r\n    MESSAGE_READ_REQUEST: 'MESSAGE_READ_REQUEST',\r\n    MESSAGE_READ_SUCCESS: 'MESSAGE_READ_SUCCESS',\r\n    MESSAGE_READ_FAILURE: 'MESSAGE_READ_FAILURE',\r\n};","export const salesReportConstants = {\r\n    GET_API_SALES_REPORT_REQUEST: 'GET_API_SALES_REPORT_REQUEST',\r\n    GET_API_SALES_REPORT_SUCCESS: 'GET_API_SALES_REPORT_SUCCESS',\r\n    GET_API_SALES_REPORT_FAILURE: 'GET_API_SALES_REPORT_FAILURE',\r\n\r\n    GET_FDF_SALES_REPORT_REQUEST: 'GET_FDF_SALES_REPORT_REQUEST',\r\n    GET_FDF_SALES_REPORT_SUCCESS: 'GET_FDF_SALES_REPORT_SUCCESS',\r\n    GET_FDF_SALES_REPORT_FAILURE: 'GET_FDF_SALES_REPORT_FAILURE',\r\n\r\n    GET_CONSOLIDATED_API_SALES_REPORT_REQUEST: 'GET_CONSOLIDATED_API_SALES_REPORT_REQUEST',\r\n    GET_CONSOLIDATED_API_SALES_REPORT_SUCCESS: 'GET_CONSOLIDATED_API_SALES_REPORT_SUCCESS',\r\n    GET_CONSOLIDATED_API_SALES_REPORT_FAILURE: 'GET_CONSOLIDATED_API_SALES_REPORT_FAILURE',\r\n\r\n    GET_CONSOLIDATED_FDF_SALES_REPORT_REQUEST: 'GET_CONSOLIDATED_FDF_SALES_REPORT_REQUEST',\r\n    GET_CONSOLIDATED_FDF_SALES_REPORT_SUCCESS: 'GET_CONSOLIDATED_FDF_SALES_REPORT_SUCCESS',\r\n    GET_CONSOLIDATED_FDF_SALES_REPORT_FAILURE: 'GET_CONSOLIDATED_FDF_SALES_REPORT_FAILURE',\r\n\r\n    POST_API_SALES_REPORT_REQUEST: 'POST_API_SALES_REPORT_REQUEST',\r\n    POST_API_SALES_REPORT_SUCCESS: 'POST_API_SALES_REPORT_SUCCESS',\r\n    POST_API_SALES_REPORT_FAILURE: 'POST_API_SALES_REPORT_FAILURE',\r\n\r\n    POST_FDF_SALES_REPORT_REQUEST: 'POST_FDF_SALES_REPORT_REQUEST',\r\n    POST_FDF_SALES_REPORT_SUCCESS: 'POST_FDF_SALES_REPORT_SUCCESS',\r\n    POST_FDF_SALES_REPORT_FAILURE: 'POST_FDF_SALES_REPORT_FAILURE',\r\n\r\n    GET_ADMIN_API_SALES_REPORT_REQUEST: 'GET_ADMIN_API_SALES_REPORT_REQUEST',\r\n    GET_ADMIN_API_SALES_REPORT_SUCCESS: 'GET_ADMIN_API_SALES_REPORT_SUCCESS',\r\n    GET_ADMIN_API_SALES_REPORT_FAILURE: 'GET_ADMIN_API_SALES_REPORT_FAILURE',\r\n\r\n    GET_ADMIN_FDF_SALES_REPORT_REQUEST: 'GET_ADMIN_FDF_SALES_REPORT_REQUEST',\r\n    GET_ADMIN_FDF_SALES_REPORT_SUCCESS: 'GET_ADMIN_FDF_SALES_REPORT_SUCCESS',\r\n    GET_ADMIN_FDF_SALES_REPORT_FAILURE: 'GET_ADMIN_FDF_SALES_REPORT_FAILURE',\r\n\r\n    POST_ADMIN_API_SALES_REPORT_REQUEST: 'POST_ADMIN_API_SALES_REPORT_REQUEST',\r\n    POST_ADMIN_API_SALES_REPORT_SUCCESS: 'POST_ADMIN_API_SALES_REPORT_SUCCESS',\r\n    POST_ADMIN_API_SALES_REPORT_FAILURE: 'POST_ADMIN_API_SALES_REPORT_FAILURE',\r\n\r\n    POST_ADMIN_FDF_SALES_REPORT_REQUEST: 'POST_ADMIN_FDF_SALES_REPORT_REQUEST',\r\n    POST_ADMIN_FDF_SALES_REPORT_SUCCESS: 'POST_ADMIN_FDF_SALES_REPORT_SUCCESS',\r\n    POST_ADMIN_FDF_SALES_REPORT_FAILURE: 'POST_ADMIN_FDF_SALES_REPORT_FAILURE',\r\n\r\n    APPROVE_SALES_REPORT_REQUEST: 'APPROVE_SALES_REPORT_REQUEST',\r\n    APPROVE_SALES_REPORT_SUCCESS: 'APPROVE_SALES_REPORT_SUCCESS',\r\n    APPROVE_SALES_REPORT_FAILURE: 'APPROVE_SALES_REPORT_FAILURE',\r\n\r\n    SUBMIT_SALES_REPORT_REQUEST: 'SUBMIT_SALES_REPORT_REQUEST',\r\n    SUBMIT_SALES_REPORT_SUCCESS: 'SUBMIT_SALES_REPORT_SUCCESS',\r\n    SUBMIT_SALES_REPORT_FAILURE: 'SUBMIT_SALES_REPORT_FAILURE',\r\n\r\n    DOWNLOAD_API_SALES_REPORT_REQUEST: 'DOWNLOAD_API_SALES_REPORT_REQUEST',\r\n    DOWNLOAD_API_SALES_REPORT_SUCCESS: 'DOWNLOAD_API_SALES_REPORT_SUCCESS',\r\n    DOWNLOAD_API_SALES_REPORT_FAILURE: 'DOWNLOAD_API_SALES_REPORT_FAILURE',\r\n\r\n    DOWNLOAD_FDF_SALES_REPORT_REQUEST: 'DOWNLOAD_FDF_SALES_REPORT_REQUEST',\r\n    DOWNLOAD_FDF_SALES_REPORT_SUCCESS: 'DOWNLOAD_FDF_SALES_REPORT_SUCCESS',\r\n    DOWNLOAD_FDF_SALES_REPORT_FAILURE: 'DOWNLOAD_FDF_SALES_REPORT_FAILURE',\r\n\r\n    MESSAGE_READ_REQUEST: 'MESSAGE_READ_REQUEST',\r\n    MESSAGE_READ_SUCCESS: 'MESSAGE_READ_SUCCESS',\r\n    MESSAGE_READ_FAILURE: 'MESSAGE_READ_FAILURE',\r\n\r\n    GET_PRODUCT_VERIFICATION_LIST_REQUEST: 'GET_PRODUCT_VERIFICATION_LIST_REQUEST',\r\n    GET_PRODUCT_VERIFICATION_LIST_SUCCESS: 'GET_PRODUCT_VERIFICATION_LIST_SUCCESS',\r\n    GET_PRODUCT_VERIFICATION_LIST_FAILURE: 'GET_PRODUCT_VERIFICATION_LIST_FAILURE',\r\n\r\n    POST_PRODUCT_VERIFICATION_LIST_REQUEST: 'POST_PRODUCT_VERIFICATION_LIST_REQUEST',\r\n    POST_PRODUCT_VERIFICATION_LIST_SUCCESS: 'POST_PRODUCT_VERIFICATION_LIST_SUCCESS',\r\n    POST_PRODUCT_VERIFICATION_LIST_FAILURE: 'POST_PRODUCT_VERIFICATION_LIST_FAILURE',\r\n\r\n};","export const partnerDashboardConstants = {\r\n    GET_DASHBOARD_REQUEST: 'GET_DASHBOARD_REQUEST',\r\n    GET_DASHBOARD_SUCCESS: 'GET_DASHBOARD_SUCCESS',\r\n    GET_DASHBOARD_FAILURE: 'GET_DASHBOARD_FAILURE',\r\n};","export const adminDashboardConstants = {\r\n    GET_PROJECT_COUNT_REQUEST: 'GET_PROJECT_COUNT_REQUEST',\r\n    GET_PROJECT_COUNT_SUCCESS: 'GET_PROJECT_COUNT_SUCCESS',\r\n    GET_PROJECT_COUNT_FAILURE: 'GET_PROJECT_COUNT_FAILURE',\r\n\r\n    GET_PRODUCT_COMPANY_REQUEST: 'GET_PRODUCT_COMPANY_REQUEST',\r\n    GET_PRODUCT_COMPANY_SUCCESS: 'GET_PRODUCT_COMPANY_SUCCESS',\r\n    GET_PRODUCT_COMPANY_FAILURE: 'GET_PRODUCT_COMPANY_FAILURE',\r\n\r\n    GET_PRODUCT_COUNTRY_REQUEST: 'GET_PRODUCT_COUNTRY_REQUEST',\r\n    GET_PRODUCT_COUNTRY_SUCCESS: 'GET_PRODUCT_COUNTRY_SUCCESS',\r\n    GET_PRODUCT_COUNTRY_FAILURE: 'GET_PRODUCT_COUNTRY_FAILURE',\r\n\r\n    GET_PRODUCT_COUNTRY_QUARTER_REQUEST: 'GET_PRODUCT_COUNTRY_QUARTER_REQUEST',\r\n    GET_PRODUCT_COUNTRY_QUARTER_SUCCESS: 'GET_PRODUCT_COUNTRY_QUARTER_SUCCESS',\r\n    GET_PRODUCT_COUNTRY_QUARTER_FAILURE: 'GET_PRODUCT_COUNTRY_QUARTER_FAILURE',\r\n\r\n    GET_COMPANY_REQUEST: 'GET_COMPANY_REQUEST',\r\n    GET_COMPANY_SUCCESS: 'GET_COMPANY_SUCCESS',\r\n    GET_COMPANY_FAILURE: 'GET_COMPANY_FAILURE',\r\n    \r\n    GET_COUNTRY_PRODUCT_REQUEST: 'GET_COUNTRY_PRODUCT_REQUEST',\r\n    GET_COUNTRY_PRODUCT_SUCCESS: 'GET_COUNTRY_PRODUCT_SUCCESS',\r\n    GET_COUNTRY_PRODUCT_FAILURE: 'GET_COUNTRY_PRODUCT_FAILURE',\r\n    //\r\n    GET_COUNTRY_PRODUCT_STATUS_REQUEST: 'GET_COUNTRY_PRODUCT_STATUS_REQUEST',\r\n    GET_COUNTRY_PRODUCT_STATUS_SUCCESS: 'GET_COUNTRY_PRODUCT_STATUS_SUCCESS',\r\n    GET_COUNTRY_PRODUCT_STATUS_FAILURE: 'GET_COUNTRY_PRODUCT_STATUS_FAILURE',\r\n\r\n    GET_PRODUCT_COMPANY_SALES_REQUEST: 'GET_PRODUCT_COMPANY_SALES_REQUEST',\r\n    GET_PRODUCT_COMPANY_SALES_SUCCESS: 'GET_PRODUCT_COMPANY_SALES_SUCCESS',\r\n    GET_PRODUCT_COMPANY_SALES_FAILURE: 'GET_PRODUCT_COMPANY_SALES_FAILURE',\r\n\r\n    GET_PRODUCT_PERIOD_SALES_REQUEST: 'GET_PRODUCT_PERIOD_SALES_REQUEST',\r\n    GET_PRODUCT_PERIOD_SALES_SUCCESS: 'GET_PRODUCT_PERIOD_SALES_SUCCESS',\r\n    GET_PRODUCT_PERIOD_SALES_FAILURE: 'GET_PRODUCT_PERIOD_SALES_FAILURE',\r\n\r\n    GET_PRODUCT_COUNTRY_SALES_REQUEST: 'GET_PRODUCT_COUNTRY_SALES_REQUEST',\r\n    GET_PRODUCT_COUNTRY_SALES_SUCCESS: 'GET_PRODUCT_COUNTRY_SALES_SUCCESS',\r\n    GET_PRODUCT_COUNTRY_SALES_FAILURE: 'GET_PRODUCT_COUNTRY_SALES_FAILURE',\r\n\r\n    GET_COMPANY_PRODUCT_SALES_REQUEST: 'GET_COMPANY_PRODUCT_SALES_REQUEST',\r\n    GET_COMPANY_PRODUCT_SALES_SUCCESS: 'GET_COMPANY_PRODUCT_SALES_SUCCESS',\r\n    GET_COMPANY_PRODUCT_SALES_FAILURE: 'GET_COMPANY_PRODUCT_SALES_FAILURE',\r\n\r\n    GET_COMPANY_PERIOD_SALES_REQUEST: 'GET_COMPANY_PERIOD_SALES_REQUEST',\r\n    GET_COMPANY_PERIOD_SALES_SUCCESS: 'GET_COMPANY_PERIOD_SALES_SUCCESS',\r\n    GET_COMPANY_PERIOD_SALES_FAILURE: 'GET_COMPANY_PERIOD_SALES_FAILURE',\r\n    \r\n    GET_COMPANY_COUNTRY_SALES_REQUEST: 'GET_COMPANY_COUNTRY_SALES_REQUEST',\r\n    GET_COMPANY_COUNTRY_SALES_SUCCESS: 'GET_COMPANY_COUNTRY_SALES_SUCCESS',\r\n    GET_COMPANY_COUNTRY_SALES_FAILURE: 'GET_COMPANY_COUNTRY_SALES_FAILURE',\r\n    \r\n    GET_COUNTRY_PRODUCT_SALES_REQUEST: 'GET_COUNTRY_PRODUCT_SALES_REQUEST',\r\n    GET_COUNTRY_PRODUCT_SALES_SUCCESS: 'GET_COUNTRY_PRODUCT_SALES_SUCCESS',\r\n    GET_COUNTRY_PRODUCT_SALES_FAILURE: 'GET_COUNTRY_PRODUCT_SALES_FAILURE',\r\n\r\n    GET_COUNTRY_PERIOD_SALES_REQUEST: 'GET_COUNTRY_PERIOD_SALES_REQUEST',\r\n    GET_COUNTRY_PERIOD_SALES_SUCCESS: 'GET_COUNTRY_PERIOD_SALES_SUCCESS',\r\n    GET_COUNTRY_PERIOD_SALES_FAILURE: 'GET_COUNTRY_PERIOD_SALES_FAILURE',\r\n\r\n    GET_COUNTRY_COMPANY_SALES_REQUEST: 'GET_COUNTRY_COMPANY_SALES_REQUEST',\r\n    GET_COUNTRY_COMPANY_SALES_SUCCESS: 'GET_COUNTRY_COMPANY_SALES_SUCCESS',\r\n    GET_COUNTRY_COMPANY_SALES_FAILURE: 'GET_COUNTRY_COMPANY_SALES_FAILURE',\r\n    \r\n    GET_PERIOD_PRODUCT_SALES_REQUEST: 'GET_PERIOD_PRODUCT_SALES_REQUEST',\r\n    GET_PERIOD_PRODUCT_SALES_SUCCESS: 'GET_PERIOD_PRODUCT_SALES_SUCCESS',\r\n    GET_PERIOD_PRODUCT_SALES_FAILURE: 'GET_PERIOD_PRODUCT_SALES_FAILURE',\r\n\r\n    GET_PERIOD_COUNTRY_SALES_REQUEST: 'GET_PERIOD_COUNTRY_SALES_REQUEST',\r\n    GET_PERIOD_COUNTRY_SALES_SUCCESS: 'GET_PERIOD_COUNTRY_SALES_SUCCESS',\r\n    GET_PERIOD_COUNTRY_SALES_FAILURE: 'GET_PERIOD_COUNTRY_SALES_FAILURE',\r\n\r\n    GET_PERIOD_COMPANY_SALES_REQUEST: 'GET_PERIOD_COMPANY_SALES_REQUEST',\r\n    GET_PERIOD_COMPANY_SALES_SUCCESS: 'GET_PERIOD_COMPANY_SALES_SUCCESS',\r\n    GET_PERIOD_COMPANY_SALES_FAILURE: 'GET_PERIOD_COMPANY_SALES_FAILURE',\r\n\r\n    GET_PACK_PERIOD_SALES_REQUEST: 'GET_PACK_PERIOD_SALES_REQUEST',\r\n    GET_PACK_PERIOD_SALES_SUCCESS: 'GET_PACK_PERIOD_SALES_SUCCESS',\r\n    GET_PACK_PERIOD_SALES_FAILURE: 'GET_PACK_PERIOD_SALES_FAILURE',\r\n    \r\n    GET_TREATMENT_PERIOD_SALES_REQUEST: 'GET_TREATMENT_PERIOD_SALES_REQUEST',\r\n    GET_TREATMENT_PERIOD_SALES_SUCCESS: 'GET_TREATMENT_PERIOD_SALES_SUCCESS',\r\n    GET_TREATMENT_PERIOD_SALES_FAILURE: 'GET_TREATMENT_PERIOD_SALES_FAILURE',\r\n\r\n    GET_ADMIN_DASHBOARD_SUMMARY_REQUEST: 'GET_ADMIN_DASHBOARD_SUMMARY_REQUEST',\r\n    GET_ADMIN_DASHBOARD_SUMMARY_SUCCESS: 'GET_ADMIN_DASHBOARD_SUMMARY_SUCCESS',\r\n    GET_ADMIN_DASHBOARD_SUMMARY_FAILURE: 'GET_ADMIN_DASHBOARD_SUMMARY_FAILURE',\r\n\r\n    SEND_BULK_REMINDER_REQUEST: 'SEND_BULK_REMINDER_REQUEST',\r\n    SEND_BULK_REMINDER_SUCCESS: 'SEND_BULK_REMINDER_SUCCESS',\r\n    SEND_BULK_REMINDER_FAILURE: 'SEND_BULK_REMINDER_FAILURE',\r\n\r\n};","import { loaderConstants } from '../../constants';\r\n\r\n\r\nconst initialSettings = {\r\n    showLoader: false\r\n};\r\n\r\nconst Loader = (state = initialSettings, action) => {\r\n    switch (action.type) {\r\n        case loaderConstants.SHOW_LOADER:\r\n            return {\r\n                ...state,\r\n                showLoader: true\r\n            };\r\n        case loaderConstants.HIDE_LOADER:\r\n            return {\r\n                ...state,\r\n                showLoader: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default Loader;\r\n","import { adminProductConstants } from '../../constants';\r\n\r\n\r\nconst initialSettings = {\r\n    isProductAdded: false,\r\n    isProductEdited: false,\r\n    isProductLoaded:false,\r\n    productList: [],\r\n    productItem: {},\r\n    productDetails: {},\r\n    isLoaded: false\r\n};\r\n\r\nconst AdminProducts = (state = initialSettings, action) => {\r\n    switch (action.type) {\r\n        case adminProductConstants.ADD_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isProductAdded: false\r\n            };\r\n        case adminProductConstants.ADD_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isProductAdded: true\r\n            };\r\n        case adminProductConstants.ADD_PRODUCT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isProductAdded: false\r\n            };\r\n\r\n        case adminProductConstants.EDIT_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isProductEdited: false\r\n            };\r\n        case adminProductConstants.EDIT_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isProductEdited: true\r\n            };\r\n        case adminProductConstants.EDIT_PRODUCT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isProductEdited: false\r\n            };\r\n\r\n        case adminProductConstants.DELETE_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case adminProductConstants.DELETE_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case adminProductConstants.DELETE_PRODUCT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case adminProductConstants.GET_PRODUCT_LIST_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false,\r\n            };\r\n        case adminProductConstants.GET_PRODUCT_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                productList: action.data\r\n            };\r\n        case adminProductConstants.GET_PRODUCT_LIST_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n            };\r\n\r\n        case adminProductConstants.GET_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false,\r\n            };\r\n        case adminProductConstants.GET_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                productItem: action.data\r\n            };\r\n        case adminProductConstants.GET_PRODUCT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n            };\r\n\r\n        case adminProductConstants.RESET_PRODUCT:\r\n            return {\r\n                ...state,\r\n                isProductAdded: false,\r\n                isProductEdited: false\r\n            }\r\n\r\n        case adminProductConstants.GET_PRODUCT_DETAILS_REQUEST:\r\n            return {\r\n                ...state,\r\n                isProductLoaded: false,\r\n            };\r\n        case adminProductConstants.GET_PRODUCT_DETAILS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isProductLoaded: true,\r\n                productDetails: action.data\r\n            };\r\n        case adminProductConstants.GET_PRODUCT_DETAILS_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoisProductLoadedaded: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default AdminProducts;\r\n","import { adminPartnerConstants } from '../../constants';\r\n\r\n\r\nconst initialSettings = {\r\n    isPartnerAdded: false,\r\n    isPartnerEdited: false,\r\n    isPartnerDeleted: false,\r\n    setCutoffSuccess: false,\r\n    partnerList: [],\r\n    countryList: [],\r\n    partnerDetails: {},\r\n    cutOffDate: {},\r\n    isLoaded: false\r\n};\r\n\r\nconst AdminPartner = (state = initialSettings, action) => {\r\n    switch (action.type) {\r\n        case adminPartnerConstants.ADD_PARTNER_REQUEST:\r\n            return {\r\n                ...state,\r\n                isPartnerAdded: false\r\n            };\r\n        case adminPartnerConstants.ADD_PARTNER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isPartnerAdded: true\r\n            };\r\n        case adminPartnerConstants.ADD_PARTNER_FAILURE:\r\n            return {\r\n                ...state,\r\n                isPartnerAdded: false\r\n            };\r\n\r\n        case adminPartnerConstants.EDIT_PARTNER_REQUEST:\r\n            return {\r\n                ...state,\r\n                isPartnerEdited: false\r\n            };\r\n        case adminPartnerConstants.EDIT_PARTNER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isPartnerEdited: true\r\n            };\r\n        case adminPartnerConstants.EDIT_PARTNER_FAILURE:\r\n            return {\r\n                ...state,\r\n                isPartnerEdited: false\r\n            };\r\n\r\n        case adminPartnerConstants.DELETE_PARTNER_REQUEST:\r\n            return {\r\n                ...state,\r\n                isPartnerDeleted: false\r\n            };\r\n        case adminPartnerConstants.DELETE_PARTNER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isPartnerDeleted: true\r\n            };\r\n        case adminPartnerConstants.DELETE_PARTNER_FAILURE:\r\n            return {\r\n                ...state,\r\n                isPartnerDeleted: false\r\n            };\r\n\r\n        case adminPartnerConstants.RESET_EDIT_PARTNER:\r\n            return {\r\n                ...state,\r\n                isPartnerEdited: false,\r\n                isPartnerAdded: false\r\n            };\r\n\r\n        case adminPartnerConstants.GET_PARTNER_LIST_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false,\r\n            };\r\n        case adminPartnerConstants.GET_PARTNER_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                partnerList: action.data\r\n            };\r\n        case adminPartnerConstants.GET_PARTNER_LIST_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n            };\r\n        case adminPartnerConstants.GET_PARTNER_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false,\r\n            };\r\n        case adminPartnerConstants.GET_PARTNER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                partnerDetails: action.data\r\n            };\r\n        case adminPartnerConstants.GET_PARTNER_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n            };\r\n        case adminPartnerConstants.GET_COUNTRY_LIST_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case adminPartnerConstants.GET_COUNTRY_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                countryList: action.data\r\n            };\r\n        case adminPartnerConstants.GET_COUNTRY_LIST_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n        case adminPartnerConstants.SEND_REMINDER_REQUEST:\r\n            return {\r\n                ...state\r\n            };\r\n        case adminPartnerConstants.SEND_REMINDER_SUCCESS:\r\n            return {\r\n                ...state\r\n            };\r\n        case adminPartnerConstants.SEND_REMINDER_FAILURE:\r\n            return {\r\n                ...state\r\n            };\r\n        case adminPartnerConstants.SET_CUT_OFF_DATE_REQUEST:\r\n            return {\r\n                ...state,\r\n                setCutoffSuccess: false\r\n            };\r\n        case adminPartnerConstants.SET_CUT_OFF_DATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                setCutoffSuccess: true\r\n            };\r\n        case adminPartnerConstants.SET_CUT_OFF_DATE_FAILURE:\r\n            return {\r\n                ...state,\r\n                setCutoffSuccess: false\r\n            };\r\n        case adminPartnerConstants.GET_CUT_OFF_DATE_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false,\r\n            };\r\n        case adminPartnerConstants.GET_CUT_OFF_DATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                cutOffDate: action.data\r\n            };\r\n        case adminPartnerConstants.GET_CUT_OFF_DATE_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default AdminPartner;\r\n","import { partnerDashboardConstants } from '../../constants';\r\n\r\n\r\nconst initialSettings = {\r\n    partnerList: [],\r\n    isLoaded: false\r\n};\r\n\r\nconst partnerDashboard = (state = initialSettings, action) => {\r\n    switch (action.type) {\r\n        \r\n        case partnerDashboardConstants.GET_DASHBOARD_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false,\r\n            };\r\n        case partnerDashboardConstants.GET_DASHBOARD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                partnerList: action.data\r\n            };\r\n        case partnerDashboardConstants.GET_DASHBOARD_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default partnerDashboard;\r\n","import { pdtConstants } from '../../constants';\r\n\r\nconst initialSettings = {\r\n    pdtList: {},\r\n    pdtReportData: {},\r\n    isLoaded: false\r\n};\r\n\r\nconst ProductDevelopmentTimeline = (state = initialSettings, action) => {\r\n    switch (action.type) {\r\n        case pdtConstants.GET_PDT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case pdtConstants.GET_PDT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                pdtList: action.data\r\n            };\r\n        case pdtConstants.GET_PDT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case pdtConstants.GET_PDT_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case pdtConstants.GET_PDT_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                pdtReportData: action.data\r\n            };\r\n        case pdtConstants.GET_PDT_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case pdtConstants.GET_ADMIN_PDT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case pdtConstants.GET_ADMIN_PDT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                pdtList: action.data\r\n            };\r\n        case pdtConstants.GET_ADMIN_PDT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case pdtConstants.POST_PDT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.POST_PDT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.POST_PDT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case pdtConstants.POST_ADMIN_PDT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.POST_ADMIN_PDT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.POST_ADMIN_PDT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case pdtConstants.APPROVE_PDT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.APPROVE_PDT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.APPROVE_PDT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case pdtConstants.REPORT_PDT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.REPORT_PDT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.REPORT_PDT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case pdtConstants.REPORT_DOWNLOAD_PDT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.REPORT_DOWNLOAD_PDT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.REPORT_DOWNLOAD_PDT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case pdtConstants.MESSAGE_READ_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.MESSAGE_READ_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case pdtConstants.MESSAGE_READ_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default ProductDevelopmentTimeline;\r\n","import { filingPlansConstants } from '../../constants';\r\n\r\nconst initialSettings = {\r\n    plansList: {},\r\n    plansReportData: {},\r\n    isLoaded: false\r\n};\r\n\r\nconst FilingPlans = (state = initialSettings, action) => {\r\n    switch (action.type) {\r\n        case filingPlansConstants.GET_FILING_PLANS_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case filingPlansConstants.GET_FILING_PLANS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                plansList: action.data\r\n            };\r\n        case filingPlansConstants.GET_FILING_PLANS_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case filingPlansConstants.GET_FILING_PLANS_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case filingPlansConstants.GET_FILING_PLANS_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                plansReportData: action.data\r\n            };\r\n        case filingPlansConstants.GET_FILING_PLANS_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case filingPlansConstants.GET_ADMIN_FILING_PLANS_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case filingPlansConstants.GET_ADMIN_FILING_PLANS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                plansList: action.data\r\n            };\r\n        case filingPlansConstants.GET_ADMIN_FILING_PLANS_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case filingPlansConstants.POST_FILING_PLANS_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.POST_FILING_PLANS_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.POST_FILING_PLANS_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case filingPlansConstants.POST_ADMIN_FILING_PLANS_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.POST_ADMIN_FILING_PLANS_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.POST_ADMIN_FILING_PLANS_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case filingPlansConstants.APPROVE_FILING_PLANS_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.APPROVE_FILING_PLANS_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.APPROVE_FILING_PLANS_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case filingPlansConstants.REPORT_FILING_PLANS_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.REPORT_FILING_PLANS_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.REPORT_FILING_PLANS_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n\r\n        case filingPlansConstants.MESSAGE_READ_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.MESSAGE_READ_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case filingPlansConstants.MESSAGE_READ_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default FilingPlans;\r\n","import { salesReportConstants } from '../../constants';\r\n\r\nconst initialSettings = {\r\n    apiSalesList: {},\r\n    fdfSalesList: {},\r\n    apiSalesReportData: {},\r\n    fdfSalesReportData: {},\r\n    isLoaded: false\r\n};\r\n\r\nconst SalesReport = (state = initialSettings, action) => {\r\n    switch (action.type) {\r\n        case salesReportConstants.GET_API_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case salesReportConstants.GET_API_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                apiSalesList: action.data\r\n            };\r\n        case salesReportConstants.GET_API_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case salesReportConstants.GET_FDF_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case salesReportConstants.GET_FDF_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                fdfSalesList: action.data\r\n            };\r\n        case salesReportConstants.GET_FDF_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                apiSalesReportData: action.data\r\n            };\r\n        case salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                fdfSalesReportData: action.data\r\n            };\r\n        case salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case salesReportConstants.GET_ADMIN_API_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case salesReportConstants.GET_ADMIN_API_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                apiSalesList: action.data\r\n            };\r\n        case salesReportConstants.GET_ADMIN_API_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                fdfSalesList: action.data\r\n            };\r\n        case salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case salesReportConstants.POST_API_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.POST_API_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.POST_API_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case salesReportConstants.POST_FDF_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.POST_FDF_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.POST_FDF_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case salesReportConstants.POST_ADMIN_API_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.POST_ADMIN_API_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.POST_ADMIN_API_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case salesReportConstants.APPROVE_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.APPROVE_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.APPROVE_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case salesReportConstants.SUBMIT_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.SUBMIT_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.SUBMIT_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case salesReportConstants.DOWNLOAD_API_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.DOWNLOAD_API_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.DOWNLOAD_API_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case salesReportConstants.MESSAGE_READ_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.MESSAGE_READ_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.MESSAGE_READ_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        case salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoaded: false\r\n            };\r\n        case salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoaded: true,\r\n                productVerificationList: action.data\r\n            };\r\n        case salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoaded: true\r\n            };\r\n\r\n        case salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_REQUEST:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_SUCCESS:\r\n            return {\r\n                ...state,\r\n            };\r\n        case salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default SalesReport;\r\n","import { authConstants } from '../../constants';\r\n\r\nconst initialSettings = {\r\n    isUserLoggedIn: false,\r\n    changePasswordSuccess: false,\r\n    validateTokenSuccess: false,\r\n    setPasswordSuccess: false,\r\n    isMailSend: false\r\n};\r\n\r\nconst UserAuthentication = (state = initialSettings, action) => {\r\n    switch (action.type) {\r\n\r\n        case authConstants.LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isUserLoggedIn: true\r\n            };\r\n        case authConstants.LOGIN_FAILURE:\r\n            return {\r\n                ...state,\r\n                isUserLoggedIn: false\r\n            };\r\n\r\n        case authConstants.LOGOUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isUserLoggedIn: false\r\n            };\r\n\r\n        case authConstants.CHANGE_PASSWORD_REQUEST:\r\n            return {\r\n                ...state,\r\n                changePasswordSuccess: false\r\n            };\r\n        case authConstants.CHANGE_PASSWORD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                changePasswordSuccess: true\r\n            };\r\n        case authConstants.CHANGE_PASSWORD_FAILURE:\r\n            return {\r\n                ...state,\r\n                changePasswordSuccess: false\r\n            };\r\n\r\n        case authConstants.VALIDATE_TOKEN_REQUEST:\r\n            return {\r\n                ...state,\r\n                validateTokenSuccess: false\r\n            };\r\n        case authConstants.VALIDATE_TOKEN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                validateTokenSuccess: true\r\n            };\r\n        case authConstants.VALIDATE_TOKEN_FAILURE:\r\n            return {\r\n                ...state,\r\n                validateTokenSuccess: false\r\n            };\r\n\r\n        case authConstants.SET_PASSWORD_REQUEST:\r\n            return {\r\n                ...state,\r\n                setPasswordSuccess: false\r\n            };\r\n        case authConstants.SET_PASSWORD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                setPasswordSuccess: true\r\n            };\r\n        case authConstants.SET_PASSWORD_FAILURE:\r\n            return {\r\n                ...state,\r\n                setPasswordSuccess: false\r\n            };\r\n\r\n        case authConstants.FORGOT_PASSWORD_REQUEST:\r\n            return {\r\n                ...state,\r\n                isMailSend: false\r\n            };\r\n        case authConstants.FORGOT_PASSWORD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isMailSend: true\r\n            };\r\n        case authConstants.FORGOT_PASSWORD_FAILURE:\r\n            return {\r\n                ...state,\r\n                isMailSend: false\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default UserAuthentication;\r\n","import { adminDashboardConstants } from '../../constants';\r\n\r\n\r\nconst initialSettings = {\r\n    project_count: [],\r\n    isProjectCountLoaded: false,\r\n\r\n    product_company_count: [],\r\n    isProductCompanyCountLoaded: false,\r\n\r\n    product_country_count: [],\r\n    isProductCountryCountLoaded: false,\r\n\r\n    product_country_quarter_count: [],\r\n    future_quarters:[],\r\n    isProductCountryQuarterCountLoaded: false,\r\n\r\n    company_count: [],\r\n    isCompanyCountLoaded: false,\r\n    \r\n    country_product_count:[],\r\n    isCountryProductLoaded: false,\r\n\r\n    product_company_sales:[],\r\n    isProductCompanySalesLoaded: false,\r\n\r\n    product_period_sales:[],\r\n    isProductPeriodSalesLoaded: false,\r\n\r\n    product_country_sales:[],\r\n    isProductCountrySalesLoaded: false,\r\n\r\n    company_product_sales:[],\r\n    isCompanyProductSalesLoaded: false,\r\n\r\n    company_period_sales:[],\r\n    isCompanyPeriodSalesLoaded: false,\r\n\r\n    company_country_sales:[],\r\n    isCompanyCountrySalesLoaded: false,\r\n\r\n    country_product_sales:[],\r\n    isCountryProductSalesLoaded: false,\r\n\r\n    country_period_sales:[],\r\n    isCountryPeriodSalesLoaded: false,\r\n\r\n    country_company_sales:[],\r\n    isCountryCompanySalesLoaded: false,\r\n\r\n    period_product_sales:[],\r\n    isPeriodProductSalesLoaded: false,\r\n\r\n    period_country_sales:[],\r\n    isPeriodCountrySalesLoaded: false,\r\n\r\n    period_company_sales:[],\r\n    isPeriodCompanySalesLoaded: false,\r\n\r\n    pack_period_sales:[],\r\n    isPackPeriodSalesLoaded: false,\r\n\r\n    treatment_period_sales:[],\r\n    isTreatmentPeriodSalesLoaded: false,\r\n\r\n    admin_dashboard_summary:[],\r\n    isAdminDashboardSummaryLoaded: false,\r\n\r\n    setBulkReminderSuccess: false\r\n\r\n};\r\n\r\nconst AdminDashboard = (state = initialSettings, action) => {\r\n    switch (action.type) {\r\n        //Project Count\r\n        case adminDashboardConstants.GET_PROJECT_COUNT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isProjectCountLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PROJECT_COUNT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                project_count: action.data,\r\n                isProjectCountLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PROJECT_COUNT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isProjectCountLoaded: true\r\n            };\r\n        \r\n        //Product Company Count\r\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_REQUEST:\r\n            return {\r\n                ...state,\r\n                isProductCompanyCountLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                product_company_count: action.data,\r\n                isProductCompanyCountLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_FAILURE:\r\n            return {\r\n                ...state,\r\n                isProductCompanyCountLoaded: true\r\n            };\r\n\r\n        //Product Country Count\r\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_REQUEST:\r\n            return {\r\n                ...state,\r\n                isProductCountryCountLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                product_country_count: action.data,\r\n                isProductCountryCountLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_QUARTER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                product_country_count: action.data['rows'],\r\n                future_quarters: action.data['quarter_list'],\r\n                isProductCountryCountLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_FAILURE:\r\n            return {\r\n                ...state,\r\n                isProductCountryCountLoaded: true\r\n            };\r\n\r\n        \r\n        //Company Count\r\n        case adminDashboardConstants.GET_COMPANY_REQUEST:\r\n            return {\r\n                ...state,\r\n                isCompanyCountLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COMPANY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                company_count: action.data,\r\n                isCompanyCountLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COMPANY_FAILURE:\r\n            return {\r\n                ...state,\r\n                isCompanyCountLoaded: true\r\n            };\r\n\r\n        //Country By Product By Partner/Status\r\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isCountryProductLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                country_product_count: action.data,\r\n                isCountryProductLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isCountryProductLoaded: true\r\n            };\r\n\r\n        //Product By Company By Sales\r\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isCountryProductstatusLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                product_company_sales: action.data,\r\n                isProductCompanySalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isCountryProductStatusLoaded: true\r\n            };\r\n\r\n        //Product By Period By Sales\r\n        case adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isProductPeriodSalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                product_period_sales: action.data,\r\n                isProductPeriodSalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isProductPeriodSalesLoaded: true\r\n            };\r\n\r\n\r\n        //Product By Country By Sales\r\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isProductCountrySalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                product_country_sales: action.data,\r\n                isProductCountrySalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isProductCountrySalesLoaded: true\r\n            };\r\n\r\n        //Company By Product By Sales\r\n        case adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isCompanyProductSalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                company_product_sales: action.data,\r\n                isCompanyProductSalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isCompanyProductSalesLoaded: true\r\n            };\r\n\r\n        //Company By Period By Sales\r\n        case adminDashboardConstants.GET_COMPANY_PERIOD_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isCompanyPeriodSalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COMPANY_PERIOD_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                company_period_sales: action.data,\r\n                isCompanyPeriodSalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COMPANY_PERIOD_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isCompanyPeriodSalesLoaded: true\r\n            };\r\n\r\n        //Company By Country By Sales\r\n        case adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isCompanyCountrySalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                company_country_sales: action.data,\r\n                isCompanyCountrySalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isCompanyCountrySalesLoaded: true\r\n            };\r\n\r\n        //Country By Product By Sales\r\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isCountryProductSalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                country_product_sales: action.data,\r\n                isCountryProductSalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isCountryProductSalesLoaded: true\r\n            };\r\n\r\n\r\n        //Country By Period By Sales\r\n        case adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isCountryPeriodSalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                country_period_sales: action.data,\r\n                isCountryPeriodSalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isCountryPeriodSalesLoaded: true\r\n            };\r\n\r\n        //Country By Company By Sales\r\n        case adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isCountryCompanySalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                country_company_sales: action.data,\r\n                isCountryCompanySalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isCountryCompanySalesLoaded: true\r\n            };\r\n\r\n        //Period By Product By Sales\r\n        case adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isPeriodProductSalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                period_product_sales: action.data,\r\n                isPeriodProductSalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isPeriodProductSalesLoaded: true\r\n            };\r\n\r\n        //Period By Country By Sales\r\n        case adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isPeriodCountrySalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                period_country_sales: action.data,\r\n                isPeriodCountrySalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isPeriodCountrySalesLoaded: true\r\n            };\r\n        \r\n        //Period By Company By Sales\r\n        case adminDashboardConstants.GET_PERIOD_COMPANY_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isPeriodCompanySalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PERIOD_COMPANY_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                period_company_sales: action.data,\r\n                isPeriodCompanySalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PERIOD_COMPANY_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isPeriodCompanySalesLoaded: true\r\n            };\r\n        \r\n        //Pack By Period By Sales\r\n        case adminDashboardConstants.GET_PACK_PERIOD_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isPackPeriodSalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PACK_PERIOD_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                pack_period_sales: action.data,\r\n                isPackPeriodSalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_PACK_PERIOD_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isPackPeriodSalesLoaded: true\r\n            };\r\n\r\n        //Treatment By Period By Sales\r\n        case adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_REQUEST:\r\n            return {\r\n                ...state,\r\n                isTreatmentPeriodSalesLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                treatment_period_sales: action.data,\r\n                isTreatmentPeriodSalesLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_FAILURE:\r\n            return {\r\n                ...state,\r\n                isTreatmentPeriodSalesLoaded: true\r\n            };\r\n        \r\n        \r\n        //Admin Dashboard Summary\r\n        case adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_REQUEST:\r\n            return {\r\n                ...state,\r\n                isAdminDashboardSummaryLoaded: false\r\n            };\r\n\r\n        case adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                admin_dashboard_summary: action.data,\r\n                isAdminDashboardSummaryLoaded: true\r\n            };\r\n\r\n        case adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_FAILURE:\r\n            return {\r\n                ...state,\r\n                isAdminDashboardSummaryLoaded: true\r\n            };\r\n\r\n        \r\n        //Admin Dashboard Bulk Reminder\r\n        case adminDashboardConstants.SEND_BULK_REMINDER_REQUEST:\r\n            return {\r\n                ...state,\r\n                setBulkReminderSuccess: false\r\n            };\r\n\r\n        case adminDashboardConstants.SEND_BULK_REMINDER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                setBulkReminderSuccess: true\r\n            };\r\n\r\n        case adminDashboardConstants.SEND_BULK_REMINDER_FAILURE:\r\n            return {\r\n                ...state,\r\n                setBulkReminderSuccess: true\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default AdminDashboard;\r\n","import { applyMiddleware, compose, createStore } from 'redux'\r\nimport { routerMiddleware } from 'connected-react-router'\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\nimport createRootReducer from '../reducers';\r\n\r\nconst createBrowserHistory = require('history').createBrowserHistory;\r\n\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nconst routeMiddleware = routerMiddleware(history);\r\n\r\nconst middlewares = [thunk, routeMiddleware, logger];\r\n\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const store = createStore(\r\n    createRootReducer(history), // root reducer with router state\r\n    preloadedState,\r\n    compose(\r\n      applyMiddleware(\r\n        routerMiddleware(history), // for dispatching history actions\r\n        ...middlewares\r\n      ),\r\n    ),\r\n  );\r\n\r\n  return store;\r\n}\r\n","import antdEn from \"antd/lib/locale-provider/en_US\";\r\nimport enMessages from \"../locales/en_US.json\";\r\n\r\nconst EnLang = {\r\n  messages: {\r\n    ...enMessages\r\n  },\r\n  antd: antdEn,\r\n  locale: 'en-US',\r\n};\r\nexport default EnLang;\r\n","\r\nimport zhMessages from \"../locales/zh-Hans.json\";\r\n\r\nconst ZhLan = {\r\n  messages: {\r\n    ...zhMessages\r\n  },\r\n  antd: null,\r\n  locale: 'zh-Hans-CN',\r\n};\r\nexport default ZhLan;\r\n","import antdSA from \"antd/lib/locale-provider/en_US\";\r\n\r\nimport saMessages from \"../locales/ar_SA.json\";\r\n\r\nconst saLang = {\r\n  messages: {\r\n    ...saMessages\r\n  },\r\n  antd: antdSA,\r\n  locale: 'ar',\r\n};\r\nexport default saLang;\r\n","import antdSA from \"antd/lib/locale-provider/it_IT\";\r\nimport saMessages from \"../locales/it_IT.json\";\r\n\r\nconst saLang = {\r\n  messages: {\r\n    ...saMessages\r\n  },\r\n  antd: antdSA,\r\n  locale: 'it-IT',\r\n};\r\nexport default saLang;\r\n","import antdSA from \"antd/lib/locale-provider/ca_ES\";\r\nimport saMessages from \"../locales/es_ES.json\";\r\n\r\nconst saLang = {\r\n  messages: {\r\n    ...saMessages\r\n  },\r\n  antd: antdSA,\r\n  locale: 'es',\r\n};\r\nexport default saLang;\r\n","import enLang from \"./entries/en-US\";\r\nimport zhLang from \"./entries/zh-Hans-CN\";\r\nimport arLang from \"./entries/ar_SA\";\r\nimport itLang from \"./entries/it_IT\";\r\nimport esLang from \"./entries/es_ES\";\r\nimport frLang from \"./entries/fr_FR\";\r\n\r\nconst AppLocale = {\r\n  en: enLang,\r\n  zh: zhLang,\r\n  ar: arLang,\r\n  it: itLang,\r\n  es: esLang,\r\n  fr: frLang\r\n};\r\n\r\nexport default AppLocale;\r\n","import antdSA from \"antd/lib/locale-provider/fr_FR\";\r\nimport saMessages from \"../locales/fr_FR.json\";\r\n\r\nconst saLang = {\r\n  messages: {\r\n    ...saMessages\r\n  },\r\n  antd: antdSA,\r\n  locale: 'fr-FR',\r\n};\r\nexport default saLang;\r\n","import React from \"react\";\r\nimport {Scrollbars} from \"react-custom-scrollbars\";\r\n\r\nconst CustomScrollbars = (props) => <Scrollbars  {...props} autoHide\r\n                                                 renderTrackHorizontal={props => <div {...props}\r\n                                                                                      style={{display: 'none'}}\r\n                                                                                      className=\"track-horizontal\"/>}/>;\r\n\r\nexport default CustomScrollbars;\r\n","import {SWITCH_LANGUAGE, TOGGLE_COLLAPSED_NAV, WINDOW_WIDTH} from \"constants/ActionTypes\";\r\nimport {LAYOUT_TYPE, NAV_STYLE, THEME_COLOR, THEME_TYPE} from \"../../constants/ThemeSetting\";\r\n\r\n\r\nexport function toggleCollapsedSideNav(navCollapsed) {\r\n  return {type: TOGGLE_COLLAPSED_NAV, navCollapsed};\r\n}\r\n\r\nexport function updateWindowWidth(width) {\r\n  return (dispatch) => {\r\n    dispatch({type: WINDOW_WIDTH, width});\r\n  }\r\n\r\n}\r\n\r\nexport function setThemeType(themeType) {\r\n  return (dispatch) => {\r\n    dispatch({type: THEME_TYPE, themeType});\r\n  }\r\n}\r\n\r\nexport function setThemeColor(themeColor) {\r\n  return (dispatch) => {\r\n    dispatch({type: THEME_COLOR, themeColor});\r\n  }\r\n}\r\n\r\nexport function onNavStyleChange(navStyle) {\r\n  return (dispatch) => {\r\n    dispatch({type: NAV_STYLE, navStyle});\r\n  }\r\n}\r\n\r\nexport function onLayoutTypeChange(layoutType) {\r\n  return (dispatch) => {\r\n    dispatch({type: LAYOUT_TYPE, layoutType});\r\n  }\r\n}\r\n\r\nexport function switchLanguage(locale) {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: SWITCH_LANGUAGE,\r\n      payload: locale\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {onNavStyleChange, toggleCollapsedSideNav} from \"appRedux/actions/Setting\";\r\nimport {\r\n  NAV_STYLE_DRAWER,\r\n  NAV_STYLE_FIXED,\r\n  NAV_STYLE_MINI_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\r\n  TAB_SIZE,\r\n  THEME_TYPE_LITE\r\n} from \"../../constants/ThemeSetting\";\r\n\r\n\r\nconst SidebarLogo = () => {\r\n  const dispatch = useDispatch();\r\n  const {width, themeType, navCollapsed} = useSelector(({settings}) => settings);\r\n  let navStyle = useSelector(({settings}) => settings.navStyle);\r\n  if (width < TAB_SIZE && navStyle === NAV_STYLE_FIXED) {\r\n    navStyle = NAV_STYLE_DRAWER;\r\n  }\r\n  return (\r\n    <div className=\"gx-layout-sider-header\">\r\n\r\n      {(navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR) ? <div className=\"gx-linebar\">\r\n\r\n        <i\r\n          className={`gx-icon-btn icon icon-${navStyle === NAV_STYLE_MINI_SIDEBAR ? 'menu-unfold' : 'menu-fold'} ${themeType !== THEME_TYPE_LITE ? 'gx-text-white' : ''}`}\r\n          onClick={() => {\r\n            if (navStyle === NAV_STYLE_DRAWER) {\r\n              dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n            } else if (navStyle === NAV_STYLE_FIXED) {\r\n              dispatch(onNavStyleChange(NAV_STYLE_MINI_SIDEBAR))\r\n            } else if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\r\n              dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n            } else {\r\n              dispatch(onNavStyleChange(NAV_STYLE_FIXED))\r\n            }\r\n          }}\r\n        />\r\n      </div> : null}\r\n\r\n      <Link to=\"/\" className=\"gx-site-logo\">\r\n        {navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR && width >= TAB_SIZE ?\r\n          <img alt=\"\" src={require(\"assets/images/w-logo.png\")}/> :\r\n          themeType === THEME_TYPE_LITE ?\r\n            <img alt=\"\" src={require(\"assets/images/logo-white.png\")}/> :\r\n            <img alt=\"\" src={require(\"assets/images/mpp_logo_white.png\")}/>}\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SidebarLogo;\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","export function authHeader() {\r\n    // return authorization header with jwt token\r\n    let user = JSON.parse(localStorage.getItem('user'));\r\n    if (user && user.access) {\r\n        return { 'Authorization': `Bearer ${user.access}` };\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n","import { message } from 'antd';\r\n\r\nexport function showMessage(type, msgTxt) {\r\n    switch (type) {\r\n        case 'success':\r\n            message.success(msgTxt);\r\n            break;\r\n\r\n        case 'error':\r\n            message.error(msgTxt);\r\n            break;\r\n\r\n        case 'info':\r\n            message.info(msgTxt);\r\n            break;\r\n\r\n        case 'warning':\r\n            message.warning(msgTxt);\r\n            break;\r\n\r\n        case 'loading':\r\n            message.loading(msgTxt);\r\n            break;\r\n\r\n        default:\r\n            message.info(msgTxt);\r\n    }\r\n}","import * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\nimport moment from 'moment';\r\nimport { Modal } from 'antd';\r\n\r\nexport const getRole = () => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    return user ? user.role : ''\r\n}\r\n\r\nexport const getQuarter = () => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    return user ? user.curr_quarter : ''\r\n}\r\n\r\nexport const getUserDetails = () => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    return user ? user.username : ''\r\n}\r\n\r\nexport const getUserInfo = () => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    return user ?\r\n        user.role === 'PARTNER' ?\r\n            { ...user.partner, email: user.email } :\r\n            { name: user.username, email: user.email } :\r\n        {}\r\n}\r\n\r\nexport const exportToXLXS = (fileData, fileName) => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n    const ws = XLSX.utils.json_to_sheet(fileData);\r\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, fileName + fileExtension);\r\n}\r\n\r\nexport const yearList = () => {\r\n    let currentYear = Number(moment(new Date()).format('YYYY'));\r\n    let yearArray = [];\r\n    for (let i = currentYear - 20; i <= currentYear; i++) {\r\n        yearArray.unshift(i)\r\n    }\r\n    return yearArray\r\n}\r\n\r\nexport const showConfirm = (title, onSuccess) => {\r\n    Modal.confirm({\r\n        title: title,\r\n        okText: 'Ok',\r\n        cancelText: 'Cancel',\r\n        onOk() {\r\n            onSuccess()\r\n        },\r\n        onCancel() {\r\n        },\r\n    })\r\n}","export const statusArray = [\r\n    { name: 'PLANNED', id: 'PLANNED' },\r\n    { name: 'UNDER DEVELOPMENT', id: 'UNDER_DEVELOPMENT' },\r\n    { name: 'ON HOLD', id: 'ON_HOLD' },\r\n    { name: 'DROPPED', id: 'DROPPED' },\r\n    { name: 'FILED', id: 'FILED' },\r\n    { name: 'APPROVED', id: 'APPROVED' }\r\n]\r\n\r\nexport const monthArray = [\r\n    { id: 'January', name: 'January' },\r\n    { id: 'February', name: 'February' },\r\n    { id: 'March', name: 'March' },\r\n    { id: 'April', name: 'April' },\r\n    { id: 'May', name: 'May' },\r\n    { id: 'June', name: 'June' },\r\n    { id: 'July', name: 'July' },\r\n    { id: 'August', name: 'August' },\r\n    { id: 'September', name: 'September' },\r\n    { id: 'October', name: 'October' },\r\n    { id: 'November', name: 'November' },\r\n    { id: 'December', name: 'December' }\r\n]\r\n\r\nexport const formulationType = [\r\n    'Tablet',\r\n    'Granules',\r\n    'Liquid',\r\n    'Powder for suspension'\r\n]\r\n\r\nexport const currencyList = {\r\n    \"AED\": \"United Arab Emirates Dirham\",\r\n    \"AFN\": \"Afghan Afghani\",\r\n    \"ALL\": \"Albanian Lek\",\r\n    \"AMD\": \"Armenian Dram\",\r\n    \"ANG\": \"Netherlands Antillean Guilder\",\r\n    \"AOA\": \"Angolan Kwanza\",\r\n    \"ARS\": \"Argentine Peso\",\r\n    \"AUD\": \"Australian Dollar\",\r\n    \"AWG\": \"Aruban Florin\",\r\n    \"AZN\": \"Azerbaijani Manat\",\r\n    \"BAM\": \"Bosnia-Herzegovina Convertible Mark\",\r\n    \"BBD\": \"Barbadian Dollar\",\r\n    \"BDT\": \"Bangladeshi Taka\",\r\n    \"BGN\": \"Bulgarian Lev\",\r\n    \"BHD\": \"Bahraini Dinar\",\r\n    \"BIF\": \"Burundian Franc\",\r\n    \"BMD\": \"Bermudan Dollar\",\r\n    \"BND\": \"Brunei Dollar\",\r\n    \"BOB\": \"Bolivian Boliviano\",\r\n    \"BRL\": \"Brazilian Real\",\r\n    \"BSD\": \"Bahamian Dollar\",\r\n    \"BTC\": \"Bitcoin\",\r\n    \"BTN\": \"Bhutanese Ngultrum\",\r\n    \"BWP\": \"Botswanan Pula\",\r\n    \"BYN\": \"Belarusian Ruble\",\r\n    \"BZD\": \"Belize Dollar\",\r\n    \"CAD\": \"Canadian Dollar\",\r\n    \"CDF\": \"Congolese Franc\",\r\n    \"CHF\": \"Swiss Franc\",\r\n    \"CLF\": \"Chilean Unit of Account (UF)\",\r\n    \"CLP\": \"Chilean Peso\",\r\n    \"CNH\": \"Chinese Yuan (Offshore)\",\r\n    \"CNY\": \"Chinese Yuan\",\r\n    \"COP\": \"Colombian Peso\",\r\n    \"CRC\": \"Costa Rican Colón\",\r\n    \"CUC\": \"Cuban Convertible Peso\",\r\n    \"CUP\": \"Cuban Peso\",\r\n    \"CVE\": \"Cape Verdean Escudo\",\r\n    \"CZK\": \"Czech Republic Koruna\",\r\n    \"DJF\": \"Djiboutian Franc\",\r\n    \"DKK\": \"Danish Krone\",\r\n    \"DOP\": \"Dominican Peso\",\r\n    \"DZD\": \"Algerian Dinar\",\r\n    \"EGP\": \"Egyptian Pound\",\r\n    \"ERN\": \"Eritrean Nakfa\",\r\n    \"ETB\": \"Ethiopian Birr\",\r\n    \"EUR\": \"Euro\",\r\n    \"FJD\": \"Fijian Dollar\",\r\n    \"FKP\": \"Falkland Islands Pound\",\r\n    \"GBP\": \"British Pound Sterling\",\r\n    \"GEL\": \"Georgian Lari\",\r\n    \"GGP\": \"Guernsey Pound\",\r\n    \"GHS\": \"Ghanaian Cedi\",\r\n    \"GIP\": \"Gibraltar Pound\",\r\n    \"GMD\": \"Gambian Dalasi\",\r\n    \"GNF\": \"Guinean Franc\",\r\n    \"GTQ\": \"Guatemalan Quetzal\",\r\n    \"GYD\": \"Guyanaese Dollar\",\r\n    \"HKD\": \"Hong Kong Dollar\",\r\n    \"HNL\": \"Honduran Lempira\",\r\n    \"HRK\": \"Croatian Kuna\",\r\n    \"HTG\": \"Haitian Gourde\",\r\n    \"HUF\": \"Hungarian Forint\",\r\n    \"IDR\": \"Indonesian Rupiah\",\r\n    \"ILS\": \"Israeli New Sheqel\",\r\n    \"IMP\": \"Manx pound\",\r\n    \"INR\": \"Indian Rupee\",\r\n    \"IQD\": \"Iraqi Dinar\",\r\n    \"IRR\": \"Iranian Rial\",\r\n    \"ISK\": \"Icelandic Króna\",\r\n    \"JEP\": \"Jersey Pound\",\r\n    \"JMD\": \"Jamaican Dollar\",\r\n    \"JOD\": \"Jordanian Dinar\",\r\n    \"JPY\": \"Japanese Yen\",\r\n    \"KES\": \"Kenyan Shilling\",\r\n    \"KGS\": \"Kyrgystani Som\",\r\n    \"KHR\": \"Cambodian Riel\",\r\n    \"KMF\": \"Comorian Franc\",\r\n    \"KPW\": \"North Korean Won\",\r\n    \"KRW\": \"South Korean Won\",\r\n    \"KWD\": \"Kuwaiti Dinar\",\r\n    \"KYD\": \"Cayman Islands Dollar\",\r\n    \"KZT\": \"Kazakhstani Tenge\",\r\n    \"LAK\": \"Laotian Kip\",\r\n    \"LBP\": \"Lebanese Pound\",\r\n    \"LKR\": \"Sri Lankan Rupee\",\r\n    \"LRD\": \"Liberian Dollar\",\r\n    \"LSL\": \"Lesotho Loti\",\r\n    \"LYD\": \"Libyan Dinar\",\r\n    \"MAD\": \"Moroccan Dirham\",\r\n    \"MDL\": \"Moldovan Leu\",\r\n    \"MGA\": \"Malagasy Ariary\",\r\n    \"MKD\": \"Macedonian Denar\",\r\n    \"MMK\": \"Myanma Kyat\",\r\n    \"MNT\": \"Mongolian Tugrik\",\r\n    \"MOP\": \"Macanese Pataca\",\r\n    \"MRO\": \"Mauritanian Ouguiya (pre-2018)\",\r\n    \"MRU\": \"Mauritanian Ouguiya\",\r\n    \"MUR\": \"Mauritian Rupee\",\r\n    \"MVR\": \"Maldivian Rufiyaa\",\r\n    \"MWK\": \"Malawian Kwacha\",\r\n    \"MXN\": \"Mexican Peso\",\r\n    \"MYR\": \"Malaysian Ringgit\",\r\n    \"MZN\": \"Mozambican Metical\",\r\n    \"NAD\": \"Namibian Dollar\",\r\n    \"NGN\": \"Nigerian Naira\",\r\n    \"NIO\": \"Nicaraguan Córdoba\",\r\n    \"NOK\": \"Norwegian Krone\",\r\n    \"NPR\": \"Nepalese Rupee\",\r\n    \"NZD\": \"New Zealand Dollar\",\r\n    \"OMR\": \"Omani Rial\",\r\n    \"PAB\": \"Panamanian Balboa\",\r\n    \"PEN\": \"Peruvian Nuevo Sol\",\r\n    \"PGK\": \"Papua New Guinean Kina\",\r\n    \"PHP\": \"Philippine Peso\",\r\n    \"PKR\": \"Pakistani Rupee\",\r\n    \"PLN\": \"Polish Zloty\",\r\n    \"PYG\": \"Paraguayan Guarani\",\r\n    \"QAR\": \"Qatari Rial\",\r\n    \"RON\": \"Romanian Leu\",\r\n    \"RSD\": \"Serbian Dinar\",\r\n    \"RUB\": \"Russian Ruble\",\r\n    \"RWF\": \"Rwandan Franc\",\r\n    \"SAR\": \"Saudi Riyal\",\r\n    \"SBD\": \"Solomon Islands Dollar\",\r\n    \"SCR\": \"Seychellois Rupee\",\r\n    \"SDG\": \"Sudanese Pound\",\r\n    \"SEK\": \"Swedish Krona\",\r\n    \"SGD\": \"Singapore Dollar\",\r\n    \"SHP\": \"Saint Helena Pound\",\r\n    \"SLL\": \"Sierra Leonean Leone\",\r\n    \"SOS\": \"Somali Shilling\",\r\n    \"SRD\": \"Surinamese Dollar\",\r\n    \"SSP\": \"South Sudanese Pound\",\r\n    \"STD\": \"São Tomé and Príncipe Dobra (pre-2018)\",\r\n    \"STN\": \"São Tomé and Príncipe Dobra\",\r\n    \"SVC\": \"Salvadoran Colón\",\r\n    \"SYP\": \"Syrian Pound\",\r\n    \"SZL\": \"Swazi Lilangeni\",\r\n    \"THB\": \"Thai Baht\",\r\n    \"TJS\": \"Tajikistani Somoni\",\r\n    \"TMT\": \"Turkmenistani Manat\",\r\n    \"TND\": \"Tunisian Dinar\",\r\n    \"TOP\": \"Tongan Pa'anga\",\r\n    \"TRY\": \"Turkish Lira\",\r\n    \"TTD\": \"Trinidad and Tobago Dollar\",\r\n    \"TWD\": \"New Taiwan Dollar\",\r\n    \"TZS\": \"Tanzanian Shilling\",\r\n    \"UAH\": \"Ukrainian Hryvnia\",\r\n    \"UGX\": \"Ugandan Shilling\",\r\n    \"USD\": \"United States Dollar\",\r\n    \"UYU\": \"Uruguayan Peso\",\r\n    \"UZS\": \"Uzbekistan Som\",\r\n    \"VEF\": \"Venezuelan Bolívar Fuerte (Old)\",\r\n    \"VES\": \"Venezuelan Bolívar Soberano\",\r\n    \"VND\": \"Vietnamese Dong\",\r\n    \"VUV\": \"Vanuatu Vatu\",\r\n    \"WST\": \"Samoan Tala\",\r\n    \"XAF\": \"CFA Franc BEAC\",\r\n    \"XAG\": \"Silver Ounce\",\r\n    \"XAU\": \"Gold Ounce\",\r\n    \"XCD\": \"East Caribbean Dollar\",\r\n    \"XDR\": \"Special Drawing Rights\",\r\n    \"XOF\": \"CFA Franc BCEAO\",\r\n    \"XPD\": \"Palladium Ounce\",\r\n    \"XPF\": \"CFP Franc\",\r\n    \"XPT\": \"Platinum Ounce\",\r\n    \"YER\": \"Yemeni Rial\",\r\n    \"ZAR\": \"South African Rand\",\r\n    \"ZMW\": \"Zambian Kwacha\",\r\n    \"ZWL\": \"Zimbabwean Dollar\"\r\n}\r\n\r\nexport const countryList = [\r\n    \"Afghanistan\",\r\n    \"Albania\",\r\n    \"Algeria\",\r\n    \"American Samoa\",\r\n    \"Andorra\",\r\n    \"Angola\",\r\n    \"Anguilla\",\r\n    \"Antarctica\",\r\n    \"Antigua and Barbuda\",\r\n    \"Argentina\",\r\n    \"Armenia\",\r\n    \"Aruba\",\r\n    \"Australia\",\r\n    \"Austria\",\r\n    \"Azerbaijan\",\r\n    \"Bahamas (the)\",\r\n    \"Bahrain\",\r\n    \"Bangladesh\",\r\n    \"Barbados\",\r\n    \"Belarus\",\r\n    \"Belgium\",\r\n    \"Belize\",\r\n    \"Benin\",\r\n    \"Bermuda\",\r\n    \"Bhutan\",\r\n    \"Bolivia (Plurinational State of)\",\r\n    \"Bonaire, Sint Eustatius and Saba\",\r\n    \"Bosnia and Herzegovina\",\r\n    \"Botswana\",\r\n    \"Bouvet Island\",\r\n    \"Brazil\",\r\n    \"British Indian Ocean Territory (the)\",\r\n    \"Brunei Darussalam\",\r\n    \"Bulgaria\",\r\n    \"Burkina Faso\",\r\n    \"Burundi\",\r\n    \"Cabo Verde\",\r\n    \"Cambodia\",\r\n    \"Cameroon\",\r\n    \"Canada\",\r\n    \"Cayman Islands (the)\",\r\n    \"Central African Republic (the)\",\r\n    \"Chad\",\r\n    \"Chile\",\r\n    \"China\",\r\n    \"Christmas Island\",\r\n    \"Cocos (Keeling) Islands (the)\",\r\n    \"Colombia\",\r\n    \"Comoros (the)\",\r\n    \"Congo (the Democratic Republic of the)\",\r\n    \"Congo (the)\",\r\n    \"Cook Islands (the)\",\r\n    \"Costa Rica\",\r\n    \"Croatia\",\r\n    \"Cuba\",\r\n    \"Curaçao\",\r\n    \"Cyprus\",\r\n    \"Czechia\",\r\n    \"Côte d'Ivoire\",\r\n    \"Denmark\",\r\n    \"Djibouti\",\r\n    \"Dominica\",\r\n    \"Dominican Republic (the)\",\r\n    \"Ecuador\",\r\n    \"Egypt\",\r\n    \"El Salvador\",\r\n    \"Equatorial Guinea\",\r\n    \"Eritrea\",\r\n    \"Estonia\",\r\n    \"Eswatini\",\r\n    \"Ethiopia\",\r\n    \"Falkland Islands (the) [Malvinas]\",\r\n    \"Faroe Islands (the)\",\r\n    \"Fiji\",\r\n    \"Finland\",\r\n    \"France\",\r\n    \"French Guiana\",\r\n    \"French Polynesia\",\r\n    \"French Southern Territories (the)\",\r\n    \"Gabon\",\r\n    \"Gambia (the)\",\r\n    \"Georgia\",\r\n    \"Germany\",\r\n    \"Ghana\",\r\n    \"Gibraltar\",\r\n    \"Greece\",\r\n    \"Greenland\",\r\n    \"Grenada\",\r\n    \"Guadeloupe\",\r\n    \"Guam\",\r\n    \"Guatemala\",\r\n    \"Guernsey\",\r\n    \"Guinea\",\r\n    \"Guinea-Bissau\",\r\n    \"Guyana\",\r\n    \"Haiti\",\r\n    \"Heard Island and McDonald Islands\",\r\n    \"Holy See (the)\",\r\n    \"Honduras\",\r\n    \"Hong Kong\",\r\n    \"Hungary\",\r\n    \"Iceland\",\r\n    \"India\",\r\n    \"Indonesia\",\r\n    \"Iran (Islamic Republic of)\",\r\n    \"Iraq\",\r\n    \"Ireland\",\r\n    \"Isle of Man\",\r\n    \"Israel\",\r\n    \"Italy\",\r\n    \"Jamaica\",\r\n    \"Japan\",\r\n    \"Jersey\",\r\n    \"Jordan\",\r\n    \"Kazakhstan\",\r\n    \"Kenya\",\r\n    \"Kiribati\",\r\n    \"Korea (the Democratic People's Republic of)\",\r\n    \"Korea (the Republic of)\",\r\n    \"Kuwait\",\r\n    \"Kyrgyzstan\",\r\n    \"Lao People's Democratic Republic (the)\",\r\n    \"Latvia\",\r\n    \"Lebanon\",\r\n    \"Lesotho\",\r\n    \"Liberia\",\r\n    \"Libya\",\r\n    \"Liechtenstein\",\r\n    \"Lithuania\",\r\n    \"Luxembourg\",\r\n    \"Macao\",\r\n    \"Madagascar\",\r\n    \"Malawi\",\r\n    \"Malaysia\",\r\n    \"Maldives\",\r\n    \"Mali\",\r\n    \"Malta\",\r\n    \"Marshall Islands (the)\",\r\n    \"Martinique\",\r\n    \"Mauritania\",\r\n    \"Mauritius\",\r\n    \"Mayotte\",\r\n    \"Mexico\",\r\n    \"Micronesia (Federated States of)\",\r\n    \"Moldova (the Republic of)\",\r\n    \"Monaco\",\r\n    \"Mongolia\",\r\n    \"Montenegro\",\r\n    \"Montserrat\",\r\n    \"Morocco\",\r\n    \"Mozambique\",\r\n    \"Myanmar\",\r\n    \"Namibia\",\r\n    \"Nauru\",\r\n    \"Nepal\",\r\n    \"Netherlands (the)\",\r\n    \"New Caledonia\",\r\n    \"New Zealand\",\r\n    \"Nicaragua\",\r\n    \"Niger (the)\",\r\n    \"Nigeria\",\r\n    \"Niue\",\r\n    \"Norfolk Island\",\r\n    \"Northern Mariana Islands (the)\",\r\n    \"Norway\",\r\n    \"Oman\",\r\n    \"Pakistan\",\r\n    \"Palau\",\r\n    \"Palestine, State of\",\r\n    \"Panama\",\r\n    \"Papua New Guinea\",\r\n    \"Paraguay\",\r\n    \"Peru\",\r\n    \"Philippines (the)\",\r\n    \"Pitcairn\",\r\n    \"Poland\",\r\n    \"Portugal\",\r\n    \"Puerto Rico\",\r\n    \"Qatar\",\r\n    \"Republic of North Macedonia\",\r\n    \"Romania\",\r\n    \"Russian Federation (the)\",\r\n    \"Rwanda\",\r\n    \"Réunion\",\r\n    \"Saint Barthélemy\",\r\n    \"Saint Helena, Ascension and Tristan da Cunha\",\r\n    \"Saint Kitts and Nevis\",\r\n    \"Saint Lucia\",\r\n    \"Saint Martin (French part)\",\r\n    \"Saint Pierre and Miquelon\",\r\n    \"Saint Vincent and the Grenadines\",\r\n    \"Samoa\",\r\n    \"San Marino\",\r\n    \"Sao Tome and Principe\",\r\n    \"Saudi Arabia\",\r\n    \"Senegal\",\r\n    \"Serbia\",\r\n    \"Seychelles\",\r\n    \"Sierra Leone\",\r\n    \"Singapore\",\r\n    \"Sint Maarten (Dutch part)\",\r\n    \"Slovakia\",\r\n    \"Slovenia\",\r\n    \"Solomon Islands\",\r\n    \"Somalia\",\r\n    \"South Africa\",\r\n    \"South Georgia and the South Sandwich Islands\",\r\n    \"South Sudan\",\r\n    \"Spain\",\r\n    \"Sri Lanka\",\r\n    \"Sudan (the)\",\r\n    \"Suriname\",\r\n    \"Svalbard and Jan Mayen\",\r\n    \"Sweden\",\r\n    \"Switzerland\",\r\n    \"Syrian Arab Republic\",\r\n    \"Taiwan\",\r\n    \"Tajikistan\",\r\n    \"Tanzania, United Republic of\",\r\n    \"Thailand\",\r\n    \"Timor-Leste\",\r\n    \"Togo\",\r\n    \"Tokelau\",\r\n    \"Tonga\",\r\n    \"Trinidad and Tobago\",\r\n    \"Tunisia\",\r\n    \"Turkey\",\r\n    \"Turkmenistan\",\r\n    \"Turks and Caicos Islands (the)\",\r\n    \"Tuvalu\",\r\n    \"Uganda\",\r\n    \"Ukraine\",\r\n    \"United Arab Emirates (the)\",\r\n    \"United Kingdom of Great Britain and Northern Ireland (the)\",\r\n    \"United States Minor Outlying Islands (the)\",\r\n    \"United States of America (the)\",\r\n    \"Uruguay\",\r\n    \"Uzbekistan\",\r\n    \"Vanuatu\",\r\n    \"Venezuela (Bolivarian Republic of)\",\r\n    \"Viet Nam\",\r\n    \"Virgin Islands (British)\",\r\n    \"Virgin Islands (U.S.)\",\r\n    \"Wallis and Futuna\",\r\n    \"Western Sahara\",\r\n    \"Yemen\",\r\n    \"Zambia\",\r\n    \"Zimbabwe\",\r\n    \"Åland Islands\"\r\n];\r\n\r\nexport const countryCodeList = [\r\n    {\r\n        \"code\": \"+7 840\",\r\n        \"name\": \"Abkhazia\"\r\n    },\r\n    {\r\n        \"code\": \"+93\",\r\n        \"name\": \"Afghanistan\"\r\n    },\r\n    {\r\n        \"code\": \"+355\",\r\n        \"name\": \"Albania\"\r\n    },\r\n    {\r\n        \"code\": \"+213\",\r\n        \"name\": \"Algeria\"\r\n    },\r\n    {\r\n        \"code\": \"+1 684\",\r\n        \"name\": \"American Samoa\"\r\n    },\r\n    {\r\n        \"code\": \"+376\",\r\n        \"name\": \"Andorra\"\r\n    },\r\n    {\r\n        \"code\": \"+244\",\r\n        \"name\": \"Angola\"\r\n    },\r\n    {\r\n        \"code\": \"+1 264\",\r\n        \"name\": \"Anguilla\"\r\n    },\r\n    {\r\n        \"code\": \"+1 268\",\r\n        \"name\": \"Antigua and Barbuda\"\r\n    },\r\n    {\r\n        \"code\": \"+54\",\r\n        \"name\": \"Argentina\"\r\n    },\r\n    {\r\n        \"code\": \"+374\",\r\n        \"name\": \"Armenia\"\r\n    },\r\n    {\r\n        \"code\": \"+297\",\r\n        \"name\": \"Aruba\"\r\n    },\r\n    {\r\n        \"code\": \"+247\",\r\n        \"name\": \"Ascension\"\r\n    },\r\n    {\r\n        \"code\": \"+61\",\r\n        \"name\": \"Australia\"\r\n    },\r\n    {\r\n        \"code\": \"+672\",\r\n        \"name\": \"Australian External Territories\"\r\n    },\r\n    {\r\n        \"code\": \"+43\",\r\n        \"name\": \"Austria\"\r\n    },\r\n    {\r\n        \"code\": \"+994\",\r\n        \"name\": \"Azerbaijan\"\r\n    },\r\n    {\r\n        \"code\": \"+1 242\",\r\n        \"name\": \"Bahamas\"\r\n    },\r\n    {\r\n        \"code\": \"+973\",\r\n        \"name\": \"Bahrain\"\r\n    },\r\n    {\r\n        \"code\": \"+880\",\r\n        \"name\": \"Bangladesh\"\r\n    },\r\n    {\r\n        \"code\": \"+1 246\",\r\n        \"name\": \"Barbados\"\r\n    },\r\n    {\r\n        \"code\": \"+375\",\r\n        \"name\": \"Belarus\"\r\n    },\r\n    {\r\n        \"code\": \"+32\",\r\n        \"name\": \"Belgium\"\r\n    },\r\n    {\r\n        \"code\": \"+501\",\r\n        \"name\": \"Belize\"\r\n    },\r\n    {\r\n        \"code\": \"+229\",\r\n        \"name\": \"Benin\"\r\n    },\r\n    {\r\n        \"code\": \"+1 441\",\r\n        \"name\": \"Bermuda\"\r\n    },\r\n    {\r\n        \"code\": \"+975\",\r\n        \"name\": \"Bhutan\"\r\n    },\r\n    {\r\n        \"code\": \"+591\",\r\n        \"name\": \"Bolivia\"\r\n    },\r\n    {\r\n        \"code\": \"+387\",\r\n        \"name\": \"Bosnia and Herzegovina\"\r\n    },\r\n    {\r\n        \"code\": \"+267\",\r\n        \"name\": \"Botswana\"\r\n    },\r\n    {\r\n        \"code\": \"+55\",\r\n        \"name\": \"Brazil\"\r\n    },\r\n    {\r\n        \"code\": \"+246\",\r\n        \"name\": \"British Indian Ocean Territory\"\r\n    },\r\n    {\r\n        \"code\": \"+1 284\",\r\n        \"name\": \"British Virgin Islands\"\r\n    },\r\n    {\r\n        \"code\": \"+673\",\r\n        \"name\": \"Brunei\"\r\n    },\r\n    {\r\n        \"code\": \"+359\",\r\n        \"name\": \"Bulgaria\"\r\n    },\r\n    {\r\n        \"code\": \"+226\",\r\n        \"name\": \"Burkina Faso\"\r\n    },\r\n    {\r\n        \"code\": \"+257\",\r\n        \"name\": \"Burundi\"\r\n    },\r\n    {\r\n        \"code\": \"+855\",\r\n        \"name\": \"Cambodia\"\r\n    },\r\n    {\r\n        \"code\": \"+237\",\r\n        \"name\": \"Cameroon\"\r\n    },\r\n    {\r\n        \"code\": \"+1\",\r\n        \"name\": \"Canada\"\r\n    },\r\n    {\r\n        \"code\": \"+238\",\r\n        \"name\": \"Cape Verde\"\r\n    },\r\n    {\r\n        \"code\": \"+345\",\r\n        \"name\": \"Cayman Islands\"\r\n    },\r\n    {\r\n        \"code\": \"+236\",\r\n        \"name\": \"Central African Republic\"\r\n    },\r\n    {\r\n        \"code\": \"+235\",\r\n        \"name\": \"Chad\"\r\n    },\r\n    {\r\n        \"code\": \"+56\",\r\n        \"name\": \"Chile\"\r\n    },\r\n    {\r\n        \"code\": \"+86\",\r\n        \"name\": \"China\"\r\n    },\r\n    {\r\n        \"code\": \"+57\",\r\n        \"name\": \"Colombia\"\r\n    },\r\n    {\r\n        \"code\": \"+269\",\r\n        \"name\": \"Comoros\"\r\n    },\r\n    {\r\n        \"code\": \"+242\",\r\n        \"name\": \"Congo\"\r\n    },\r\n    {\r\n        \"code\": \"+243\",\r\n        \"name\": \"Congo, Dem. Rep. of (Zaire)\"\r\n    },\r\n    {\r\n        \"code\": \"+682\",\r\n        \"name\": \"Cook Islands\"\r\n    },\r\n    {\r\n        \"code\": \"+506\",\r\n        \"name\": \"Costa Rica\"\r\n    },\r\n    {\r\n        \"code\": \"+385\",\r\n        \"name\": \"Croatia\"\r\n    },\r\n    {\r\n        \"code\": \"+53\",\r\n        \"name\": \"Cuba\"\r\n    },\r\n    {\r\n        \"code\": \"+599\",\r\n        \"name\": \"Curacao\"\r\n    },\r\n    {\r\n        \"code\": \"+537\",\r\n        \"name\": \"Cyprus\"\r\n    },\r\n    {\r\n        \"code\": \"+420\",\r\n        \"name\": \"Czech Republic\"\r\n    },\r\n    {\r\n        \"code\": \"+45\",\r\n        \"name\": \"Denmark\"\r\n    },\r\n    {\r\n        \"code\": \"+253\",\r\n        \"name\": \"Djibouti\"\r\n    },\r\n    {\r\n        \"code\": \"+1 767\",\r\n        \"name\": \"Dominica\"\r\n    },\r\n    {\r\n        \"code\": \"+1 809\",\r\n        \"name\": \"Dominican Republic\"\r\n    },\r\n    {\r\n        \"code\": \"+670\",\r\n        \"name\": \"East Timor\"\r\n    },\r\n    {\r\n        \"code\": \"+593\",\r\n        \"name\": \"Ecuador\"\r\n    },\r\n    {\r\n        \"code\": \"+20\",\r\n        \"name\": \"Egypt\"\r\n    },\r\n    {\r\n        \"code\": \"+503\",\r\n        \"name\": \"El Salvador\"\r\n    },\r\n    {\r\n        \"code\": \"+240\",\r\n        \"name\": \"Equatorial Guinea\"\r\n    },\r\n    {\r\n        \"code\": \"+291\",\r\n        \"name\": \"Eritrea\"\r\n    },\r\n    {\r\n        \"code\": \"+372\",\r\n        \"name\": \"Estonia\"\r\n    },\r\n    {\r\n        \"code\": \"+251\",\r\n        \"name\": \"Ethiopia\"\r\n    },\r\n    {\r\n        \"code\": \"+500\",\r\n        \"name\": \"Falkland Islands\"\r\n    },\r\n    {\r\n        \"code\": \"+298\",\r\n        \"name\": \"Faroe Islands\"\r\n    },\r\n    {\r\n        \"code\": \"+679\",\r\n        \"name\": \"Fiji\"\r\n    },\r\n    {\r\n        \"code\": \"+358\",\r\n        \"name\": \"Finland\"\r\n    },\r\n    {\r\n        \"code\": \"+33\",\r\n        \"name\": \"France\"\r\n    },\r\n    {\r\n        \"code\": \"+596\",\r\n        \"name\": \"French Antilles\"\r\n    },\r\n    {\r\n        \"code\": \"+594\",\r\n        \"name\": \"French Guiana\"\r\n    },\r\n    {\r\n        \"code\": \"+689\",\r\n        \"name\": \"French Polynesia\"\r\n    },\r\n    {\r\n        \"code\": \"+241\",\r\n        \"name\": \"Gabon\"\r\n    },\r\n    {\r\n        \"code\": \"+220\",\r\n        \"name\": \"Gambia\"\r\n    },\r\n    {\r\n        \"code\": \"+995\",\r\n        \"name\": \"Georgia\"\r\n    },\r\n    {\r\n        \"code\": \"+49\",\r\n        \"name\": \"Germany\"\r\n    },\r\n    {\r\n        \"code\": \"+233\",\r\n        \"name\": \"Ghana\"\r\n    },\r\n    {\r\n        \"code\": \"+350\",\r\n        \"name\": \"Gibraltar\"\r\n    },\r\n    {\r\n        \"code\": \"+30\",\r\n        \"name\": \"Greece\"\r\n    },\r\n    {\r\n        \"code\": \"+299\",\r\n        \"name\": \"Greenland\"\r\n    },\r\n    {\r\n        \"code\": \"+1 473\",\r\n        \"name\": \"Grenada\"\r\n    },\r\n    {\r\n        \"code\": \"+590\",\r\n        \"name\": \"Guadeloupe\"\r\n    },\r\n    {\r\n        \"code\": \"+1 671\",\r\n        \"name\": \"Guam\"\r\n    },\r\n    {\r\n        \"code\": \"+502\",\r\n        \"name\": \"Guatemala\"\r\n    },\r\n    {\r\n        \"code\": \"+224\",\r\n        \"name\": \"Guinea\"\r\n    },\r\n    {\r\n        \"code\": \"+245\",\r\n        \"name\": \"Guinea-Bissau\"\r\n    },\r\n    {\r\n        \"code\": \"+595\",\r\n        \"name\": \"Guyana\"\r\n    },\r\n    {\r\n        \"code\": \"+509\",\r\n        \"name\": \"Haiti\"\r\n    },\r\n    {\r\n        \"code\": \"+504\",\r\n        \"name\": \"Honduras\"\r\n    },\r\n    {\r\n        \"code\": \"+852\",\r\n        \"name\": \"Hong Kong SAR China\"\r\n    },\r\n    {\r\n        \"code\": \"+36\",\r\n        \"name\": \"Hungary\"\r\n    },\r\n    {\r\n        \"code\": \"+354\",\r\n        \"name\": \"Iceland\"\r\n    },\r\n    {\r\n        \"code\": \"+91\",\r\n        \"name\": \"India\"\r\n    },\r\n    {\r\n        \"code\": \"+62\",\r\n        \"name\": \"Indonesia\"\r\n    },\r\n    {\r\n        \"code\": \"+98\",\r\n        \"name\": \"Iran\"\r\n    },\r\n    {\r\n        \"code\": \"+964\",\r\n        \"name\": \"Iraq\"\r\n    },\r\n    {\r\n        \"code\": \"+353\",\r\n        \"name\": \"Ireland\"\r\n    },\r\n    {\r\n        \"code\": \"+972\",\r\n        \"name\": \"Israel\"\r\n    },\r\n    {\r\n        \"code\": \"+39\",\r\n        \"name\": \"Italy\"\r\n    },\r\n    {\r\n        \"code\": \"+225\",\r\n        \"name\": \"Ivory Coast\"\r\n    },\r\n    {\r\n        \"code\": \"+1 876\",\r\n        \"name\": \"Jamaica\"\r\n    },\r\n    {\r\n        \"code\": \"+81\",\r\n        \"name\": \"Japan\"\r\n    },\r\n    {\r\n        \"code\": \"+962\",\r\n        \"name\": \"Jordan\"\r\n    },\r\n    {\r\n        \"code\": \"+7 7\",\r\n        \"name\": \"Kazakhstan\"\r\n    },\r\n    {\r\n        \"code\": \"+254\",\r\n        \"name\": \"Kenya\"\r\n    },\r\n    {\r\n        \"code\": \"+686\",\r\n        \"name\": \"Kiribati\"\r\n    },\r\n    {\r\n        \"code\": \"+965\",\r\n        \"name\": \"Kuwait\"\r\n    },\r\n    {\r\n        \"code\": \"+996\",\r\n        \"name\": \"Kyrgyzstan\"\r\n    },\r\n    {\r\n        \"code\": \"+856\",\r\n        \"name\": \"Laos\"\r\n    },\r\n    {\r\n        \"code\": \"+371\",\r\n        \"name\": \"Latvia\"\r\n    },\r\n    {\r\n        \"code\": \"+961\",\r\n        \"name\": \"Lebanon\"\r\n    },\r\n    {\r\n        \"code\": \"+266\",\r\n        \"name\": \"Lesotho\"\r\n    },\r\n    {\r\n        \"code\": \"+231\",\r\n        \"name\": \"Liberia\"\r\n    },\r\n    {\r\n        \"code\": \"+218\",\r\n        \"name\": \"Libya\"\r\n    },\r\n    {\r\n        \"code\": \"+423\",\r\n        \"name\": \"Liechtenstein\"\r\n    },\r\n    {\r\n        \"code\": \"+370\",\r\n        \"name\": \"Lithuania\"\r\n    },\r\n    {\r\n        \"code\": \"+352\",\r\n        \"name\": \"Luxembourg\"\r\n    },\r\n    {\r\n        \"code\": \"+853\",\r\n        \"name\": \"Macau SAR China\"\r\n    },\r\n    {\r\n        \"code\": \"+389\",\r\n        \"name\": \"Macedonia\"\r\n    },\r\n    {\r\n        \"code\": \"+261\",\r\n        \"name\": \"Madagascar\"\r\n    },\r\n    {\r\n        \"code\": \"+265\",\r\n        \"name\": \"Malawi\"\r\n    },\r\n    {\r\n        \"code\": \"+60\",\r\n        \"name\": \"Malaysia\"\r\n    },\r\n    {\r\n        \"code\": \"+960\",\r\n        \"name\": \"Maldives\"\r\n    },\r\n    {\r\n        \"code\": \"+223\",\r\n        \"name\": \"Mali\"\r\n    },\r\n    {\r\n        \"code\": \"+356\",\r\n        \"name\": \"Malta\"\r\n    },\r\n    {\r\n        \"code\": \"+692\",\r\n        \"name\": \"Marshall Islands\"\r\n    },\r\n    {\r\n        \"code\": \"+222\",\r\n        \"name\": \"Mauritania\"\r\n    },\r\n    {\r\n        \"code\": \"+230\",\r\n        \"name\": \"Mauritius\"\r\n    },\r\n    {\r\n        \"code\": \"+52\",\r\n        \"name\": \"Mexico\"\r\n    },\r\n    {\r\n        \"code\": \"+691\",\r\n        \"name\": \"Micronesia\"\r\n    },\r\n    {\r\n        \"code\": \"+1 808\",\r\n        \"name\": \"Midway Island\"\r\n    },\r\n    {\r\n        \"code\": \"+373\",\r\n        \"name\": \"Moldova\"\r\n    },\r\n    {\r\n        \"code\": \"+377\",\r\n        \"name\": \"Monaco\"\r\n    },\r\n    {\r\n        \"code\": \"+976\",\r\n        \"name\": \"Mongolia\"\r\n    },\r\n    {\r\n        \"code\": \"+382\",\r\n        \"name\": \"Montenegro\"\r\n    },\r\n    {\r\n        \"code\": \"+1664\",\r\n        \"name\": \"Montserrat\"\r\n    },\r\n    {\r\n        \"code\": \"+212\",\r\n        \"name\": \"Morocco\"\r\n    },\r\n    {\r\n        \"code\": \"+95\",\r\n        \"name\": \"Myanmar\"\r\n    },\r\n    {\r\n        \"code\": \"+264\",\r\n        \"name\": \"Namibia\"\r\n    },\r\n    {\r\n        \"code\": \"+674\",\r\n        \"name\": \"Nauru\"\r\n    },\r\n    {\r\n        \"code\": \"+977\",\r\n        \"name\": \"Nepal\"\r\n    },\r\n    {\r\n        \"code\": \"+31\",\r\n        \"name\": \"Netherlands\"\r\n    },\r\n    {\r\n        \"code\": \"+1 869\",\r\n        \"name\": \"Nevis\"\r\n    },\r\n    {\r\n        \"code\": \"+687\",\r\n        \"name\": \"New Caledonia\"\r\n    },\r\n    {\r\n        \"code\": \"+64\",\r\n        \"name\": \"New Zealand\"\r\n    },\r\n    {\r\n        \"code\": \"+505\",\r\n        \"name\": \"Nicaragua\"\r\n    },\r\n    {\r\n        \"code\": \"+227\",\r\n        \"name\": \"Niger\"\r\n    },\r\n    {\r\n        \"code\": \"+234\",\r\n        \"name\": \"Nigeria\"\r\n    },\r\n    {\r\n        \"code\": \"+683\",\r\n        \"name\": \"Niue\"\r\n    },\r\n    {\r\n        \"code\": \"+850\",\r\n        \"name\": \"North Korea\"\r\n    },\r\n    {\r\n        \"code\": \"+1 670\",\r\n        \"name\": \"Northern Mariana Islands\"\r\n    },\r\n    {\r\n        \"code\": \"+47\",\r\n        \"name\": \"Norway\"\r\n    },\r\n    {\r\n        \"code\": \"+968\",\r\n        \"name\": \"Oman\"\r\n    },\r\n    {\r\n        \"code\": \"+92\",\r\n        \"name\": \"Pakistan\"\r\n    },\r\n    {\r\n        \"code\": \"+680\",\r\n        \"name\": \"Palau\"\r\n    },\r\n    {\r\n        \"code\": \"+970\",\r\n        \"name\": \"Palestinian Territory\"\r\n    },\r\n    {\r\n        \"code\": \"+507\",\r\n        \"name\": \"Panama\"\r\n    },\r\n    {\r\n        \"code\": \"+675\",\r\n        \"name\": \"Papua New Guinea\"\r\n    },\r\n    {\r\n        \"code\": \"+51\",\r\n        \"name\": \"Peru\"\r\n    },\r\n    {\r\n        \"code\": \"+63\",\r\n        \"name\": \"Philippines\"\r\n    },\r\n    {\r\n        \"code\": \"+48\",\r\n        \"name\": \"Poland\"\r\n    },\r\n    {\r\n        \"code\": \"+351\",\r\n        \"name\": \"Portugal\"\r\n    },\r\n    {\r\n        \"code\": \"+1 787\",\r\n        \"name\": \"Puerto Rico\"\r\n    },\r\n    {\r\n        \"code\": \"+974\",\r\n        \"name\": \"Qatar\"\r\n    },\r\n    {\r\n        \"code\": \"+262\",\r\n        \"name\": \"Reunion\"\r\n    },\r\n    {\r\n        \"code\": \"+40\",\r\n        \"name\": \"Romania\"\r\n    },\r\n    {\r\n        \"code\": \"+7\",\r\n        \"name\": \"Russia\"\r\n    },\r\n    {\r\n        \"code\": \"+250\",\r\n        \"name\": \"Rwanda\"\r\n    },\r\n    {\r\n        \"code\": \"+685\",\r\n        \"name\": \"Samoa\"\r\n    },\r\n    {\r\n        \"code\": \"+378\",\r\n        \"name\": \"San Marino\"\r\n    },\r\n    {\r\n        \"code\": \"+966\",\r\n        \"name\": \"Saudi Arabia\"\r\n    },\r\n    {\r\n        \"code\": \"+221\",\r\n        \"name\": \"Senegal\"\r\n    },\r\n    {\r\n        \"code\": \"+381\",\r\n        \"name\": \"Serbia\"\r\n    },\r\n    {\r\n        \"code\": \"+248\",\r\n        \"name\": \"Seychelles\"\r\n    },\r\n    {\r\n        \"code\": \"+232\",\r\n        \"name\": \"Sierra Leone\"\r\n    },\r\n    {\r\n        \"code\": \"+65\",\r\n        \"name\": \"Singapore\"\r\n    },\r\n    {\r\n        \"code\": \"+421\",\r\n        \"name\": \"Slovakia\"\r\n    },\r\n    {\r\n        \"code\": \"+386\",\r\n        \"name\": \"Slovenia\"\r\n    },\r\n    {\r\n        \"code\": \"+677\",\r\n        \"name\": \"Solomon Islands\"\r\n    },\r\n    {\r\n        \"code\": \"+27\",\r\n        \"name\": \"South Africa\"\r\n    },\r\n    {\r\n        \"code\": \"+82\",\r\n        \"name\": \"South Korea\"\r\n    },\r\n    {\r\n        \"code\": \"+34\",\r\n        \"name\": \"Spain\"\r\n    },\r\n    {\r\n        \"code\": \"+94\",\r\n        \"name\": \"Sri Lanka\"\r\n    },\r\n    {\r\n        \"code\": \"+249\",\r\n        \"name\": \"Sudan\"\r\n    },\r\n    {\r\n        \"code\": \"+597\",\r\n        \"name\": \"Suriname\"\r\n    },\r\n    {\r\n        \"code\": \"+268\",\r\n        \"name\": \"Swaziland\"\r\n    },\r\n    {\r\n        \"code\": \"+46\",\r\n        \"name\": \"Sweden\"\r\n    },\r\n    {\r\n        \"code\": \"+41\",\r\n        \"name\": \"Switzerland\"\r\n    },\r\n    {\r\n        \"code\": \"+963\",\r\n        \"name\": \"Syria\"\r\n    },\r\n    {\r\n        \"code\": \"+886\",\r\n        \"name\": \"Taiwan\"\r\n    },\r\n    {\r\n        \"code\": \"+992\",\r\n        \"name\": \"Tajikistan\"\r\n    },\r\n    {\r\n        \"code\": \"+255\",\r\n        \"name\": \"Tanzania\"\r\n    },\r\n    {\r\n        \"code\": \"+66\",\r\n        \"name\": \"Thailand\"\r\n    },\r\n    {\r\n        \"code\": \"+228\",\r\n        \"name\": \"Togo\"\r\n    },\r\n    {\r\n        \"code\": \"+690\",\r\n        \"name\": \"Tokelau\"\r\n    },\r\n    {\r\n        \"code\": \"+676\",\r\n        \"name\": \"Tonga\"\r\n    },\r\n    {\r\n        \"code\": \"+1 868\",\r\n        \"name\": \"Trinidad and Tobago\"\r\n    },\r\n    {\r\n        \"code\": \"+216\",\r\n        \"name\": \"Tunisia\"\r\n    },\r\n    {\r\n        \"code\": \"+90\",\r\n        \"name\": \"Turkey\"\r\n    },\r\n    {\r\n        \"code\": \"+993\",\r\n        \"name\": \"Turkmenistan\"\r\n    },\r\n    {\r\n        \"code\": \"+1 649\",\r\n        \"name\": \"Turks and Caicos Islands\"\r\n    },\r\n    {\r\n        \"code\": \"+688\",\r\n        \"name\": \"Tuvalu\"\r\n    },\r\n    {\r\n        \"code\": \"+1 340\",\r\n        \"name\": \"U.S. Virgin Islands\"\r\n    },\r\n    {\r\n        \"code\": \"+256\",\r\n        \"name\": \"Uganda\"\r\n    },\r\n    {\r\n        \"code\": \"+380\",\r\n        \"name\": \"Ukraine\"\r\n    },\r\n    {\r\n        \"code\": \"+971\",\r\n        \"name\": \"United Arab Emirates\"\r\n    },\r\n    {\r\n        \"code\": \"+44\",\r\n        \"name\": \"United Kingdom\"\r\n    },\r\n    {\r\n        \"code\": \"+598\",\r\n        \"name\": \"Uruguay\"\r\n    },\r\n    {\r\n        \"code\": \"+998\",\r\n        \"name\": \"Uzbekistan\"\r\n    },\r\n    {\r\n        \"code\": \"+678\",\r\n        \"name\": \"Vanuatu\"\r\n    },\r\n    {\r\n        \"code\": \"+58\",\r\n        \"name\": \"Venezuela\"\r\n    },\r\n    {\r\n        \"code\": \"+84\",\r\n        \"name\": \"Vietnam\"\r\n    },\r\n    {\r\n        \"code\": \"+681\",\r\n        \"name\": \"Wallis and Futuna\"\r\n    },\r\n    {\r\n        \"code\": \"+967\",\r\n        \"name\": \"Yemen\"\r\n    },\r\n    {\r\n        \"code\": \"+260\",\r\n        \"name\": \"Zambia\"\r\n    },\r\n    {\r\n        \"code\": \"+263\",\r\n        \"name\": \"Zimbabwe\"\r\n    }\r\n]","import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Menu } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport CustomScrollbars from 'util/CustomScrollbars';\r\nimport SidebarLogo from './SidebarLogo';\r\nimport {\r\n  // NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\r\n  NAV_STYLE_FIXED,\r\n  THEME_TYPE_LITE\r\n} from '../../constants/ThemeSetting';\r\nimport IntlMessages from '../../util/IntlMessages';\r\nimport { getRole } from '../../helpers';\r\nimport { MedicineBoxOutlined, UsergroupAddOutlined, FileSearchOutlined, BarChartOutlined, LogoutOutlined, LockOutlined } from '@ant-design/icons'\r\n// import UserProfile from './UserProfile';\r\n\r\nconst SidebarContent = (props) => {\r\n\r\n  let { navStyle, themeType, pathname } = useSelector(({ settings }) => settings);\r\n  const [isUserAdmin, setIsUserAdmin] = useState(false);\r\n\r\n  // const getNoHeaderClass = (navStyle) => {\r\n  //   if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\r\n  //     return 'gx-no-header-notifications';\r\n  //   }\r\n  //   return '';\r\n  // };\r\n  const getNavStyleSubMenuClass = (navStyle) => {\r\n    if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\r\n      return 'gx-no-header-submenu-popup';\r\n    }\r\n    return '';\r\n  };\r\n  const selectedKeys = pathname.substr(1);\r\n  const defaultOpenKeys = selectedKeys.split('/')[(selectedKeys.split('/').length - 1)];\r\n\r\n  const getMenuItems = () => {\r\n    return {\r\n      'menuItems': isUserAdmin ?\r\n        [\r\n          {\r\n            key: 'dashboard',\r\n            link: '/admin/dashboard',\r\n            icon: (<i className='icon icon-dasbhoard' />),\r\n            name_id: 'sidebar.dashboard'\r\n          },\r\n          {\r\n            key: 'partner-list',\r\n            link: '/admin/partner-list',\r\n            icon: (<UsergroupAddOutlined className='font-20' />),\r\n            name_id: 'sidebar.partnerList'\r\n          },\r\n          {\r\n            key: 'product-list',\r\n            link: '/admin/product-list',\r\n            icon: (<MedicineBoxOutlined className='font-20' />),\r\n            name_id: 'sidebar.productList'\r\n          },\r\n        ] :\r\n        [\r\n          {\r\n            key: 'dashboard',\r\n            link: '/partner/dashboard',\r\n            icon: (<i className='icon icon-dasbhoard' />),\r\n            name_id: 'sidebar.dashboard'\r\n          }\r\n        ],\r\n      'submenuItems': isUserAdmin ?\r\n        [\r\n          {\r\n            key: 'development-timeline',\r\n            link: '/admin/report/development-timeline',\r\n            icon: (<i className='icon icon-timeline font-16' />),\r\n            name_id: 'sidebar.pdt'\r\n          },\r\n          {\r\n            key: 'filing-plans',\r\n            link: '/admin/report/filing-plans',\r\n            icon: (<FileSearchOutlined className='font-16' />),\r\n            name_id: 'sidebar.filingPlans'\r\n          },\r\n          {\r\n            key: 'sales-report',\r\n            link: '/admin/report/sales-report',\r\n            icon: (<BarChartOutlined className='font-16' />),\r\n            name_id: 'sidebar.sales-report'\r\n          }\r\n        ] :\r\n        [\r\n          {\r\n            key: 'development-timeline',\r\n            link: '/partner/development-timeline',\r\n            icon: (<i className='icon icon-timeline font-16 mr-10' />),\r\n            name_id: 'sidebar.pdt'\r\n          },\r\n          {\r\n            key: 'filing-plans',\r\n            link: '/partner/filing-plans',\r\n            icon: (<FileSearchOutlined className='font-16 mr-10' />),\r\n            name_id: 'sidebar.filingPlans'\r\n          },\r\n          {\r\n            key: 'sales-report',\r\n            link: '/partner/sales-report',\r\n            icon: (<BarChartOutlined className='font-16 mr-10' />),\r\n            name_id: 'sidebar.sales-report'\r\n          }\r\n        ]\r\n    }\r\n  }\r\n\r\n  const getProfileMenuItems = () => {\r\n\r\n    let menuItems = [\r\n      {\r\n        key: 'profile',\r\n        link: isUserAdmin ? '/admin/profile' : '/partner/profile',\r\n        icon: (<i className='icon icon-profile font-16 mr-10' />),\r\n        name_id: 'sidebar.profile'\r\n      },\r\n      {\r\n        key: 'settings',\r\n        link: '/admin/settings',\r\n        icon: (<i className='icon icon-setting font-16 mr-10' />),\r\n        name_id: 'sidebar.settings'\r\n      },\r\n      {\r\n        key: 'change-password',\r\n        link: '/change-password',\r\n        icon: (<LockOutlined className='font-16 mr-10' />),\r\n        name_id: 'sidebar.change-password'\r\n      },\r\n    ]\r\n    if (!isUserAdmin) {\r\n      menuItems.splice(1, 1)\r\n    }\r\n\r\n    return menuItems\r\n  }\r\n\r\n  const displayMenuItems = (itemsArray) => {\r\n    return itemsArray.map(\r\n      value => (\r\n        <Menu.Item key={value.key}>\r\n          <Link to={value.link}>\r\n            {value.icon}\r\n            <span><IntlMessages id={value.name_id} /></span>\r\n          </Link>\r\n        </Menu.Item>\r\n      )\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    setIsUserAdmin(() => {\r\n      return getRole() === 'ADMIN'\r\n    })\r\n  }, [])\r\n\r\n  return (<>\r\n    <SidebarLogo />\r\n    <div className='gx-sidebar-content'>\r\n      {/* <div className={`gx-sidebar-notifications ${getNoHeaderClass(navStyle)}`}>\r\n        <UserProfile history={props.history} />\r\n        <AppsNavigation/>\r\n      </div> */}\r\n      <CustomScrollbars className='gx-layout-sider-scrollbar gx-mt-2'>\r\n        <Menu\r\n          className={navStyle === NAV_STYLE_FIXED ? 'pad-left-25 gx-display-flex-column sidebar-width-250' : ''}\r\n          defaultOpenKeys={[defaultOpenKeys]}\r\n          // selectedKeys={[selectedKeys]}\r\n          selectedKeys={[defaultOpenKeys]}\r\n          theme={themeType === THEME_TYPE_LITE ? 'lite' : 'dark'}\r\n          mode='inline'>\r\n          {displayMenuItems(getMenuItems().menuItems)}\r\n          <Menu.SubMenu className='mpp-submenu' key='Reports' popupClassName={getNavStyleSubMenuClass(navStyle)}\r\n            title={<span> <i className='icon icon-folder-o' />\r\n              <span><IntlMessages id='sidebar.reports' /></span></span>}>\r\n            {displayMenuItems(getMenuItems().submenuItems)}\r\n          </Menu.SubMenu>\r\n          <Menu.SubMenu className='mpp-submenu' key='User Profile' popupClassName={getNavStyleSubMenuClass(navStyle)}\r\n            title={<span> <i className='icon icon-wall' />\r\n              <span>User Profile</span></span>}>\r\n            {displayMenuItems(getProfileMenuItems())}\r\n          </Menu.SubMenu>\r\n          <Menu.Item key='logout'>\r\n            <Link to={'/logout'}>\r\n              <LogoutOutlined className='font-20' />\r\n              <span>Logout</span>\r\n            </Link>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </CustomScrollbars>\r\n    </div>\r\n  </>\r\n  );\r\n};\r\n\r\nSidebarContent.propTypes = {};\r\n\r\nexport default SidebarContent;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Drawer, Layout } from 'antd';\r\n\r\nimport SidebarContent from './SidebarContent';\r\nimport { toggleCollapsedSideNav, updateWindowWidth } from 'appRedux/actions/Setting';\r\nimport {\r\n  NAV_STYLE_DRAWER,\r\n  NAV_STYLE_FIXED,\r\n  NAV_STYLE_MINI_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\r\n  TAB_SIZE,\r\n  THEME_TYPE_LITE\r\n} from '../../constants/ThemeSetting';\r\nimport './sidebar.css'\r\n\r\nconst { Sider } = Layout;\r\n\r\nconst Sidebar = (props) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { themeType, navCollapsed, width, navStyle } = useSelector(({ settings }) => settings);\r\n\r\n\r\n  const onToggleCollapsedNav = () => {\r\n    dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('resize', () => {\r\n      dispatch(updateWindowWidth(window.innerWidth));\r\n    })\r\n  }, [dispatch]);\r\n\r\n\r\n  let drawerStyle = 'gx-collapsed-sidebar';\r\n\r\n  if (navStyle === NAV_STYLE_FIXED) {\r\n    drawerStyle = '';\r\n  } else if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\r\n    drawerStyle = 'gx-mini-sidebar gx-mini-custom-sidebar';\r\n  } else if (navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\r\n    drawerStyle = 'gx-custom-sidebar'\r\n  } else if (navStyle === NAV_STYLE_MINI_SIDEBAR) {\r\n    drawerStyle = 'gx-mini-sidebar';\r\n  } else if (navStyle === NAV_STYLE_DRAWER) {\r\n    drawerStyle = 'gx-collapsed-sidebar'\r\n  }\r\n  if ((navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR\r\n    || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) && width < TAB_SIZE) {\r\n    drawerStyle = 'gx-collapsed-sidebar'\r\n  }\r\n  return (\r\n    <Sider\r\n      className={`gx-app-sidebar ${drawerStyle} ${themeType !== THEME_TYPE_LITE ? 'gx-layout-sider-dark' : null}`}\r\n      trigger={null}\r\n      collapsed={(width < TAB_SIZE ? false : navStyle === NAV_STYLE_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR)}\r\n      theme={themeType === THEME_TYPE_LITE ? 'lite' : 'dark'}\r\n      collapsible>\r\n      {\r\n        navStyle === NAV_STYLE_DRAWER || width < TAB_SIZE ?\r\n          <Drawer\r\n            className={`gx-drawer-sidebar ${themeType !== THEME_TYPE_LITE ? 'gx-drawer-sidebar-dark' : null}`}\r\n            placement='left'\r\n            closable={false}\r\n            onClose={onToggleCollapsedNav}\r\n            visible={navCollapsed}>\r\n            <SidebarContent />\r\n          </Drawer> :\r\n          <SidebarContent history={props.history} />\r\n      }\r\n    </Sider>)\r\n};\r\nexport default Sidebar;\r\n","const languageData = [\r\n  {\r\n    languageId: 'english',\r\n    locale: 'en',\r\n    name: 'English',\r\n    icon: 'us'\r\n  },\r\n  {\r\n    languageId: 'chinese',\r\n    locale: 'zh',\r\n    name: 'Chinese',\r\n    icon: 'cn'\r\n  },\r\n  {\r\n    languageId: 'spanish',\r\n    locale: 'es',\r\n    name: 'Spanish',\r\n    icon: 'es'\r\n  },\r\n  {\r\n    languageId: 'french',\r\n    locale: 'fr',\r\n    name: 'French',\r\n    icon: 'fr'\r\n  },\r\n  {\r\n    languageId: 'italian',\r\n    locale: 'it',\r\n    name: 'Italian',\r\n    icon: 'it'\r\n  },\r\n  {\r\n    languageId: 'saudi-arabia',\r\n    locale: 'ar',\r\n    name: 'Arabic',\r\n    icon: 'sa'\r\n  }\r\n\r\n];\r\nexport default languageData;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({styleName, placeholder, onChange, value}) => {\r\n\r\n  return (\r\n    <div className={`gx-search-bar ${styleName}`}>\r\n      <div className=\"gx-form-group\">\r\n        <input className=\"ant-input\" type=\"search\" placeholder={placeholder} onChange={onChange}\r\n               value={value}/>\r\n        <span className=\"gx-search-icon gx-pointer\"><i className=\"icon icon-search\"/></span>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\nexport default SearchBox;\r\n\r\nSearchBox.defaultProps = {\r\n  styleName: \"\",\r\n  value: \"\",\r\n};\r\n","import React from \"react\";\r\nimport {Avatar, Popover} from \"antd\";\r\n\r\nconst UserInfo = () => {\r\n\r\n  const userMenuOptions = (\r\n    <ul className=\"gx-user-popover\">\r\n      <li>My Account</li>\r\n      <li>Connections</li>\r\n    </ul>\r\n  );\r\n\r\n  return (\r\n    <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={userMenuOptions}\r\n             trigger=\"click\">\r\n      <Avatar src='https://via.placeholder.com/150x150'\r\n              className=\"gx-avatar gx-pointer\" alt=\"\"/>\r\n    </Popover>\r\n  )\r\n};\r\n\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\nimport {Avatar} from \"antd\";\r\n\r\n\r\nconst NotificationItem = ({notification}) => {\r\n  const {icon, image, title, time} = notification;\r\n  return (\r\n\r\n    <li className=\"gx-media\">\r\n      <Avatar className=\"gx-size-40 gx-mr-3\"\r\n              alt={image}\r\n              src={image}/>\r\n      <div className=\"gx-media-body gx-align-self-center\">\r\n        <p className=\"gx-fs-sm gx-mb-0\">{title}</p>\r\n        <i className={`icon icon-${icon} gx-pr-2`}/> <span className=\"gx-meta-date\"><small>{time}</small></span>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NotificationItem;\r\n","export const notifications = [\r\n\r\n  {\r\n    image: 'https://via.placeholder.com/150x150',\r\n    title: \"Stella Johnson has recently posted an album\",\r\n    time: \"4:10 PM\",\r\n    icon: \"thumb-up gx-text-blue\",\r\n  }, {\r\n    image: 'https://via.placeholder.com/150x150',\r\n    title: \"Alex Brown has shared Martin Guptil's post\",\r\n    time: \"5:18 PM\",\r\n    icon: \"chat gx-text-grey\",\r\n  }, {\r\n    image: 'https://via.placeholder.com/150x150',\r\n    title: \"Domnic Brown has sent you a group invitation for Global Health\",\r\n    time: \"5:36 PM\",\r\n    icon: \"birthday text-info\",\r\n  }, {\r\n    image: 'https://via.placeholder.com/150x150',\r\n    title: \"John Smith has birthday today\",\r\n    time: \"5:54 PM\",\r\n    icon: \"birthday gx-text-warning\",\r\n  }, {\r\n    image: 'https://via.placeholder.com/150x150',\r\n    title: \"Chris has updated his profile picture\",\r\n    time: \"5:25 PM\",\r\n    icon: \"profile gx-text-grey\",\r\n  }\r\n];\r\n","const Auxiliary = (props) => props.children;\r\n\r\nexport default Auxiliary;\r\n","import React from \"react\";\r\nimport NotificationItem from \"./NotificationItem\";\r\nimport {notifications} from \"./data\";\r\nimport CustomScrollbars from \"util/CustomScrollbars\";\r\nimport Auxiliary from \"util/Auxiliary\";\r\n\r\nconst AppNotification = () => {\r\n  return (\r\n    <Auxiliary>\r\n      <div className=\"gx-popover-header\">\r\n        <h3 className=\"gx-mb-0\">Notifications</h3>\r\n        <i className=\"gx-icon-btn icon icon-charvlet-down\"/>\r\n      </div>\r\n      <CustomScrollbars className=\"gx-popover-scroll\">\r\n        <ul className=\"gx-sub-popover\">\r\n          {notifications.map((notification, index) => <NotificationItem key={index}\r\n                                                                        notification={notification}/>)\r\n          }\r\n        </ul>\r\n      </CustomScrollbars>\r\n    </Auxiliary>\r\n  )\r\n};\r\n\r\nexport default AppNotification;\r\n\r\n","import React from \"react\";\r\nimport {Avatar} from \"antd\";\r\n\r\nconst NotificationItem = ({notification}) => {\r\n  const {image, badge, name, time, message} = notification;\r\n  return (\r\n    <li className=\"gx-media\">\r\n      <div className=\"gx-user-thumb gx-mr-3\">\r\n        <Avatar className=\"gx-size-40\"\r\n                alt={image}\r\n                src={image}/>\r\n        {badge > 0 ? <span className=\"gx-badge gx-badge-danger gx-text-white gx-rounded-circle\">{badge}</span> : null}\r\n      </div>\r\n      <div className=\"gx-media-body\">\r\n        <div className=\"gx-flex-row gx-justify-content-between gx-align-items-center\">\r\n          <h5 className=\"gx-text-capitalize gx-user-name gx-mb-0\"><span className=\"gx-link\">{name}</span></h5>\r\n          <span className=\"gx-meta-date\"><small>{time}</small></span>\r\n        </div>\r\n        <p className=\"gx-fs-sm\">{message}</p>\r\n        <span className=\"gx-btn gx-btn-sm gx-top2 gx-text-muted\"><i className=\"icon icon-reply gx-pr-2\"/>Reply</span>\r\n        <span className=\"gx-btn gx-btn-sm gx-top2 gx-text-muted\"><i\r\n          className=\"icon icon-custom-view gx-pr-2\"/>Read</span>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NotificationItem;\r\n","export const notifications = [\r\n  {\r\n    id: 1,\r\n    image: 'https://via.placeholder.com/150x150',\r\n    name: \"Domnic Brown\",\r\n    time: \"6:19 PM\",\r\n    message: \"There are many variations of passages of...\",\r\n    badge: 5\r\n  },\r\n  {\r\n    id: 2,\r\n    image: 'https://via.placeholder.com/150x150',\r\n    name: \"John Smith\",\r\n    time: \"4:18 PM\",\r\n    message: \"Lorem Ipsum is simply dummy text of the...\",\r\n  },\r\n  {\r\n    id: 3,\r\n    image: 'https://via.placeholder.com/150x150',\r\n    name: \"John Smith\",\r\n    time: \"7:10 PM\",\r\n    message: \"The point of using Lorem Ipsum is that it has a...\",\r\n    badge: 8\r\n  },\r\n  {\r\n    id: 4,\r\n    image: 'https://via.placeholder.com/150x150',\r\n    name: \"alex dolgove\",\r\n    time: \"5:10 PM\",\r\n    message: \"It is a long established fact that a reader will...\",\r\n  },\r\n  {\r\n    id: 5,\r\n    image: 'https://via.placeholder.com/150x150',\r\n    name: \"Domnic Harris\",\r\n    time: \"7:35 PM\",\r\n    message: \"All the Lorem Ipsum generators on the...\",\r\n    badge: 3\r\n  }\r\n];\r\n","import React from \"react\";\r\nimport NotificationItem from \"./NotificationItem\";\r\nimport {notifications} from \"./data\";\r\nimport CustomScrollbars from 'util/CustomScrollbars'\r\nimport Auxiliary from \"util/Auxiliary\";\r\n\r\nconst MailNotification = () => {\r\n  return (\r\n    <Auxiliary>\r\n      <div className=\"gx-popover-header\">\r\n        <h3 className=\"gx-mb-0\">Messages</h3>\r\n        <i className=\"gx-icon-btn icon icon-charvlet-down\"/>\r\n      </div>\r\n      <CustomScrollbars className=\"gx-popover-scroll\">\r\n        <ul className=\"gx-sub-popover\">\r\n          {notifications.map((notification, index) => <NotificationItem key={index}\r\n                                                                        notification={notification}/>)}\r\n        </ul>\r\n      </CustomScrollbars>\r\n    </Auxiliary>\r\n  )\r\n};\r\n\r\nexport default MailNotification;\r\n\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Menu} from \"antd\";\r\nimport {Link} from \"react-router-dom\";\r\nimport IntlMessages from \"../../util/IntlMessages\";\r\nimport {\r\n  NAV_STYLE_ABOVE_HEADER,\r\n  NAV_STYLE_BELOW_HEADER,\r\n  NAV_STYLE_DEFAULT_HORIZONTAL,\r\n  NAV_STYLE_INSIDE_HEADER_HORIZONTAL\r\n} from \"../../constants/ThemeSetting\";\r\n\r\n\r\nconst SubMenu = Menu.SubMenu;\r\nconst MenuItemGroup = Menu.ItemGroup;\r\n\r\nconst HorizontalNav = () => {\r\n\r\n  const navStyle = useSelector(({settings}) => settings.navStyle);\r\n  const pathname = useSelector(({settings}) => settings.pathname);\r\n\r\n  const getNavStyleSubMenuClass = (navStyle) => {\r\n    switch (navStyle) {\r\n      case NAV_STYLE_DEFAULT_HORIZONTAL:\r\n        return \"gx-menu-horizontal gx-submenu-popup-curve\";\r\n      case NAV_STYLE_INSIDE_HEADER_HORIZONTAL:\r\n        return \"gx-menu-horizontal gx-submenu-popup-curve gx-inside-submenu-popup-curve\";\r\n      case NAV_STYLE_BELOW_HEADER:\r\n        return \"gx-menu-horizontal gx-submenu-popup-curve gx-below-submenu-popup-curve\";\r\n      case NAV_STYLE_ABOVE_HEADER:\r\n        return \"gx-menu-horizontal gx-submenu-popup-curve gx-above-submenu-popup-curve\";\r\n      default:\r\n        return \"gx-menu-horizontal\";\r\n\r\n    }\r\n  };\r\n\r\n  const selectedKeys = pathname.substr(1);\r\n  const defaultOpenKeys = selectedKeys.split('/')[1];\r\n  return (\r\n\r\n    <Menu\r\n      defaultOpenKeys={[defaultOpenKeys]}\r\n      selectedKeys={[selectedKeys]}\r\n      mode=\"horizontal\">\r\n\r\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"main\"\r\n               title={<IntlMessages id=\"sidebar.main\"/>}>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"dashboard\"\r\n                 title={<span> <i className=\"icon icon-dasbhoard\"/>\r\n                         <IntlMessages id=\"sidebar.dashboard\"/></span>}>\r\n          <Menu.Item key=\"main/dashboard/crypto\">\r\n            <Link to=\"/main/dashboard/crypto\">\r\n              <i className=\"icon icon-crypto\"/>\r\n              <IntlMessages id=\"sidebar.dashboard.crypto\"/>\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"main/dashboard/crm\">\r\n            <Link to=\"/main/dashboard/crm\">\r\n              <i className=\"icon icon-crm\"/>\r\n              <IntlMessages id=\"sidebar.dashboard.crm\"/>\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"main/dashboard/listing\">\r\n            <Link to=\"/main/dashboard/listing\">\r\n              <i className=\"icon icon-listing-dbrd\"/>\r\n              <IntlMessages id=\"sidebar.dashboard.listing\"/>\r\n            </Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <Menu.Item key=\"main/widgets\">\r\n          <Link to=\"/main/widgets\"><i className=\"icon icon-widgets\"/>\r\n            <IntlMessages id=\"sidebar.widgets\"/></Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"main/metrics\">\r\n          <Link to=\"/main/metrics\"><i className=\"icon icon-apps\"/>\r\n            <IntlMessages id=\"sidebar.metrics\"/></Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"main/algolia\">\r\n          <Link to=\"/main/algolia\"><i className=\"icon icon-shopping-cart \"/>\r\n            <IntlMessages id=\"sidebar.algolia\"/></Link>\r\n        </Menu.Item>\r\n\r\n      </SubMenu>\r\n\r\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"in-built-apps\"\r\n               title={<IntlMessages id=\"sidebar.inBuiltApp\"/>}>\r\n\r\n        <Menu.Item key=\"in-built-apps/mail\">\r\n          <Link to=\"/in-built-apps/mail\"><i className=\"icon icon-email\"/><IntlMessages\r\n            id=\"sidebar.mailApp\"/></Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"in-built-apps/todo\">\r\n          <Link to=\"/in-built-apps/todo\"><i\r\n            className=\"icon icon-check-square-o\"/><IntlMessages\r\n            id=\"sidebar.todoApp\"/></Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"in-built-apps/contacts\">\r\n          <Link to=\"/in-built-apps/contacts\"><i className=\"icon icon-contacts\"/><IntlMessages\r\n            id=\"sidebar.contactsApp\"/></Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"in-built-apps/chat\">\r\n          <Link to=\"/in-built-apps/chat\"><i\r\n            className=\"icon icon-chat-bubble -flex-column-reverse\"/><IntlMessages\r\n            id=\"sidebar.chatApp\"/></Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"social-apps/profile\">\r\n          <Link to=\"/social-apps/profile\">\r\n            <i className=\"icon icon-profile2\"/>\r\n            <IntlMessages id=\"sidebar.extensions.profile\"/>\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"social-apps/wall\">\r\n          <Link to=\"/social-apps/wall\">\r\n            <i className=\"icon icon-avatar -flex-column-reverse\"/>\r\n            <IntlMessages id=\"sidebar.wall\"/>\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"in-built-apps/notes\">\r\n          <Link to=\"/in-built-apps/notes\">\r\n            <i className=\"icon icon-copy\"/>\r\n            <IntlMessages id=\"sidebar.notes\"/>\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"in-built-apps/firebase-crud\">\r\n          <Link to=\"/in-built-apps/firebase-crud\">\r\n            <i className=\"icon icon-icon\"/>\r\n            <IntlMessages id=\"sidebar.crud\"/>\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n      </SubMenu>\r\n\r\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"components\"\r\n               title={<IntlMessages id=\"sidebar.components\"/>}>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"general\" title={\r\n          <span>\r\n                  <i className=\"icon icon-all-contacts\"/>\r\n                   <IntlMessages id=\"sidebar.components.general\"/>\r\n              </span>}>\r\n          <Menu.Item key=\"components/general/button\">\r\n            <Link to=\"/components/general/button\">\r\n              <IntlMessages id=\"sidebar.general.button\"/>\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/general/icon\">\r\n            <Link to=\"/components/general/icon\">\r\n              <IntlMessages id=\"sidebar.general.icon\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"navigation\" title={\r\n          <span>\r\n                  <i className=\"icon icon-navigation\"/>\r\n                  <IntlMessages id=\"sidebar.components.navigation\"/>\r\n              </span>}>\r\n          <Menu.Item key=\"components/navigation/affix\">\r\n            <Link to=\"/components/navigation/affix\">\r\n              <IntlMessages\r\n                id=\"sidebar.navigation.affix\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/navigation/breadcrumb\">\r\n            <Link to=\"/components/navigation/breadcrumb\">\r\n              <IntlMessages\r\n                id=\"sidebar.navigation.breadcrumb\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/navigation/dropdown\">\r\n            <Link to=\"/components/navigation/dropdown\">\r\n              <IntlMessages\r\n                id=\"sidebar.navigation.dropdown\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/navigation/menu\">\r\n            <Link to=\"/components/navigation/menu\">\r\n              <IntlMessages\r\n                id=\"sidebar.navigation.menu\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/navigation/pagination\">\r\n            <Link to=\"/components/navigation/pagination\">\r\n              <IntlMessages\r\n                id=\"sidebar.navigation.pagination\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/navigation/steps\">\r\n            <Link to=\"/components/navigation/steps\">\r\n              <IntlMessages\r\n                id=\"sidebar.navigation.steps\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"dataEntry\" title={\r\n          <span>\r\n                  <i className=\"icon icon-data-entry\"/>\r\n                  <IntlMessages id=\"sidebar.components.dataEntry\"/>\r\n              </span>}>\r\n          <Menu.Item key=\"components/dataEntry/autoComplete\">\r\n            <Link to=\"/components/dataEntry/autoComplete\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.autoComplete\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/checkbox\">\r\n            <Link to=\"/components/dataEntry/checkbox\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.checkbox\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/cascader\">\r\n            <Link to=\"/components/dataEntry/cascader\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.cascader\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/datePicker\">\r\n            <Link to=\"/components/dataEntry/datePicker\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.datePicker\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/form\">\r\n            <Link to=\"/components/dataEntry/form\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.form\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/inputNumber\">\r\n            <Link to=\"/components/dataEntry/inputNumber\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.inputNumber\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/input\">\r\n            <Link to=\"/components/dataEntry/input\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.input\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/mention\">\r\n            <Link to=\"/components/dataEntry/mention\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.mention\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/rate\">\r\n            <Link to=\"/components/dataEntry/rate\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.rate\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/radio\">\r\n            <Link to=\"/components/dataEntry/radio\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.radio\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/switch\">\r\n            <Link to=\"/components/dataEntry/switch\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.switch\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/slider\">\r\n            <Link to=\"/components/dataEntry/slider\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.slider\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/select\">\r\n            <Link to=\"/components/dataEntry/select\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.select\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/treeSelect\">\r\n            <Link to=\"/components/dataEntry/treeSelect\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.treeSelect\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/transfer\">\r\n            <Link to=\"/components/dataEntry/transfer\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.transfer\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/timePicker\">\r\n            <Link to=\"/components/dataEntry/timePicker\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.timePicker\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataEntry/upload\">\r\n            <Link to=\"/components/dataEntry/upload\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataEntry.upload\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"dataDisplay\" title={\r\n          <span>\r\n                  <i className=\"icon icon-data-display\"/>\r\n\r\n                    <IntlMessages id=\"sidebar.components.dataDisplay\"/>\r\n\r\n              </span>}>\r\n          <Menu.Item key=\"components/dataDisplay/avatar\">\r\n            <Link to=\"/components/dataDisplay/avatar\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.avatar\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/badge\">\r\n            <Link to=\"/components/dataDisplay/badge\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.badge\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/collapse\">\r\n            <Link to=\"/components/dataDisplay/collapse\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.collapse\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/carousel\">\r\n            <Link to=\"/components/dataDisplay/carousel\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.carousel\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/card\">\r\n            <Link to=\"/components/dataDisplay/card\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.card\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/calendar\">\r\n            <Link to=\"/components/dataDisplay/calendar\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.calender\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/list\">\r\n            <Link to=\"/components/dataDisplay/list\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.list\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/popover\">\r\n            <Link to=\"/components/dataDisplay/popover\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.popover\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/tree\">\r\n            <Link to=\"/components/dataDisplay/tree\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.tree\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/tooltip\">\r\n            <Link to=\"/components/dataDisplay/tooltip\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.toolTips\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/timeline\">\r\n            <Link to=\"/components/dataDisplay/timeline\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.timeLine\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/tag\">\r\n            <Link to=\"/components/dataDisplay/tag\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.tag\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/dataDisplay/tabs\">\r\n            <Link to=\"/components/dataDisplay/tabs\">\r\n              <IntlMessages\r\n                id=\"sidebar.dataDisplay.tabs\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"feedBack\" title={\r\n          <span>\r\n                  <i className=\"icon icon-feedback\"/>\r\n                    <IntlMessages id=\"sidebar.components.feedBack\"/>\r\n\r\n              </span>}>\r\n          <Menu.Item key=\"components/feedBack/alert\">\r\n            <Link to=\"/components/feedBack/alert\">\r\n              <IntlMessages\r\n                id=\"sidebar.feedBack.alert\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/feedBack/modal\">\r\n            <Link to=\"/components/feedBack/modal\">\r\n              <IntlMessages\r\n                id=\"sidebar.feedBack.modal\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/feedBack/message\">\r\n            <Link to=\"/components/feedBack/message\">\r\n              <IntlMessages\r\n                id=\"sidebar.feedBack.message\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/feedBack/notification\">\r\n            <Link to=\"/components/feedBack/notification\">\r\n              <IntlMessages\r\n                id=\"sidebar.feedBack.notification\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/feedBack/progress\">\r\n            <Link to=\"/components/feedBack/progress\">\r\n              <IntlMessages\r\n                id=\"sidebar.feedBack.progress\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/feedBack/popconfirm\">\r\n            <Link to=\"/components/feedBack/popconfirm\">\r\n              <IntlMessages id=\"sidebar.feedBack.popConfirm\"/>\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/feedBack/spin\">\r\n            <Link to=\"/components/feedBack/spin\">\r\n              <IntlMessages\r\n                id=\"sidebar.feedBack.spin\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"others\" title={\r\n          <span>\r\n                  <i className=\"icon icon-inbox\"/>\r\n                    <IntlMessages id=\"sidebar.components.other\"/>\r\n\r\n              </span>}>\r\n          <Menu.Item key=\"components/others/anchor\">\r\n            <Link to=\"/components/others/anchor\">\r\n              <IntlMessages\r\n                id=\"sidebar.other.anchor\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/others/backtop\">\r\n            <Link to=\"/components/others/backtop\">\r\n              <IntlMessages\r\n                id=\"sidebar.other.backTop\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/others/divider\">\r\n            <Link to=\"/components/others/divider\">\r\n              <IntlMessages\r\n                id=\"sidebar.other.divider\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"table\"\r\n                 title={\r\n                   <span>\r\n                           <i className=\"icon icon-table\"/>\r\n\r\n                             <IntlMessages id=\"sidebar.dataDisplay.table\"/>\r\n\r\n                         </span>}>\r\n          <Menu.Item key=\"components/table/basic\">\r\n            <Link to=\"/components/table/basic\">\r\n              <IntlMessages\r\n                id=\"sidebar.view.basicTable\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"components/table/data\">\r\n            <Link to=\"/components/table/data\">\r\n              <IntlMessages\r\n                id=\"sidebar.view.dataTable\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n      </SubMenu>\r\n\r\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"extraComponents\"\r\n               title={<IntlMessages id=\"sidebar.extraComponents\"/>}>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"editor\"\r\n                 title={<span>\r\n                         <i className=\"icon icon-editor\"/>\r\n                        <IntlMessages id=\"sidebar.editors\"/>\r\n                       </span>}>\r\n          <Menu.Item key=\"extra-components/editor/ck\">\r\n            <Link to=\"/extra-components/editor/ck\">\r\n              <IntlMessages\r\n                id=\"sidebar.editors.CKEditor\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"extra-components/editor/wysiswyg\">\r\n            <Link to=\"/extra-components/editor/wysiswyg\">\r\n              <IntlMessages\r\n                id=\"sidebar.editors.WYSISWYGEditor\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <Menu.Item key=\"extra-components/color-picker\">\r\n          <Link to=\"/extra-components/color-picker\">\r\n            <i className=\"icon icon-picker\"/>\r\n\r\n            <IntlMessages id=\"sidebar.pickers.colorPickers\"/>\r\n\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"extra-components/dnd\">\r\n          <Link to=\"/extra-components/dnd\">\r\n            <i className=\"icon icon-drag-and-drop\"/>\r\n\r\n            <IntlMessages id=\"sidebar.extensions.dragNDrop\"/>\r\n\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"extra-components/sweet-alert\">\r\n          <Link to=\"/extra-components/sweet-alert\">\r\n            <i className=\"icon icon-sweet-alert\"/>\r\n            <IntlMessages id=\"sidebar.extensions.sweetAlert\"/>\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"extra-components/notification\">\r\n          <Link to=\"/extra-components/notification\"><i className=\"icon icon-notification\"/>\r\n            <IntlMessages\r\n              id=\"sidebar.extensions.notification\"/></Link>\r\n        </Menu.Item>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"time-line\"\r\n                 title={<span><i className=\"icon icon-timeline\"/><IntlMessages\r\n                   id=\"sidebar.timeLine\"/></span>}>\r\n          <Menu.Item key=\"extra-components/time-line/default\">\r\n            <Link to=\"/extra-components/time-line/default\">\r\n              <IntlMessages\r\n                id=\"sidebar.timeLine.default\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"extra-components/time-line/default-with-icon\">\r\n            <Link to=\"/extra-components/time-line/default-with-icon\">\r\n              <IntlMessages\r\n                id=\"sidebar.timeLine.defaultwithIcons\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"extra-components/time-line/left-align\">\r\n            <Link to=\"/extra-components/time-line/left-align\">\r\n              <IntlMessages\r\n                id=\"sidebar.timeLine.leftAligned\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <Menu.Item key=\"extra-components/shuffle\">\r\n          <Link to=\"/extra-components/shuffle\"><i className=\"icon icon-shuffle\"/>\r\n            <IntlMessages\r\n              id=\"sidebar.extensions.shuffle\"/></Link>\r\n        </Menu.Item>\r\n\r\n      </SubMenu>\r\n\r\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"extensions\"\r\n               title={<IntlMessages id=\"sidebar.extensions\"/>}>\r\n\r\n        <MenuItemGroup key=\"map\"\r\n                       title={<IntlMessages id=\"sidebar.map\"/>}>\r\n\r\n          <SubMenu className=\"gx-menu-horizontal\" key=\"google\"\r\n                   title={\r\n                     <span>\r\n                           <i className=\"icon icon-map-google\"/>\r\n                           <IntlMessages id=\"sidebar.google.map\"/></span>}>\r\n\r\n            <Menu.Item key=\"extensions/map/google/simple\">\r\n              <Link to=\"/extensions/map/google/simple\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.simple\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/styled\">\r\n              <Link to=\"/extensions/map/google/styled\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.styled\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/geo-location\">\r\n              <Link to=\"/extensions/map/google/geo-location\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.geoLocation\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/directions\">\r\n              <Link to=\"/extensions/map/google/directions\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.mapDirection\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/overlay\">\r\n              <Link to=\"/extensions/map/google/overlay\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.overlay\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/kml\">\r\n              <Link to=\"/extensions/map/google/kml\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.kmLayer\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/popup-info\">\r\n              <Link to=\"/extensions/map/google/popup-info\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.popupInfo\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/traffic\">\r\n              <Link to=\"/extensions/map/google/traffic\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.trafficLayer\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/street-view\">\r\n              <Link to=\"/extensions/map/google/street-view\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.streetView\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/event\">\r\n              <Link to=\"/extensions/map/google/event\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.eventListener\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/drawing\">\r\n              <Link to=\"/extensions/map/google/drawing\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.mapDrawing\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/google/clustering\">\r\n              <Link to=\"/extensions/map/google/clustering\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.mapClustering\"/></Link>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n\r\n          <SubMenu className=\"gx-menu-horizontal\" key=\"ammap\"\r\n                   title={\r\n                     <span><i className=\"icon icon-amchart\"/>\r\n                           <IntlMessages id=\"sidebar.ammap\"/></span>}>\r\n\r\n            <Menu.Item key=\"extensions/map/ammap/animations-lines\">\r\n              <Link to=\"/extensions/map/ammap/animations-lines\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.animations.lines\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/curved-lines\">\r\n              <Link to=\"/extensions/map/ammap/curved-lines\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.curved.lines\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/zooming-countries\">\r\n              <Link to=\"/extensions/map/ammap/zooming-countries\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.zooming.countries\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/patterns\">\r\n              <Link to=\"/extensions/map/ammap/patterns\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.patterns\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/capitals-map\">\r\n              <Link to=\"/extensions/map/ammap/capitals-map\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.capitals.map\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/map-markers\">\r\n              <Link to=\"/extensions/map/ammap/map-markers\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.markers\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/flight-routes\">\r\n              <Link to=\"/extensions/map/ammap/flight-routes\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.flight.routes\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/choropleth\">\r\n              <Link to=\"/extensions/map/ammap/choropleth\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.choropleth\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/grouped-countries\">\r\n              <Link to=\"/extensions/map/ammap/grouped-countries\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.grouped.countries\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/bubbles\">\r\n              <Link to=\"/extensions/map/ammap/bubbles\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.bubbles\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/drill-down\">\r\n              <Link to=\"/extensions/map/ammap/drill-down\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.drill.down\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/multiple-areas\">\r\n              <Link to=\"/extensions/map/ammap/multiple-areas\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.multiple.areas\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/map/ammap/weather\">\r\n              <Link to=\"/extensions/map/ammap/weather\">\r\n                <IntlMessages\r\n                  id=\"sidebar.map.weather\"/></Link>\r\n            </Menu.Item>\r\n\r\n          </SubMenu>\r\n\r\n        </MenuItemGroup>\r\n\r\n        <MenuItemGroup key=\"chart\"\r\n                       title={<span>\r\n                               <IntlMessages id=\"sidebar.chart\"/></span>}>\r\n          <SubMenu className=\"gx-menu-horizontal\" key=\"rechart\" title={\r\n            <span><i className=\"icon icon-chart-area-new\"/>\r\n                    <IntlMessages id=\"sidebar.components.rechart\"/>\r\n              </span>}>\r\n\r\n            <Menu.Item key=\"extensions/chart/recharts/area\">\r\n              <Link to=\"/extensions/chart/recharts/area\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.area\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/recharts/bar\">\r\n              <Link to=\"/extensions/chart/recharts/bar\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.bar\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/recharts/composed\">\r\n              <Link to=\"/extensions/chart/recharts/composed\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.composed\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/recharts/line\">\r\n              <Link to=\"/extensions/chart/recharts/line\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.line\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/recharts/pie\">\r\n              <Link to=\"/extensions/chart/recharts/pie\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.pie\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/recharts/radar\">\r\n              <Link to=\"/extensions/chart/recharts/radar\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.radar\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/recharts/radial\">\r\n              <Link to=\"/extensions/chart/recharts/radial\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.radial\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/recharts/scatter\">\r\n              <Link to=\"/extensions/chart/recharts/scatter\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.scatter\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/recharts/treemap\">\r\n              <Link to=\"/extensions/chart/recharts/treemap\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.tree\"/></Link>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n\r\n          <SubMenu className=\"gx-menu-horizontal\" key=\"amchart\" title={\r\n            <span><i className=\"icon icon-amchart\"/>\r\n                <IntlMessages id=\"sidebar.components.amchart\"/>\r\n              </span>}>\r\n            <Menu.Item key=\"extensions/chart/amchart/area\">\r\n              <Link to=\"/extensions/chart/amchart/area\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.area\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/amchart/bar\">\r\n              <Link to=\"/extensions/chart/amchart/bar\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.bar\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/amchart/line\">\r\n              <Link to=\"/extensions/chart/amchart/line\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.line\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/amchart/pie\">\r\n              <Link to=\"/extensions/chart/amchart/pie\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.pie\"/></Link>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"extensions/chart/amchart/composed\">\r\n              <Link to=\"/extensions/chart/amchart/composed\">\r\n                <IntlMessages\r\n                  id=\"sidebar.chart.composed\"/></Link>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n\r\n        </MenuItemGroup>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"calendar\"\r\n                 title={<span><i className=\"icon icon-calendar\"/><IntlMessages\r\n                   id=\"sidebar.calendar\"/></span>}>\r\n          <Menu.Item key=\"extensions/calendar/basic\">\r\n            <Link to=\"/extensions/calendar/basic\">\r\n              <IntlMessages\r\n                id=\"sidebar.calendar.basic\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"extensions/calendar/cultures\">\r\n            <Link to=\"/extensions/calendar/cultures\">\r\n              <IntlMessages\r\n                id=\"sidebar.calendar.cultures\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"extensions/calendar/popup\">\r\n            <Link to=\"/extensions/calendar/popup\">\r\n              <IntlMessages\r\n                id=\"sidebar.calendar.popup\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"extensions/calendar/rendering\">\r\n            <Link to=\"/extensions/calendar/rendering\">\r\n              <IntlMessages\r\n                id=\"sidebar.calendar.rendering\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"extensions/calendar/selectable\">\r\n            <Link to=\"/extensions/calendar/selectable\">\r\n              <IntlMessages\r\n                id=\"sidebar.calendar.selectable\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"extensions/calendar/timeslots\">\r\n            <Link to=\"/extensions/calendar/timeslots\">\r\n              <IntlMessages id=\"sidebar.calendar.timeslots\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n      </SubMenu>\r\n\r\n      <SubMenu className={getNavStyleSubMenuClass(navStyle)} key=\"custom-views\"\r\n               title={<IntlMessages id=\"sidebar.customViews\"/>}>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"user-auth\"\r\n                 title={<span><i className=\"icon icon-auth-screen\"/><IntlMessages\r\n                   id=\"app.userAuth\"/></span>}>\r\n          <Menu.Item key=\"custom-views/user-auth/sign-in\">\r\n            <Link to=\"/custom-views/user-auth/sign-in\">\r\n              <IntlMessages\r\n                id=\"app.userAuth.signIn\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"custom-views/user-auth/forgot-password\">\r\n            <Link to=\"/custom-views/user-auth/forgot-password\">\r\n              <IntlMessages\r\n                id=\"app.userAuth.forgotPassword\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"custom-views/user-auth/sign-up\">\r\n            <Link to=\"/custom-views/user-auth/sign-up\">\r\n              <IntlMessages\r\n                id=\"app.userAuth.signUp\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"custom-views/user-auth/lock-screen\">\r\n            <Link to=\"/custom-views/user-auth/lock-screen\">\r\n              <IntlMessages\r\n                id=\"app.userAuth.lockScreen\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"custom-views/user-auth/reset-password\">\r\n            <Link to=\"/custom-views/user-auth/reset-password\">\r\n              <IntlMessages\r\n                id=\"app.userAuth.resetPassword\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"list-type\"\r\n                 title={<span><i className=\"icon icon-all-contacts\"/><IntlMessages\r\n                   id=\"sidebar.listType\"/></span>}>\r\n          <Menu.Item key=\"custom-views/list-type/simple-list\">\r\n            <Link to=\"/custom-views/list-type/simple-list\">\r\n              <IntlMessages\r\n                id=\"sidebar.listType.plainListView\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"custom-views/list-type/strip-list\">\r\n            <Link to=\"/custom-views/list-type/strip-list\">\r\n              <IntlMessages\r\n                id=\"sidebar.listType.withDivider\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"custom-views/list-type/card-list\">\r\n            <Link to=\"/custom-views/list-type/card-list\">\r\n              <IntlMessages\r\n                id=\"sidebar.listType.cardListView\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"eCommerce\"\r\n                 title={<span><i className=\"icon icon-shopping-cart\"/><IntlMessages\r\n                   id=\"sidebar.eCommerce\"/></span>}>\r\n          <Menu.Item key=\"custom-views/eCommerce/product-grid\">\r\n            <Link to=\"/custom-views/eCommerce/product-grid\">\r\n              <IntlMessages\r\n                id=\"sidebar.eCommerce.productGrid\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"custom-views/eCommerce/product-list\">\r\n            <Link to=\"/custom-views/eCommerce/product-list\">\r\n              <IntlMessages\r\n                id=\"sidebar.eCommerce.productList\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"errorPages\"\r\n                 title={<span><i className=\"icon icon-error\"/><IntlMessages\r\n                   id=\"sidebar.extraPages\"/></span>}>\r\n\r\n          <Menu.Item key=\"custom-views/error-pages/error-404\">\r\n            <Link to=\"/custom-views/error-pages/error-404\">\r\n              <IntlMessages\r\n                id=\"sidebar.extraPages.404\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"custom-views/error-pages/error-500\">\r\n            <Link to=\"/custom-views/error-pages/error-500\">\r\n              <IntlMessages\r\n                id=\"sidebar.extraPages.500\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n        <SubMenu className=\"gx-menu-horizontal\" key=\"extra-elements\"\r\n                 title={<span><i className=\"icon icon-ellipse-h\"/><IntlMessages\r\n                   id=\"sidebar.listType.extras\"/></span>}>\r\n          <Menu.Item key=\"custom-views/extras/pricing-table\">\r\n            <Link to=\"/custom-views/extras/pricing-table\">\r\n              <IntlMessages\r\n                id=\"sidebar.extraElements.pricingTable\"/></Link>\r\n          </Menu.Item>\r\n\r\n          <Menu.Item key=\"custom-views/extras/callouts\">\r\n            <Link to=\"/custom-views/extras/callouts\">\r\n              <IntlMessages\r\n                id=\"sidebar.extraElements.callouts\"/></Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"custom-views/extras/testimonials\">\r\n            <Link to=\"/custom-views/extras/testimonials\">\r\n              <IntlMessages\r\n                id=\"sidebar.extraElements.testimonials\"/></Link>\r\n          </Menu.Item>\r\n        </SubMenu>\r\n\r\n      </SubMenu>\r\n\r\n    </Menu>\r\n\r\n  );\r\n};\r\n\r\nHorizontalNav.propTypes = {};\r\n\r\nexport default HorizontalNav;\r\n\r\n","import React, {useState} from \"react\";\r\nimport {Button, Dropdown, Layout, Menu, message, Popover, Select} from 'antd';\r\nimport Icon from '@ant-design/icons';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport CustomScrollbars from \"util/CustomScrollbars\";\r\nimport languageData from \"../languageData\";\r\nimport SearchBox from \"components/SearchBox\";\r\nimport UserInfo from \"components/UserInfo\";\r\nimport AppNotification from \"components/AppNotification\";\r\nimport MailNotification from \"components/MailNotification\";\r\nimport HorizontalNav from \"../HorizontalNav\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {switchLanguage, toggleCollapsedSideNav} from \"../../../appRedux/actions/Setting\";\r\nimport IntlMessages from \"../../../util/IntlMessages\";\r\n\r\nconst {Header} = Layout;\r\nconst Option = Select.Option;\r\nconst menu = (\r\n  <Menu onClick={handleMenuClick}>\r\n    <Menu.Item key=\"1\">Products</Menu.Item>\r\n    <Menu.Item key=\"2\">Apps</Menu.Item>\r\n    <Menu.Item key=\"3\">Blogs</Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nfunction handleMenuClick(e) {\r\n  message.info('Click on menu item.');\r\n}\r\n\r\nfunction handleChange(value) {\r\n  console.log(`selected ${value}`);\r\n}\r\n\r\nconst HorizontalDefault = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const locale = useSelector(({settings}) => settings.locale);\r\n  const navCollapsed = useSelector(({settings}) => settings.navCollapsed);\r\n\r\n  const languageMenu = () => (\r\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\r\n      <ul className=\"gx-sub-popover\">\r\n        {languageData.map(language =>\r\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\r\n            dispatch(switchLanguage(language))\r\n          }>\r\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`}/>\r\n            <span className=\"gx-language-text\">{language.name}</span>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </CustomScrollbars>);\r\n\r\n  const updateSearchChatUser = (evt) => {\r\n    setSearchText(evt.target.value)\r\n  };\r\n\r\n  return (\r\n    <div className=\"gx-header-horizontal\">\r\n      <div className=\"gx-header-horizontal-top\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-top-flex\">\r\n            <div className=\"gx-header-horizontal-top-left\">\r\n              <i className=\"icon icon-alert gx-mr-3\"/>\r\n              <p className=\"gx-mb-0 gx-text-truncate\"><IntlMessages id=\"app.announced\"/></p>\r\n            </div>\r\n            <ul className=\"gx-login-list\">\r\n              <li>Login</li>\r\n              <li>Signup</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Header\r\n        className=\"gx-header-horizontal-main\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-main-flex\">\r\n\r\n            <div className=\"gx-d-block gx-d-lg-none gx-linebar gx-mr-xs-3\">\r\n              <i className=\"gx-icon-btn icon icon-menu\"\r\n                 onClick={() => {\r\n                   console.log(\"navCollapsed\",!navCollapsed)\r\n                   dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n                 }}\r\n              />\r\n\r\n            </div>\r\n            <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer gx-w-logo\">\r\n              <img alt=\"\" src={require(\"assets/images/w-logo.png\")}/></Link>\r\n            <Link to=\"/\" className=\"gx-d-none gx-d-lg-block gx-pointer gx-mr-xs-5 gx-logo\">\r\n              <img alt=\"\" src={require(\"assets/images/logo-white.png\")}/></Link>\r\n            <div className=\"gx-header-search gx-d-none gx-d-lg-flex\">\r\n              <SearchBox styleName=\"gx-lt-icon-search-bar-lg\"\r\n                         placeholder=\"Search in app...\"\r\n                         onChange={updateSearchChatUser}\r\n                         value={searchText}/>\r\n\r\n              <Select defaultValue=\"lucy\" style={{width: 120}} onChange={handleChange}>\r\n                <Option value=\"jack\">Products</Option>\r\n                <Option value=\"lucy\">Apps</Option>\r\n                <Option value=\"Yiminghe\">Blogs</Option>\r\n              </Select>\r\n            </div>\r\n\r\n            <ul className=\"gx-header-notifications gx-ml-auto\">\r\n              <li className=\"gx-notify gx-notify-search gx-d-inline-block gx-d-lg-none\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={\r\n                  <div className=\"gx-d-flex\">\r\n                    <Dropdown overlay={menu}>\r\n                      <Button>\r\n                        Category <Icon type=\"down\"/>\r\n                      </Button>\r\n                    </Dropdown>\r\n                    <SearchBox styleName=\"gx-popover-search-bar\"\r\n                               placeholder=\"Search in app...\"\r\n                               onChange={updateSearchChatUser}\r\n                               value={searchText}/>\r\n                  </div>\r\n                } trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\"/></span>\r\n\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-notify\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification/>}\r\n                         trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\"/></span>\r\n                </Popover>\r\n              </li>\r\n\r\n              <li className=\"gx-msg\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                         content={<MailNotification/>} trigger=\"click\">\r\n                <span className=\"gx-pointer gx-status-pos gx-d-block\">\r\n                <i className=\"icon icon-chat-new\"/>\r\n                <span className=\"gx-status gx-status-rtl gx-small gx-orange\"/>\r\n                </span>\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-language\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                         content={languageMenu()} trigger=\"click\">\r\n              <span className=\"gx-pointer gx-flex-row gx-align-items-center\"><i\r\n                className={`flag flag-24 flag-${locale.icon}`}/>\r\n              </span>\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-user-nav\"><UserInfo/></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </Header>\r\n      <div className=\"gx-header-horizontal-nav gx-header-horizontal-nav-curve gx-d-none gx-d-lg-block\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-nav-flex\">\r\n            <HorizontalNav/>\r\n            <ul className=\"gx-header-notifications gx-ml-auto\">\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-menu-lines\"/></span></li>\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-setting\"/></span></li>\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-apps-new\"/></span></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HorizontalDefault;\r\n","import React, {useState} from \"react\";\r\nimport {Button, Dropdown, Layout, Menu, message, Popover, Select} from 'antd';\r\nimport Icon from '@ant-design/icons';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport CustomScrollbars from \"util/CustomScrollbars\";\r\nimport languageData from \"../languageData\";\r\nimport SearchBox from \"components/SearchBox\";\r\nimport UserInfo from \"components/UserInfo\";\r\nimport AppNotification from \"components/AppNotification\";\r\nimport MailNotification from \"components/MailNotification\";\r\nimport {Link} from \"react-router-dom\";\r\nimport HorizontalNav from \"../HorizontalNav\";\r\nimport {switchLanguage, toggleCollapsedSideNav} from \"../../../appRedux/actions/Setting\";\r\nimport IntlMessages from \"../../../util/IntlMessages\";\r\n\r\nconst {Header} = Layout;\r\n\r\nconst Option = Select.Option;\r\nconst menu = (\r\n  <Menu onClick={handleMenuClick}>\r\n    <Menu.Item key=\"1\">Products</Menu.Item>\r\n    <Menu.Item key=\"2\">Apps</Menu.Item>\r\n    <Menu.Item key=\"3\">Blogs</Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nfunction handleMenuClick(e) {\r\n  message.info('Click on menu item.');\r\n}\r\n\r\nfunction handleChange(value) {\r\n  console.log(`selected ${value}`);\r\n}\r\n\r\nconst HorizontalDark = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const locale = useSelector(({settings}) => settings.locale);\r\n  const navCollapsed = useSelector(({settings}) => settings.navCollapsed);\r\n\r\n\r\n  const languageMenu = () => (\r\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\r\n      <ul className=\"gx-sub-popover\">\r\n        {languageData.map(language =>\r\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\r\n            dispatch(switchLanguage(language))\r\n          }>\r\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`}/>\r\n            <span className=\"gx-language-text\">{language.name}</span>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </CustomScrollbars>);\r\n\r\n  const updateSearchChatUser = (evt) => {\r\n    setSearchText(evt.target.value)\r\n  };\r\n\r\n  return (\r\n    <div className=\"gx-header-horizontal gx-header-horizontal-dark\">\r\n      <div className=\"gx-header-horizontal-top\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-top-flex\">\r\n            <div className=\"gx-header-horizontal-top-left\">\r\n              <i className=\"icon icon-alert gx-mr-3\"/>\r\n              <p className=\"gx-mb-0 gx-text-truncate\"><IntlMessages id=\"app.announced\"/></p>\r\n            </div>\r\n            <ul className=\"gx-login-list\">\r\n              <li>Login</li>\r\n              <li>Signup</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <Header\r\n        className=\"gx-header-horizontal-main\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-main-flex\">\r\n            <div className=\"gx-d-block gx-d-lg-none gx-linebar gx-mr-xs-3\">\r\n              <i className=\"gx-icon-btn icon icon-menu\"\r\n                 onClick={() => {\r\n                   dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n                 }}\r\n              />\r\n\r\n            </div>\r\n            <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer gx-mr-xs-3 gx-pt-xs-1 gx-w-logo\">\r\n              <img alt=\"\" src={require(\"assets/images/w-logo.png\")}/></Link>\r\n            <Link to=\"/\" className=\"gx-d-none gx-d-lg-block gx-pointer gx-mr-xs-5 gx-logo\">\r\n              <img alt=\"\" src={require(\"assets/images/logo.png\")}/></Link>\r\n            <div className=\"gx-header-search gx-d-none gx-d-lg-flex\">\r\n              <SearchBox styleName=\"gx-lt-icon-search-bar-lg\"\r\n                         placeholder=\"Search in app...\"\r\n                         onChange={updateSearchChatUser}\r\n                         value={searchText}/>\r\n\r\n              <Select defaultValue=\"lucy\" style={{width: 120}} onChange={handleChange}>\r\n                <Option value=\"jack\">Products</Option>\r\n                <Option value=\"lucy\">Apps</Option>\r\n                <Option value=\"Yiminghe\">Blogs</Option>\r\n              </Select>\r\n            </div>\r\n\r\n            <ul className=\"gx-header-notifications gx-ml-auto\">\r\n              <li className=\"gx-notify gx-notify-search gx-d-inline-block gx-d-lg-none\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={\r\n                  <div className=\"gx-d-flex\"><Dropdown overlay={menu}>\r\n                    <Button>\r\n                      Category <Icon type=\"down\"/>\r\n                    </Button>\r\n                  </Dropdown>\r\n                    <SearchBox styleName=\"gx-popover-search-bar\"\r\n                               placeholder=\"Search in app...\"\r\n                               onChange={updateSearchChatUser}\r\n                               value={searchText}/></div>\r\n                } trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\"/></span>\r\n\r\n                </Popover>\r\n              </li>\r\n\r\n              <li className=\"gx-notify\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification/>}\r\n                         trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\"/></span>\r\n                </Popover>\r\n              </li>\r\n\r\n              <li className=\"gx-msg\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                         content={<MailNotification/>} trigger=\"click\">\r\n                <span className=\"gx-pointer gx-status-pos gx-d-block\">\r\n                <i className=\"icon icon-chat-new\"/>\r\n                <span className=\"gx-status gx-status-rtl gx-small gx-orange\"/>\r\n                </span>\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-language\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                         content={languageMenu()} trigger=\"click\">\r\n              <span className=\"gx-pointer gx-flex-row gx-align-items-center\"><i\r\n                className={`flag flag-24 flag-${locale.icon}`}/>\r\n              </span>\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-user-nav\"><UserInfo/></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </Header>\r\n      <div className=\"gx-header-horizontal-nav gx-d-none gx-d-lg-block\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-nav-flex\">\r\n            <HorizontalNav/>\r\n            <ul className=\"gx-header-notifications gx-ml-auto\">\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-menu-lines\"/></span></li>\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-setting\"/></span></li>\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-apps-new\"/></span></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default HorizontalDark;\r\n","import React, {useState} from \"react\";\r\nimport {Button, Dropdown, Layout, Menu, message, Popover} from 'antd';\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport CustomScrollbars from \"util/CustomScrollbars\";\r\nimport languageData from \"../languageData\";\r\nimport SearchBox from \"components/SearchBox\";\r\nimport UserInfo from \"components/UserInfo\";\r\nimport AppNotification from \"components/AppNotification\";\r\nimport MailNotification from \"components/MailNotification\";\r\nimport HorizontalNav from \"../HorizontalNav\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {switchLanguage, toggleCollapsedSideNav} from \"../../../appRedux/actions/Setting\";\r\nimport IntlMessages from \"../../../util/IntlMessages\";\r\nimport DownOutlined from \"@ant-design/icons/lib/icons/DownOutlined\";\r\n\r\nconst {Header} = Layout;\r\n\r\nconst menu = (\r\n  <Menu onClick={handleMenuClick}>\r\n    <Menu.Item key=\"1\">Products</Menu.Item>\r\n    <Menu.Item key=\"2\">Apps</Menu.Item>\r\n    <Menu.Item key=\"3\">Blogs</Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nfunction handleMenuClick(e) {\r\n  message.info('Click on menu item.');\r\n}\r\n\r\nconst InsideHeader = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const locale = useSelector(({settings}) => settings.locale);\r\n  const navCollapsed = useSelector(({settings}) => settings.navCollapsed);\r\n\r\n  const languageMenu = () => (\r\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\r\n      <ul className=\"gx-sub-popover\">\r\n        {languageData.map(language =>\r\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\r\n            dispatch(switchLanguage(language))\r\n          }>\r\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`}/>\r\n            <span className=\"gx-language-text\">{language.name}</span>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </CustomScrollbars>);\r\n\r\n  const updateSearchChatUser = (evt) => {\r\n    setSearchText(evt.target.value)\r\n  };\r\n\r\n  return (\r\n    <div className=\"gx-header-horizontal gx-header-horizontal-dark gx-inside-header-horizontal\">\r\n      <div className=\"gx-header-horizontal-top\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-top-flex\">\r\n            <div className=\"gx-header-horizontal-top-left\">\r\n              <i className=\"icon icon-alert gx-mr-3\"/>\r\n              <p className=\"gx-mb-0 gx-text-truncate\"><IntlMessages id=\"app.announced\"/></p>\r\n            </div>\r\n            <ul className=\"gx-login-list\">\r\n              <li>Login</li>\r\n              <li>Signup</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <Header\r\n        className=\"gx-header-horizontal-main\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-main-flex\">\r\n            <div className=\"gx-d-block gx-d-lg-none gx-linebar gx-mr-xs-3 6e\">\r\n              <i className=\"gx-icon-btn icon icon-menu\"\r\n                 onClick={() => {\r\n                   dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n                 }}\r\n              />\r\n            </div>\r\n            <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer gx-mr-xs-3 gx-pt-xs-1 gx-w-logo\">\r\n              <img alt=\"\" src={require(\"assets/images/w-logo.png\")}/></Link>\r\n            <Link to=\"/\" className=\"gx-d-none gx-d-lg-block gx-pointer gx-mr-xs-5 gx-logo\">\r\n              <img alt=\"\" src={require(\"assets/images/logo.png\")}/></Link>\r\n\r\n            <div className=\"gx-header-horizontal-nav gx-header-horizontal-nav-curve gx-d-none gx-d-lg-block\">\r\n              <HorizontalNav/>\r\n            </div>\r\n            <ul className=\"gx-header-notifications gx-ml-auto\">\r\n              <li className=\"gx-notify gx-notify-search\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\"\r\n                         placement=\"bottomRight\" content={\r\n                  <div className=\"gx-d-flex\"><Dropdown overlay={menu}>\r\n                    <Button>\r\n                      Category <DownOutlined />\r\n                    </Button>\r\n                  </Dropdown>\r\n                    <SearchBox styleName=\"gx-popover-search-bar\"\r\n                               placeholder=\"Search in app...\"\r\n                               onChange={updateSearchChatUser}\r\n                               value={searchText}/></div>\r\n                } trigger=\"click\">\r\n\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\"/></span>\r\n\r\n                </Popover>\r\n              </li>\r\n\r\n              <li className=\"gx-notify\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification/>}\r\n                         trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\"/></span>\r\n                </Popover>\r\n              </li>\r\n\r\n              <li className=\"gx-msg\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                         content={<MailNotification/>} trigger=\"click\">\r\n                <span className=\"gx-pointer gx-status-pos gx-d-block\">\r\n                <i className=\"icon icon-chat-new\"/>\r\n                <span className=\"gx-status gx-status-rtl gx-small gx-orange\"/>\r\n                </span>\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-language\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                         content={languageMenu()} trigger=\"click\">\r\n              <span className=\"gx-pointer gx-flex-row gx-align-items-center\"><i\r\n                className={`flag flag-24 flag-${locale.icon}`}/>\r\n              </span>\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-user-nav\"><UserInfo/></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </Header>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({settings}) => {\r\n  const {locale, navCollapsed} = settings;\r\n  return {locale, navCollapsed}\r\n};\r\nexport default connect(mapStateToProps, {toggleCollapsedSideNav, switchLanguage})(InsideHeader);\r\n","import React, { useState } from \"react\";\r\nimport { Button, Dropdown, Layout, Menu, message, Popover, Select } from 'antd';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CustomScrollbars from \"util/CustomScrollbars\";\r\n\r\nimport languageData from \"../languageData\";\r\nimport SearchBox from \"components/SearchBox\";\r\nimport UserInfo from \"components/UserInfo\";\r\nimport AppNotification from \"components/AppNotification\";\r\nimport MailNotification from \"components/MailNotification\";\r\nimport { switchLanguage, toggleCollapsedSideNav } from \"../../../appRedux/actions/Setting\";\r\n\r\nimport { TAB_SIZE } from \"../../../constants/ThemeSetting\";\r\nimport HorizontalNav from \"../HorizontalNav\";\r\nimport { Link } from \"react-router-dom\";\r\nimport IntlMessages from \"../../../util/IntlMessages\";\r\nimport DownOutlined from \"@ant-design/icons/lib/icons/DownOutlined\";\r\n\r\nconst { Header } = Layout;\r\n\r\nconst Option = Select.Option;\r\nconst menu = (\r\n  <Menu onClick={handleMenuClick}>\r\n    <Menu.Item key=\"1\">Products</Menu.Item>\r\n    <Menu.Item key=\"2\">Blog</Menu.Item>\r\n    <Menu.Item key=\"3\">Apps</Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nfunction handleMenuClick() {\r\n  message.info('Click on menu item.');\r\n}\r\n\r\nfunction handleChange(value) {\r\n  console.log(`selected ${value}`);\r\n}\r\n\r\n\r\nconst AboveHeader = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const locale = useSelector(({ settings }) => settings.locale);\r\n  const navCollapsed = useSelector(({ settings }) => settings.navCollapsed);\r\n  const width = useSelector(({ settings }) => settings.width);\r\n\r\n  const languageMenu = () => (\r\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\r\n      <ul className=\"gx-sub-popover\">\r\n        {languageData.map(language =>\r\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\r\n            dispatch(switchLanguage(language))\r\n          }>\r\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`} />\r\n            <span className=\"gx-language-text\">{language.name}</span>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </CustomScrollbars>);\r\n\r\n  const updateSearchChatUser = (evt) => {\r\n    setSearchText(evt.target.value)\r\n  };\r\n\r\n  return (\r\n    <div className=\"gx-header-horizontal gx-header-horizontal-dark gx-above-header-horizontal\">\r\n\r\n      <div className=\"gx-header-horizontal-nav gx-header-horizontal-nav-curve gx-d-none gx-d-lg-block\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-nav-flex\">\r\n            <HorizontalNav />\r\n            <ul className=\"gx-header-notifications gx-ml-auto\">\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-menu-lines\" /></span></li>\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-setting\" /></span></li>\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-apps-new\" /></span></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"gx-header-horizontal-top\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-top-flex\">\r\n            <div className=\"gx-header-horizontal-top-left\">\r\n              <i className=\"icon icon-alert gx-mr-3\" />\r\n              <p className=\"gx-mb-0 gx-text-truncate\"><IntlMessages id=\"app.announced\" /></p>\r\n            </div>\r\n            <ul className=\"gx-login-list\">\r\n              <li><IntlMessages id=\"app.userAuth.login\" /></li>\r\n              <li><IntlMessages id=\"app.userAuth.signUp\" /></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Header\r\n        className=\"gx-header-horizontal-main\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-main-flex\">\r\n\r\n            <div className=\"gx-d-block gx-d-lg-none gx-linebar gx-mr-xs-3\">\r\n              <i className=\"gx-icon-btn icon icon-menu\"\r\n                onClick={() => {\r\n                  if (width <= TAB_SIZE) {\r\n                    dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer gx-mr-xs-3 gx-pt-xs-1 gx-w-logo\">\r\n              <img alt=\"\" src={require(\"assets/images/w-logo.png\")} /></Link>\r\n            <Link to=\"/\" className=\"gx-d-none gx-d-lg-block gx-pointer gx-mr-xs-5 gx-logo\">\r\n              <img alt=\"\" src={require(\"assets/images/logo.png\")} /></Link>\r\n            <div className=\"gx-header-search gx-d-none gx-d-lg-flex\">\r\n              <SearchBox styleName=\"gx-lt-icon-search-bar-lg\"\r\n                placeholder=\"Search in app...\"\r\n                onChange={updateSearchChatUser}\r\n                value={searchText} />\r\n\r\n              <Select defaultValue=\"lucy\" style={{ width: 120 }} onChange={handleChange}>\r\n                <Option value=\"jack\">Products</Option>\r\n                <Option value=\"lucy\">Apps</Option>\r\n                <Option value=\"Yiminghe\">Blogs</Option>\r\n              </Select>\r\n            </div>\r\n\r\n            <ul className=\"gx-header-notifications gx-ml-auto\">\r\n              <li className=\"gx-notify gx-notify-search gx-d-inline-block gx-d-lg-none\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={\r\n                  <div className=\"gx-d-flex\"><Dropdown overlay={menu}>\r\n                    <Button>\r\n                      Category <DownOutlined />\r\n                    </Button>\r\n                  </Dropdown>\r\n                    <SearchBox styleName=\"gx-popover-search-bar\"\r\n                      placeholder=\"Search in app...\"\r\n                      onChange={updateSearchChatUser}\r\n                      value={searchText} /></div>\r\n                } trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\" /></span>\r\n                </Popover>\r\n              </li>\r\n\r\n              <li className=\"gx-notify\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification />}\r\n                  trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\" /></span>\r\n                </Popover>\r\n              </li>\r\n\r\n              <li className=\"gx-msg\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                  content={<MailNotification />} trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-status-pos gx-d-block\">\r\n                    <i className=\"icon icon-chat-new\" />\r\n                    <span className=\"gx-status gx-status-rtl gx-small gx-orange\" />\r\n                  </span>\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-language\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                  content={languageMenu()} trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-flex-row gx-align-items-center\"><i\r\n                    className={`flag flag-24 flag-${locale.icon}`} />\r\n                  </span>\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-user-nav\"><UserInfo /></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </Header>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default AboveHeader;\r\n","import React, {useState} from \"react\";\r\nimport {Button, Dropdown,Layout, Menu, message, Popover, Select} from 'antd';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport CustomScrollbars from \"util/CustomScrollbars\";\r\nimport languageData from \"../languageData\";\r\nimport SearchBox from \"components/SearchBox\";\r\nimport UserInfo from \"components/UserInfo\";\r\nimport AppNotification from \"components/AppNotification\";\r\nimport MailNotification from \"components/MailNotification\";\r\nimport {switchLanguage, toggleCollapsedSideNav} from \"../../../appRedux/actions/Setting\";\r\nimport HorizontalNav from \"../HorizontalNav\";\r\nimport {Link} from \"react-router-dom\";\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport DownOutlined from \"@ant-design/icons/lib/icons/DownOutlined\";\r\n\r\nconst {Header} = Layout;\r\n\r\nconst Option = Select.Option;\r\nconst menu = (\r\n  <Menu onClick={handleMenuClick}>\r\n    <Menu.Item key=\"1\">Products</Menu.Item>\r\n    <Menu.Item key=\"2\">Apps</Menu.Item>\r\n    <Menu.Item key=\"3\">Blogs</Menu.Item>\r\n  </Menu>\r\n);\r\n\r\nfunction handleMenuClick(e) {\r\n  message.info('Click on menu item.');\r\n}\r\n\r\nfunction handleChange(value) {\r\n  console.log(`selected ${value}`);\r\n}\r\n\r\nconst BelowHeader = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const locale = useSelector(({settings}) => settings.locale);\r\n  const navCollapsed = useSelector(({settings}) => settings.navCollapsed);\r\n\r\n  const languageMenu = () => (\r\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\r\n      <ul className=\"gx-sub-popover\">\r\n        {languageData.map(language =>\r\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\r\n            dispatch(switchLanguage(language))\r\n          }>\r\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`}/>\r\n            <span className=\"gx-language-text\">{language.name}</span>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </CustomScrollbars>);\r\n\r\n  const updateSearchChatUser = (evt) => {\r\n    setSearchText(evt.target.value)\r\n  };\r\n\r\n  return (\r\n    <div className=\"gx-header-horizontal gx-header-horizontal-dark gx-below-header-horizontal\">\r\n      <div className=\"gx-header-horizontal-top\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-top-flex\">\r\n            <div className=\"gx-header-horizontal-top-left\">\r\n              <i className=\"icon icon-alert gx-mr-3\"/>\r\n              <p className=\"gx-mb-0 gx-text-truncate\"><IntlMessages id=\"app.announced\"/></p>\r\n            </div>\r\n            <ul className=\"gx-login-list\">\r\n              <li>Login</li>\r\n              <li>Signup</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      <Header\r\n        className=\"gx-header-horizontal-main\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-main-flex\">\r\n\r\n            <div className=\"gx-d-block gx-d-lg-none gx-linebar gx-mr-xs-3\">\r\n              <i className=\"gx-icon-btn icon icon-menu\"\r\n                 onClick={() => {\r\n                   dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n                 }}\r\n              />\r\n            </div>\r\n            <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer gx-mr-xs-3 gx-pt-xs-1 gx-w-logo\">\r\n              <img alt=\"\" src={require(\"assets/images/w-logo.png\")}/></Link>\r\n            <Link to=\"/\" className=\"gx-d-none gx-d-lg-block gx-pointer gx-mr-xs-5 gx-logo\">\r\n              <img alt=\"\" src={require(\"assets/images/logo.png\")}/></Link>\r\n            <div className=\"gx-header-search gx-d-none gx-d-lg-flex\">\r\n              <SearchBox styleName=\"gx-lt-icon-search-bar-lg\"\r\n                         placeholder=\"Search in app...\"\r\n                         onChange={updateSearchChatUser}\r\n                         value={searchText}/>\r\n\r\n              <Select defaultValue=\"lucy\" style={{width: 120}} onChange={handleChange}>\r\n                <Option value=\"jack\">Products</Option>\r\n                <Option value=\"lucy\">Apps</Option>\r\n                <Option value=\"Yiminghe\">Blogs</Option>\r\n              </Select>\r\n            </div>\r\n\r\n            <ul className=\"gx-header-notifications gx-ml-auto\">\r\n              <li className=\"gx-notify gx-notify-search gx-d-inline-block gx-d-lg-none\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={\r\n                  <div className=\"gx-d-flex\"><Dropdown overlay={menu}>\r\n                    <Button>\r\n                      Category <DownOutlined />\r\n                    </Button>\r\n                  </Dropdown>\r\n                    <SearchBox styleName=\"gx-popover-search-bar\"\r\n                               placeholder=\"Search in app...\"\r\n                               onChange={updateSearchChatUser}\r\n                               value={searchText}/></div>\r\n                } trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\"/></span>\r\n                </Popover>\r\n              </li>\r\n\r\n              <li className=\"gx-notify\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification/>}\r\n                         trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\"/></span>\r\n                </Popover>\r\n              </li>\r\n\r\n              <li className=\"gx-msg\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                         content={<MailNotification/>} trigger=\"click\">\r\n                <span className=\"gx-pointer gx-status-pos gx-d-block\">\r\n                <i className=\"icon icon-chat-new\"/>\r\n                <span className=\"gx-status gx-status-rtl gx-small gx-orange\"/>\r\n                </span>\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-language\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                         content={languageMenu()} trigger=\"click\">\r\n              <span className=\"gx-pointer gx-flex-row gx-align-items-center\"><i\r\n                className={`flag flag-24 flag-${locale.icon}`}/>\r\n              </span>\r\n                </Popover>\r\n              </li>\r\n              <li className=\"gx-user-nav\"><UserInfo/></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </Header>\r\n      <div className=\"gx-header-horizontal-nav gx-header-horizontal-nav-curve gx-d-none gx-d-lg-block\">\r\n        <div className=\"gx-container\">\r\n          <div className=\"gx-header-horizontal-nav-flex\">\r\n            <HorizontalNav/>\r\n            <ul className=\"gx-header-notifications gx-ml-auto\">\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-menu-lines\"/></span></li>\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-setting\"/></span></li>\r\n              <li><span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-apps-new\"/></span></li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BelowHeader;\r\n","import React, { useState } from \"react\";\r\nimport { Layout, Popover } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport CustomScrollbars from \"util/CustomScrollbars\";\r\nimport languageData from \"./languageData\";\r\nimport { switchLanguage, toggleCollapsedSideNav } from \"../../appRedux/actions/Setting\";\r\nimport SearchBox from \"components/SearchBox\";\r\nimport UserInfo from \"components/UserInfo\";\r\nimport AppNotification from \"components/AppNotification\";\r\nimport MailNotification from \"components/MailNotification\";\r\nimport Auxiliary from \"util/Auxiliary\";\r\n\r\n\r\nimport { NAV_STYLE_DRAWER, NAV_STYLE_FIXED, NAV_STYLE_MINI_SIDEBAR, TAB_SIZE } from \"../../constants/ThemeSetting\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst { Header } = Layout;\r\n\r\nconst Topbar = () => {\r\n\r\n  const { locale, width, navCollapsed, navStyle } = useSelector(({ settings }) => settings);\r\n  const { searchText, setSearchText } = useState('');\r\n  const dispatch = useDispatch();\r\n\r\n  const languageMenu = () => (\r\n    <CustomScrollbars className=\"gx-popover-lang-scroll\">\r\n      <ul className=\"gx-sub-popover\">\r\n        {languageData.map(language =>\r\n          <li className=\"gx-media gx-pointer\" key={JSON.stringify(language)} onClick={(e) =>\r\n            dispatch(switchLanguage(language))\r\n          }>\r\n            <i className={`flag flag-24 gx-mr-2 flag-${language.icon}`} />\r\n            <span className=\"gx-language-text\">{language.name}</span>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </CustomScrollbars>);\r\n\r\n  const updateSearchChatUser = (evt) => {\r\n    setSearchText(evt.target.value);\r\n  };\r\n  if (false) {\r\n    return (\r\n      <Header>\r\n        {navStyle === NAV_STYLE_DRAWER || ((navStyle === NAV_STYLE_FIXED || navStyle === NAV_STYLE_MINI_SIDEBAR) && width < TAB_SIZE) ?\r\n          <div className=\"gx-linebar gx-mr-3\">\r\n            <i className=\"gx-icon-btn icon icon-menu\"\r\n              onClick={() => {\r\n                dispatch(toggleCollapsedSideNav(!navCollapsed));\r\n              }}\r\n            />\r\n          </div> : null}\r\n        <Link to=\"/\" className=\"gx-d-block gx-d-lg-none gx-pointer\">\r\n          <img alt=\"\" src={require(\"assets/images/w-logo.png\")} /></Link>\r\n\r\n        <SearchBox styleName=\"gx-d-none gx-d-lg-block gx-lt-icon-search-bar-lg\"\r\n          placeholder=\"Search in app...\"\r\n          onChange={updateSearchChatUser}\r\n          value={searchText} />\r\n        <ul className=\"gx-header-notifications gx-ml-auto\">\r\n          <li className=\"gx-notify gx-notify-search gx-d-inline-block gx-d-lg-none\">\r\n            <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={\r\n              <SearchBox styleName=\"gx-popover-search-bar\"\r\n                placeholder=\"Search in app...\"\r\n                onChange={updateSearchChatUser}\r\n                value={searchText} />\r\n            } trigger=\"click\">\r\n              <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-search-new\" /></span>\r\n            </Popover>\r\n          </li>\r\n          {width >= TAB_SIZE ? null :\r\n            <Auxiliary>\r\n              <li className=\"gx-notify\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={<AppNotification />}\r\n                  trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-d-block\"><i className=\"icon icon-notification\" /></span>\r\n                </Popover>\r\n              </li>\r\n\r\n              <li className=\"gx-msg\">\r\n                <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\"\r\n                  content={<MailNotification />} trigger=\"click\">\r\n                  <span className=\"gx-pointer gx-status-pos gx-d-block\">\r\n                    <i className=\"icon icon-chat-new\" />\r\n                    <span className=\"gx-status gx-status-rtl gx-small gx-orange\" />\r\n                  </span>\r\n                </Popover>\r\n              </li>\r\n            </Auxiliary>\r\n          }\r\n          <li className=\"gx-language\">\r\n            <Popover overlayClassName=\"gx-popover-horizantal\" placement=\"bottomRight\" content={languageMenu()}\r\n              trigger=\"click\">\r\n              <span className=\"gx-pointer gx-flex-row gx-align-items-center\">\r\n                <i className={`flag flag-24 flag-${locale.icon}`} />\r\n                <span className=\"gx-pl-2 gx-language-name\">{locale.name}</span>\r\n                <i className=\"icon icon-chevron-down gx-pl-2\" />\r\n              </span>\r\n            </Popover>\r\n          </li>\r\n          {width >= TAB_SIZE ? null :\r\n            <Auxiliary>\r\n              <li className=\"gx-user-nav\"><UserInfo /></li>\r\n            </Auxiliary>\r\n          }\r\n        </ul>\r\n      </Header>\r\n    );\r\n  } else {\r\n    return null\r\n  }\r\n};\r\n\r\nexport default Topbar;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst Auth = (WrappedComponent, Roles) => {\r\n\r\n    const AuthCheck = (props) => {\r\n        const [isAuthorized, setIsAuthorized] = useState(false);\r\n\r\n        useEffect(() => {\r\n            let collectData = [];\r\n            let user = JSON.parse(localStorage.getItem('user'));\r\n            if (user) {\r\n                const userRole = user.role;\r\n                collectData = Roles.filter(data => userRole === data);\r\n                if (collectData.length) {\r\n                    setIsAuthorized(true)\r\n                }\r\n            } else {\r\n                props.history.push('/login');\r\n            }\r\n        }, [])\r\n\r\n        if (isAuthorized) {\r\n            return <WrappedComponent {...props} />;\r\n        } else {\r\n            return <div>YOU ARE NOT AUTHORIZED TO USE THE PAGE</div>;\r\n        }\r\n    }\r\n    return AuthCheck;\r\n};\r\n\r\nexport { Auth };\r\n","import { showMessage } from '../helpers';\r\n\r\nexport function handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 400) {\r\n                return Promise.reject(data);\r\n            }\r\n            if (response.status === 403) {\r\n                localStorage.removeItem('user');\r\n                window.location.reload();\r\n                showMessage('error', 'Access denied!');\r\n            }\r\n            if (response.status === 401) {\r\n                if (response.url && response.url.indexOf('/api/login') > 0) {\r\n                    showMessage('error', data.detail);\r\n                } else {\r\n                    // auto logout if 401 response returned from api\r\n                    localStorage.removeItem('user');\r\n                    window.location.reload();\r\n                    showMessage('info', 'Session timeout!');\r\n                }\r\n            }\r\n            if (response.status === 404) {\r\n                if (data.status === 'notfound') {\r\n                    window.location.replace('/error-404')\r\n                }\r\n                if (data.status === 'expired') {\r\n                    window.location.replace('/reset-password?token=reset')\r\n                    showMessage('info', 'Token expired');\r\n                }\r\n            }\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n","import { config } from '../constants';\r\nimport { authHeader } from '../helpers';\r\nimport { handleResponse } from './handle-response';\r\n\r\nexport const login = ({ email, password }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/login/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const changePassword = ({ password }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ password }),\r\n    };\r\n    return fetch(`${config.API_URL}/account/update_password/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\n\r\n\r\nexport const tokenValidate = ({ token }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ token }),\r\n    };\r\n    return fetch(`${config.API_URL}/password_reset/validate_token/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const passwordSet = ({ password, token }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ password, token }),\r\n    };\r\n    return fetch(`${config.API_URL}/password_reset/confirm/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const forgotPassword = ({ email }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email }),\r\n    };\r\n    return fetch(`${config.API_URL}/password_reset/`, requestOptions)\r\n        .then(handleResponse)\r\n}","import { config } from '../constants';\r\nimport { authHeader } from '../helpers';\r\nimport { handleResponse } from './handle-response';\r\n\r\nexport const getSalesReport = (type) => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/sales/${type}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const postSalesReport = (type, data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/sales/${type}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const adminGetSalesReport = (type, id) => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/sales/${type}/${id}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const adminPostSalesReport = (type, id, data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/sales/${type}/${id}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const submitSalesReport = ({ message }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message })\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/sales/submit/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const approveSalesReport = ({ partner_id, message, is_approved }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ partner_id, message, is_approved })\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/sales/message/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const markSalesReportMessageRead = (type) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/sales/inbox/${type}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getConsolidatedSalesReport = (type, data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/report/sales/${type}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const downloadConsolidatedSalesReport = (type) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({}),\r\n        responseType: 'blob'\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/report/sales/download/${type}`, requestOptions)\r\n        .then(response => response.blob())\r\n}\r\n\r\nexport const getProductsToBeVerified = (id) => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/product_verification/${id}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const postProductsToBeVerified = (id, data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/product_verification/${id}`, requestOptions)\r\n        .then(handleResponse)\r\n}","import { config } from '../constants';\r\nimport { authHeader } from '../helpers';\r\nimport { handleResponse } from './handle-response';\r\n\r\nexport const getProjectCount = () => {\r\n    \r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n    \r\n    return fetch(`${config.API_URL}/admin/dashboard/project/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getProductCompanyCount = () => {\r\n    \r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n    \r\n    return fetch(`${config.API_URL}/admin/dashboard/product/company/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getProductCountryCount = (status) => {\r\n    \r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n    \r\n    if (status === 'Future-Quarters'){\r\n        return fetch(`${config.API_URL}/admin/dashboard/product/country/quarter/`, requestOptions)\r\n        .then(handleResponse)\r\n    }else{\r\n        const endpoint = `${config.API_URL}/admin/dashboard/product/country/?status=`.concat(status)\r\n        return fetch(endpoint, requestOptions)\r\n            .then(handleResponse)\r\n    }\r\n    \r\n}\r\n\r\nexport const getCompanyCount = () => {\r\n    \r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n    \r\n    return fetch(`${config.API_URL}/admin/dashboard/company/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getCountryProduct = (status) => {\r\n    \r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n    \r\n    const endpoint = `${config.API_URL}/admin/dashboard/country/?type=`.concat(status)\r\n    return fetch(endpoint, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\n\r\nexport const getSales = (map_with,to) => {\r\n    \r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n    \r\n    const endpoint = `${config.API_URL}/admin/dashboard/sales/`.concat('?map_with=').concat(map_with).concat('&for=').concat(to)\r\n    return fetch(endpoint, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getDashboardSummary = (type) => {\r\n    \r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n    \r\n    const endpoint = `${config.API_URL}/admin/dashboard/`.concat('?type=').concat(type)\r\n    return fetch(endpoint, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const sendReminderBulkMail = (data) => {\r\n    \r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data),\r\n    };\r\n    \r\n    return fetch(`${config.API_URL}/template/bulkReminder/`, requestOptions)\r\n        .then(handleResponse)\r\n}","import { loaderConstants } from '../../constants';\r\n\r\nexport const showLoader = () => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: loaderConstants.SHOW_LOADER,\r\n        });\r\n    }\r\n}\r\n\r\nexport const hideLoader = () => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: loaderConstants.HIDE_LOADER,\r\n        });\r\n    }\r\n}\r\n","import {\r\n    getProjectCount,\r\n    getProductCompanyCount,\r\n    getProductCountryCount,\r\n    getCompanyCount,\r\n    getCountryProduct,\r\n    getSales,\r\n    getDashboardSummary,\r\n    sendReminderBulkMail,\r\n} from '../../services';\r\nimport { adminDashboardConstants } from '../../constants'\r\nimport { hideLoader, showLoader } from './Loader';\r\n\r\nexport const projectCount = () => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminDashboardConstants.GET_PROJECT_COUNT_REQUEST });\r\n        getProjectCount().then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminDashboardConstants.GET_PROJECT_COUNT_SUCCESS, data: response ? response : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminDashboardConstants.GET_PROJECT_COUNT_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const productCompanyCount = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_REQUEST });\r\n        getProductCompanyCount().then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_SUCCESS, data: response ? response : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const productCountryCount = (status) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_REQUEST });\r\n        getProductCountryCount(status).then(\r\n            response => {\r\n                if (status === 'Future-Quarters') {\r\n                    dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_QUARTER_SUCCESS, data: response ? response : [] });\r\n                } else {\r\n                    dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_SUCCESS, data: response ? response : [] });\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const companyCount = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_COMPANY_REQUEST });\r\n        getCompanyCount().then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_SUCCESS, data: response ? response : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport const countryProduct = (type) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_REQUEST });\r\n        getCountryProduct(type).then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport const productCompanySales = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_REQUEST });\r\n        getSales('product', 'company').then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COMPANY_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const productPeriodSales = (period) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_REQUEST });\r\n        getSales('product', period).then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_PERIOD_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const productCountrySales = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_REQUEST });\r\n        getSales('product', 'country').then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_PRODUCT_COUNTRY_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const companyProductSales = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_REQUEST });\r\n        getSales('company', 'product').then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_PRODUCT_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const companyPeriodSales = (period) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_COMPANY_PERIOD_SALES_REQUEST });\r\n        getSales('company', period).then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_PERIOD_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_PERIOD_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const companyCountrySales = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_REQUEST });\r\n        getSales('company', 'country').then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_COMPANY_COUNTRY_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const countryProductSales = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_REQUEST });\r\n        getSales('country', 'product').then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PRODUCT_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const countryPeriodSales = (period) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_REQUEST });\r\n        getSales('country', period).then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_PERIOD_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const countryCompanySales = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_REQUEST });\r\n        getSales('country', 'company').then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_COUNTRY_COMPANY_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const periodProductSales = (period) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_REQUEST });\r\n        getSales(period, 'product').then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_PRODUCT_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const periodCountrySales = (period) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_REQUEST });\r\n        getSales(period, 'country').then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_COUNTRY_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const periodCompanySales = (period) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_PERIOD_COMPANY_SALES_REQUEST });\r\n        getSales(period, 'company').then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_COMPANY_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_PERIOD_COMPANY_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport const packPeriodSales = (period) => {\r\n\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_PACK_PERIOD_SALES_REQUEST });\r\n        getSales('price_per_pack', period).then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_PACK_PERIOD_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_PACK_PERIOD_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const treatmentPeriodSales = (period) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_REQUEST });\r\n        getSales('price_per_treatment', period).then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_SUCCESS, data: response ? response['rows'] : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_TREATMENT_PERIOD_SALES_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport const adminDashboardSummary = (type) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_REQUEST });\r\n        getDashboardSummary(type).then(\r\n            response => {\r\n                dispatch({ type: adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_SUCCESS, data: response ? response : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminDashboardConstants.GET_ADMIN_DASHBOARD_SUMMARY_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const bulkReminderMail = (data) => {\r\n    return dispatch => {\r\n        dispatch(showLoader())\r\n        dispatch({ type: adminDashboardConstants.SEND_BULK_REMINDER_REQUEST });\r\n        sendReminderBulkMail(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminDashboardConstants.SEND_BULK_REMINDER_SUCCESS });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminDashboardConstants.SEND_BULK_REMINDER_FAILURE });\r\n            }\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Card} from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Widget = ({title, children, styleName, cover, extra, actions}) => {\r\n\r\n  return (\r\n    <Card title={title} actions={actions} cover={cover} className={`gx-card-widget ${styleName}`} extra={extra}>\r\n      {children}\r\n    </Card>\r\n  )\r\n};\r\n\r\nexport default Widget;\r\nWidget.defaultProps = {\r\n  styleName: '',\r\n};\r\n\r\nWidget.propTypes = {\r\n  title: PropTypes.node,\r\n  extra: PropTypes.node,\r\n  cover: PropTypes.node,\r\n  actions: PropTypes.node,\r\n  children: PropTypes.node.isRequired\r\n};\r\n","import React from 'react';\r\n\r\nimport Widget from 'components/Widget/index';\r\nimport imgUnderDevelopment from '../../assets/images/dashboard/under-development.svg'\r\nimport imgHold from '../../assets/images/dashboard/hold.svg'\r\nimport imgDropped from '../../assets/images/dashboard/dropped.svg'\r\nimport imgFiled from '../../assets/images/dashboard/filed.svg'\r\nimport imgApproved from '../../assets/images/dashboard/approved.svg'\r\n\r\n\r\nconst DashboardCountProjects = (props) => {\r\n  const { count, status } = props.data\r\n  let cardColor = 'cyan'\r\n  let dataStatus = status;\r\n  let icon = ''\r\n  if (status === 'ON_HOLD') {\r\n    cardColor = 'grey'\r\n    dataStatus = 'ON HOLD'\r\n    icon = imgHold\r\n  }\r\n  else if (status === 'UNDER_DEVELOPMENT') {\r\n    cardColor = 'secondary';\r\n    dataStatus = 'UNDER DEVELOPMENT'\r\n    icon = imgUnderDevelopment\r\n  }\r\n  else if (status === 'DROPPED') {\r\n    cardColor = 'red'\r\n    icon = imgDropped\r\n  }\r\n  else if (status === 'FILED') {\r\n    cardColor = 'primary'\r\n    icon = imgFiled\r\n  }\r\n  else if (status === 'APPROVED') {\r\n    cardColor = 'success'\r\n    icon = imgApproved\r\n  }\r\n\r\n  return (\r\n    <Widget styleName={`gx-card-full gx-p-3 gx-bg-${cardColor} gx-text-white mb-0 height-100 gx-flex-row gx-align-items-center`}>\r\n      <div className='gx-media gx-align-items-center gx-flex-nowrap'>\r\n        <div className='gx-mr-2 gx-mr-xxl-3'>\r\n          <img src={icon} className='width-30' />\r\n        </div>\r\n        <div className='gx-media-body'>\r\n          <h1 className='gx-fs-xxl gx-font-weight-semi-bold gx-mb-1 gx-text-white'>{count}</h1>\r\n          <p className='gx-mb-0 text-capitalize'>{dataStatus.toLowerCase()}</p>\r\n        </div>\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardCountProjects;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { projectCount } from '../../../../../appRedux/actions/AdminDashboard'\r\nimport { Row, Col, Empty, Card } from 'antd';\r\nimport DashboardCountProjects from 'components/dashboardCountProjects/DashboardCountProjects';\r\nimport Widget from 'components/Widget/index';\r\n\r\nimport './project-count.css'\r\n\r\n\r\nexport const AdminDashboardProjectCount = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isProjectCountLoaded = useSelector(state => state.adminDashboard.isProjectCountLoaded);\r\n    const projectCountList = useSelector(state => state.adminDashboard.project_count)\r\n\r\n    useEffect(() => {\r\n        dispatch(projectCount())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let rowData = projectCountList.length ? projectCountList.map(\r\n            (value, index) => ({\r\n                key: index,\r\n                status: value.status,\r\n                count: value.count\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isProjectCountLoaded])\r\n\r\n    return (\r\n        <Col span={24}>\r\n            <Widget>\r\n                <h3 className='mb-20'>Project Wise Count</h3>\r\n                {\r\n                    data && data.length > 0 ?\r\n                        <Row className='project-count-row'>\r\n                            {\r\n                                data.map((value, index) =>\r\n                                    <Col xs={4}>\r\n                                        <DashboardCountProjects data={value} key={index} />\r\n                                    </Col>\r\n                                )\r\n                            }\r\n                        </Row> :\r\n                        <Card>\r\n                            <Empty description='No data available!' />\r\n                        </Card>\r\n                }\r\n\r\n            </Widget>\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Table, Tooltip, Button } from 'antd';\r\nimport Widget from 'components/Widget/index';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { omit } from 'lodash';\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Product Name',\r\n    dataIndex: 'product_name',\r\n    fixed: 'left',\r\n    width: 150\r\n  },\r\n  {\r\n    title: 'UNDER DEVELOPMENT',\r\n    dataIndex: 'UNDER_DEVELOPMENT',\r\n    width: 100,\r\n  },\r\n  {\r\n    title: 'DROPPED',\r\n    dataIndex: 'DROPPED',\r\n    width: 100\r\n  },\r\n  {\r\n    title: 'ON HOLD',\r\n    dataIndex: 'ON_HOLD',\r\n    width: 100\r\n  },\r\n  {\r\n    title: 'FILED',\r\n    dataIndex: 'FILED',\r\n    width: 100\r\n  },\r\n  {\r\n    title: 'APPROVED',\r\n    dataIndex: 'APPROVED',\r\n    width: 100\r\n  }\r\n];\r\n\r\n\r\nconst DashboardProductWise = (props) => {\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            Product Wise Company Count</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              disabled={props.loading}\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'product-wise-company')} >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }\r\n    >\r\n      <div\r\n        className='gx-table-responsive'\r\n      >\r\n        <Table\r\n          className='gx-table-no-bordered mpp-list-table'\r\n          columns={columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          size='small'\r\n          loading={props.loading}\r\n        />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardProductWise;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { productCompanyCount } from '../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardProductWiseCompany from '../../../../../components/dashboardProductWiseCompany/DashboardProductWiseCompany';\r\nexport const AdminDashboardProductCompanyCount = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isProductCompanyCountLoaded = useSelector(state => state.adminDashboard.isProductCompanyCountLoaded);\r\n    const productComapnyCountList = useSelector(state => state.adminDashboard.product_company_count)\r\n\r\n    useEffect(() => {\r\n        dispatch(productCompanyCount())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let rowData = productComapnyCountList.length ? productComapnyCountList.map(\r\n            value => ({\r\n                key: value.product_id,\r\n                product_name: value.product_name,\r\n                UNDER_DEVELOPMENT: value.UNDER_DEVELOPMENT,\r\n                DROPPED: value.DROPPED,\r\n                ON_HOLD: value.ON_HOLD,\r\n                FILED: value.FILED,\r\n                APPROVED: value.APPROVED\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isProductCompanyCountLoaded])\r\n\r\n    return (\r\n        <Col span={12}>\r\n            <DashboardProductWiseCompany loading={!isProductCompanyCountLoaded} data={data} />\r\n        </Col>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Select, Tooltip, Button,Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\n\r\nconst Option = Select.Option\r\n\r\nconst DashboardProductWiseCountry = (props) => {\r\n  const handleChange = (value) => {\r\n    props.updateStatus(value)\r\n  }\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <h2 className='gx-text-capitalize gx-mb-0'>\r\n          Product Wise Country Count</h2>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Select className='gx-select-md mr-15' defaultValue='Filed' onChange={handleChange}>\r\n            <Option value='Filed'>Filed</Option>\r\n            <Option value='Registered'>Registered</Option>\r\n            <Option value='Filing-Planned'>Filing-Planned</Option>\r\n            <Option value='Future-Quarters'>Future-Quarters</Option>\r\n          </Select>\r\n\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'product-wise-country-' + props.status)}\r\n              disabled={props.loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table\r\n          className='gx-table-no-bordered'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          size='small'\r\n          loading={props.loading}\r\n        />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardProductWiseCountry;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { productCountryCount } from '../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardProductWiseCountry from 'components/dashboardProductWiseCountry/DashboardProductWiseCountry'\r\n\r\nexport const AdminDashboardProductCountryCount = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n\r\n    const isProductCountryCountLoaded = useSelector(state => state.adminDashboard.isProductCountryCountLoaded);\r\n    const productCountryList = useSelector(state => state.adminDashboard.product_country_count)\r\n    const futureQuarters = useSelector(state => state.adminDashboard.future_quarters)\r\n\r\n    const [status, setStatus] = useState('Filed');\r\n\r\n    useEffect(() => {\r\n        dispatch(productCountryCount(status))\r\n    }, [status])\r\n\r\n    useEffect(() => {\r\n        if (status === 'Future-Quarters') {\r\n            let rowData = productCountryList.length ? productCountryList.map(\r\n                value => ({\r\n                    key: value.product_id,\r\n                    product_name: value.product_name,\r\n                    [futureQuarters[0]]: value[futureQuarters[0]],\r\n                    [futureQuarters[1]]: value[futureQuarters[1]],\r\n                    [futureQuarters[2]]: value[futureQuarters[2]],\r\n                    [futureQuarters[3]]: value[futureQuarters[3]]\r\n                })\r\n            ) : [];\r\n\r\n            const columns = [\r\n                {\r\n                    title: 'Product Name',\r\n                    dataIndex: 'product_name',\r\n                    key: 'product_name',\r\n                    width: 150\r\n                },\r\n                {\r\n                    title: futureQuarters[0],\r\n                    dataIndex: futureQuarters[0],\r\n                    key: futureQuarters[0],\r\n                    width: 80\r\n                },\r\n                {\r\n                    title: futureQuarters[1],\r\n                    dataIndex: futureQuarters[1],\r\n                    key: futureQuarters[1],\r\n                    width: 80\r\n                },\r\n                {\r\n                    title: futureQuarters[2],\r\n                    dataIndex: futureQuarters[2],\r\n                    key: futureQuarters[2],\r\n                    width: 80\r\n                },\r\n                {\r\n                    title: futureQuarters[3],\r\n                    dataIndex: futureQuarters[3],\r\n                    key: futureQuarters[3],\r\n                    width: 80\r\n                },\r\n            ]\r\n            setData(rowData)\r\n            setColumns(columns)\r\n        } else {\r\n            let rowData = productCountryList.length ? productCountryList.map(\r\n                value => ({\r\n                    key: value.product_id,\r\n                    product_name: value.product_name,\r\n                    count: value.count\r\n                })\r\n            ) : [];\r\n            const columns = [\r\n                {\r\n                    title: 'Product Name',\r\n                    dataIndex: 'product_name',\r\n                    key: 'product_name',\r\n                    width: 150\r\n                },\r\n                {\r\n                    title: status,\r\n                    dataIndex: 'count',\r\n                    key: 'count',\r\n                    width: 80\r\n                },\r\n            ]\r\n            setData(rowData)\r\n            setColumns(columns)\r\n        }\r\n    }, [isProductCountryCountLoaded])\r\n\r\n    const updateStatus = (value) => {\r\n        setStatus(value)\r\n    }\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardProductWiseCountry status={status} data={data} columns={columns} updateStatus={updateStatus} loading={!isProductCountryCountLoaded} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Tooltip, Button, Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\n\r\nconst DashboardProductWise = ({ columns, loading, data, }) => {\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            Company Wise Product Count</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(data.map(val => omit(val, 'key')), 'company-wise-product')}\r\n              disabled={loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table\r\n          className='gx-table-no-bordered mpp-list-table'\r\n          columns={columns}\r\n          loading={loading}\r\n          dataSource={data}\r\n          scroll={{ y: 285 }}\r\n          bordered={false}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardProductWise;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { companyCount } from '../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardCompanyWiseStatus from 'components/dashboardCompanyWiseStatus/DashboardCompanyWiseStatus'\r\n\r\nexport const AdminDashboardCompanyCount = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isCompanyCountLoaded = useSelector(state => state.adminDashboard.isCompanyCountLoaded);\r\n    const comapnyCountList = useSelector(state => state.adminDashboard.company_count)\r\n\r\n    useEffect(() => {\r\n        dispatch(companyCount())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let rowData = comapnyCountList.length ? comapnyCountList.map(\r\n            value => ({\r\n                key: value.partner_id,\r\n                company_name: value.company_name,\r\n                UNDER_DEVELOPMENT: value.UNDER_DEVELOPMENT,\r\n                DROPPED: value.DROPPED,\r\n                ON_HOLD: value.ON_HOLD,\r\n                FILED: value.FILED,\r\n                APPROVED: value.APPROVED\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isCompanyCountLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Partner Name/ Company Name',\r\n            dataIndex: 'company_name',\r\n            key: 'company_name',\r\n            fixed: 'left',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'DEVELOPING',\r\n            dataIndex: 'UNDER_DEVELOPMENT',\r\n            key: 'UNDER_DEVELOPMENT',\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'DROPPED',\r\n            dataIndex: 'DROPPED',\r\n            key: 'DROPPED',\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'ON_HOLD',\r\n            dataIndex: 'ON_HOLD',\r\n            key: 'ON_HOLD',\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'FILED with USFDA/ WHO-PQ',\r\n            dataIndex: 'FILED',\r\n            key: 'FILED',\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'Approval from USFDA/ WHO-PQ',\r\n            dataIndex: 'APPROVED',\r\n            key: 'APPROVED',\r\n            width: 100\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardCompanyWiseStatus data={data} columns={columns} loading={!isCompanyCountLoaded} />\r\n        </Col>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Table, Select, Button, Tooltip } from 'antd';\r\nimport Widget from 'components/Widget/index';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { omit } from 'lodash';\r\nimport { exportToXLXS } from '../../helpers';\r\nconst Option = Select.Option\r\n\r\nconst DashboardCountryWiseProduct = (props) => {\r\n\r\n  const handleChange = (value) => {\r\n    props.updateStatus(value)\r\n  }\r\n\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <h2 className='gx-text-capitalize gx-mb-0'>\r\n          Country Wise Product Count</h2>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Select className='gx-select-md mr-15' defaultValue='Filed' onChange={handleChange}>\r\n            <Option value='Filed'>Filed</Option>\r\n            <Option value='Registered'>Registered</Option>\r\n            <Option value='status'>Future Quarter Status</Option>\r\n          </Select>\r\n\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['key', 'product_id'])), props.status === 'partner' ? 'country-wise-product-count' + '-Filed/Registered' : 'country-wise-product-count' + '-Future Quarter Status')}\r\n              disabled={props.loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table\r\n          className='gx-table-no-bordered'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          bordered={false}\r\n          size='small'\r\n          loading={props.loading}\r\n          scroll={{ y: 300 }} />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardCountryWiseProduct;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { countryProduct } from '../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardCountryWiseProduct from 'components/dashboardCountryWiseProduct/DashboardCountryWiseProduct'\r\n\r\nexport const AdminDashboardCountryProduct = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isCountryProductLoaded);\r\n    const List = useSelector(state => state.adminDashboard.country_product_count)\r\n\r\n    const [type, setType] = useState('Filed');\r\n    const [columns, setColumns] = useState([]);\r\n\r\n    useEffect(() => {\r\n        dispatch(countryProduct(type))\r\n    }, [type])\r\n\r\n    useEffect(() => {\r\n        if (type === 'Filed' || type === 'Registered') {\r\n            let temp_id = 0\r\n            let rowData = List.length ? List.map(\r\n                value => ({\r\n                    key: ++temp_id,\r\n                    country_name: value.country_name,\r\n                    product_id: value.product_id,\r\n                    product_name: value.product_name,\r\n                    no_of_partners: value.no_of_partners\r\n                })\r\n            ) : [];\r\n            setData(rowData)\r\n            const columns = [\r\n                {\r\n                    title: 'Country Name',\r\n                    dataIndex: 'country_name',\r\n                    key: 'country_name',\r\n                    fixed: 'left',\r\n                    width: 150\r\n                },\r\n                {\r\n                    title: 'Product Name',\r\n                    dataIndex: 'product_name',\r\n                    key: 'product_name',\r\n                    width: 100\r\n                },\r\n                {\r\n                    title: 'Number of Partners',\r\n                    dataIndex: 'no_of_partners',\r\n                    key: 'no_of_partners',\r\n                    width: 100\r\n                }\r\n            ]\r\n            setColumns(columns)\r\n        } else if (type === 'status') {\r\n            let temp_id = 0\r\n            let rowData = List.length ? List.map(\r\n                value => ({\r\n                    key: ++temp_id,\r\n                    country_name: value.country_name,\r\n                    product_id: value.product_id,\r\n                    product_name: value.product_name,\r\n                    status: value.status\r\n                })\r\n            ) : [];\r\n            setData(rowData)\r\n            const columns = [\r\n                {\r\n                    title: 'Country Name',\r\n                    dataIndex: 'country_name',\r\n                    key: 'country_name',\r\n                    fixed: 'left',\r\n                    width: 150\r\n                },\r\n                {\r\n                    title: 'Product Name',\r\n                    dataIndex: 'product_name',\r\n                    key: 'product_name',\r\n                    width: 100\r\n                },\r\n                {\r\n                    title: 'Status',\r\n                    dataIndex: 'status',\r\n                    key: 'status',\r\n                    width: 100\r\n                }\r\n            ]\r\n            setColumns(columns)\r\n        }\r\n    }, [isLoaded])\r\n\r\n    const updateStatus = (value) => {\r\n        setType(value)\r\n    }\r\n\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardCountryWiseProduct\r\n                loading={!isLoaded}\r\n                data={data}\r\n                columns={columns}\r\n                updateStatus={updateStatus}\r\n                status={type}\r\n            />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Table, Tooltip, Button } from 'antd';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { omit } from 'lodash';\r\n\r\nconst DashboardSalesProductWiseCompany = (props) => {\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            By Company</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              disabled={props.loading}\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['company_id','product_id','key'])), 'product-wise-company-sales')} >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }\r\n    >\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered'\r\n          loading={props.loading}\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesProductWiseCompany;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { productCompanySales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesProductWiseCompany from 'components/dashboardSalesProductWiseCompany/DashboardSalesProductWiseCompany'\r\nexport const AdminDashboardProductCompanySales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isProductCompanySalesLoaded = useSelector(state => state.adminDashboard.isProductCompanySalesLoaded);\r\n    const productCompanySalesList = useSelector(state => state.adminDashboard.product_company_sales)\r\n\r\n    useEffect(() => {\r\n        dispatch(productCompanySales())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = productCompanySalesList.length ? productCompanySalesList.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                product_id: value.product_id,\r\n                product_name: value.product_name,\r\n                company_id: value.company_id,\r\n                company_name: value.company_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isProductCompanySalesLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Product Name',\r\n            dataIndex: 'product_name',\r\n            key: 'product_name',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Company Name',\r\n            dataIndex: 'company_name',\r\n            key: 'company_name',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Sales = SUM(pack_size*quantity)',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Col span={12}  className='mb-30'>\r\n            <DashboardSalesProductWiseCompany loading={!isProductCompanySalesLoaded} data={data} columns={columns} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Select, Tooltip, Button,Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nconst Option = Select.Option\r\n\r\nconst DashboardSalesProductWisePeriod = (props) => {\r\n  const handleChange = (value) => {\r\n    props.updateStatus(value)\r\n  }\r\n  return (\r\n    <Widget styleName='gx-order-history min-height-520'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            Over Time</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'product-wise-sales-' + props.status)}\r\n              disabled={props.loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered mpp-list-table'\r\n          loading={props.loading}\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesProductWisePeriod;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { productPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesProductWisePeriod from '../../../../../../components/dashboardSalesProductWisePeriod/DashboardSalesProductWisePeriod';\r\n\r\nexport const AdminDashboardProductPeriodSales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isProductPeriodSalesLoaded = useSelector(state => state.adminDashboard.isProductPeriodSalesLoaded);\r\n    const productPeriodSalesList = useSelector(state => state.adminDashboard.product_period_sales)\r\n    const [period, setPeriod] = useState(\"period\");\r\n\r\n    useEffect(() => {\r\n        dispatch(productPeriodSales(period))\r\n    }, [period])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = productPeriodSalesList.length ? productPeriodSalesList.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                product_name: value.product_name,\r\n                year: value.year,\r\n                month: value.month,\r\n                quarter: value.quarter_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isProductPeriodSalesLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Product Name',\r\n            dataIndex: 'product_name',\r\n            key: 'product_name',\r\n            fixed: 'left',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Quarter',\r\n            dataIndex: 'quarter',\r\n            key: 'quarter',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n    const updateStatus = (value) => {\r\n        setPeriod(value)\r\n    }\r\n    return (\r\n        <Col span={12}  className='mb-30'>\r\n            <DashboardSalesProductWisePeriod status={period} loading={!isProductPeriodSalesLoaded} data={data} columns={columns} updateStatus={updateStatus} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Select, Tooltip, Button,Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\n\r\nconst DashboardSalesProductWiseCountry = (props) => {\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <h2 className='gx-text-capitalize gx-mb-0'>\r\n          In Countries</h2>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              disabled={props.loading}\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['product_id','country_id','key'])), 'product-wise-country-sales')} >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }\r\n    >\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered'\r\n          loading={props.loading}\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesProductWiseCountry;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { productCountrySales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesProductWiseCountry from 'components/dashboardSalesProductWiseCountry/DashboardSalesProductWiseCountry'\r\nexport const AdminDashboardProductCountrySales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isProductCountrySalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.product_country_sales)\r\n\r\n    useEffect(() => {\r\n        dispatch(productCountrySales())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                product_id: value.product_id,\r\n                product_name: value.product_name,\r\n                country_id: value.country_id,\r\n                country_name: value.country_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Product Name',\r\n            dataIndex: 'product_name',\r\n            key: 'product_name',\r\n            width:150\r\n        },\r\n        {\r\n            title: 'Country',\r\n            dataIndex: 'country_name',\r\n            key: 'country_name',\r\n            width:150\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width:150\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesProductWiseCountry loading={!isLoaded} data={data} columns={columns} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Table, Tooltip, Button } from 'antd';\r\nimport Widget from 'components/Widget/index';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { omit } from 'lodash';\r\n\r\nconst DashboardSalesCompanyWiseProduct = (props) => {\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            By Product</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              disabled={props.loading}\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['product_id','company_id','key'])), 'company-wise-product-sales')} >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }\r\n    >\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          loading={props.loading}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesCompanyWiseProduct;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { companyProductSales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesCompanyWiseProduct from '../../../../../../components/dashboardSalesCompanyWiseProduct/DashboardCompanyWiseProduct';\r\n\r\nexport const AdminDashboardCompanyProductSales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isCompanyProductSalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.company_product_sales)\r\n\r\n    useEffect(() => {\r\n        dispatch(companyProductSales())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                company_id: value.company_id,\r\n                company_name: value.company_name,\r\n                product_id: value.product_id,\r\n                product_name: value.product_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Company Name',\r\n            dataIndex: 'company_name',\r\n            key: 'company_name',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Product Name',\r\n            dataIndex: 'product_name',\r\n            key: 'product_name',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesCompanyWiseProduct loading={!isLoaded} data={data} columns={columns} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Select, Tooltip, Button,Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nconst Option = Select.Option\r\n\r\nconst DashboardSalesCompanyWisePeriod = (props) => {\r\n  const handleChange = (value) => {\r\n    props.updateStatus(value)\r\n  }\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            Over Time</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'company-wise-sales-' + props.status)}\r\n              disabled={props.loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered mpp-list-table'\r\n          loading={props.loading}\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesCompanyWisePeriod;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { companyPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesCompanyWisePeriod from '../../../../../../components/dashboardSalesCompanyWisePeriod/DashboardSalesCompanyWisePeriod';\r\n\r\nexport const AdminDashboardCompanyPeriodSales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isCompanyPeriodSalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.company_period_sales)\r\n    const [period, setPeriod] = useState('period');\r\n\r\n    useEffect(() => {\r\n        dispatch(companyPeriodSales(period))\r\n    }, [period])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                company_name: value.company_name,\r\n                year: value.year,\r\n                month: value.month,\r\n                quarter: value.quarter_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Company Name',\r\n            dataIndex: 'company_name',\r\n            key: 'company_name',\r\n            fixed: 'left',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Quarter',\r\n            dataIndex: 'quarter',\r\n            key: 'quarter',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n    const updateStatus = (value) => {\r\n        setPeriod(value)\r\n    }\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesCompanyWisePeriod status={period} data={data} loading={!isLoaded} columns={columns} updateStatus={updateStatus} />\r\n        </Col>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Table, Tooltip, Button } from 'antd';\r\nimport Widget from 'components/Widget/index';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { omit } from 'lodash';\r\n\r\nconst DashboardSalesCompanyWiseCountry = (props) => {\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            In Countries</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              disabled={props.loading}\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['country_id','key'])), 'company-wise-country-sales')} >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }\r\n    >\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          loading={props.loading}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesCompanyWiseCountry;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { companyCountrySales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesCompanyWiseCountry from '../../../../../../components/dashboardSalesCompanyWiseCountry/DashboardSalesCompanyWiseCountry';\r\n\r\nexport const AdminDashboardCompanyCountrySales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isCompanyCountrySalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.company_country_sales)\r\n\r\n    useEffect(() => {\r\n        dispatch(companyCountrySales())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                company_name: value.company_name,\r\n                country_id: value.country_id,\r\n                country_name: value.country_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Company',\r\n            dataIndex: 'company_name',\r\n            key: 'company_name',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Country',\r\n            dataIndex: 'country_name',\r\n            key: 'country_name',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesCompanyWiseCountry loading={!isLoaded} data={data} columns={columns} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Table, Tooltip, Button } from 'antd';\r\nimport Widget from 'components/Widget/index';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { omit } from 'lodash';\r\n\r\nconst DashboardSalesCountryWiseProduct = (props) => {\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            By Product</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              disabled={props.loading}\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['country_id','product_id','key'])), 'country-wise-product-sales')} >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }\r\n    >\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          loading={props.loading}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesCountryWiseProduct;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { countryProductSales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesCountryWiseProduct from '../../../../../../components/dashboardSalesCountryWiseProduct/DashboardSalesCountryWiseProduct';\r\n\r\nexport const AdminDashboardCountryProductSales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isCountryProductSalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.country_product_sales)\r\n\r\n    useEffect(() => {\r\n        dispatch(countryProductSales())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                country_id: value.country_id,\r\n                country_name: value.country_name,\r\n                product_id: value.product_id,\r\n                product_name: value.product_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Country',\r\n            dataIndex: 'country_name',\r\n            key: 'country_name',\r\n        },\r\n        {\r\n            title: 'Product Name',\r\n            dataIndex: 'product_name',\r\n            key: 'product_name',\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n        }\r\n    ]\r\n\r\n    return (\r\n\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesCountryWiseProduct loading={!isLoaded} data={data} columns={columns} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Select, Tooltip, Button,Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nconst Option = Select.Option\r\n\r\nconst DashboardSalesCountryWisePeriod = (props) => {\r\n  const handleChange = (value) => {\r\n    props.updateStatus(value)\r\n  }\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            Over Time</h2>\r\n        </div>\r\n      }\r\n      extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'country-wise-sales-' + props.status)}\r\n              disabled={props.loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered mpp-list-table'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          loading={props.loading}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesCountryWisePeriod;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { countryPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesCountryWisePeriod from '../../../../../../components/dashboardSalesCountryWisePeriod/DashboardSalesCountryWisePeriod';\r\n\r\nexport const AdminDashboardCountryPeriodSales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isCountryPeriodSalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.country_period_sales)\r\n    const [period, setPeriod] = useState(\"period\");\r\n\r\n    useEffect(() => {\r\n        dispatch(countryPeriodSales(period))\r\n    }, [period])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                country_name: value.country_name,\r\n                year: value.year,\r\n                month: value.month,\r\n                quarter: value.quarter_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Country Name',\r\n            dataIndex: 'country_name',\r\n            key: 'country_name',\r\n            fixed: 'left',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Quarter',\r\n            dataIndex: 'quarter',\r\n            key: 'quarter',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n    const updateStatus = (value) => {\r\n        setPeriod(value)\r\n    }\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesCountryWisePeriod status={period} loading={!isLoaded} data={data} columns={columns} updateStatus={updateStatus} />\r\n        </Col>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Table, Tooltip, Button } from 'antd';\r\nimport Widget from 'components/Widget/index';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { omit } from 'lodash';\r\n\r\nconst DashboardSalesCountryWiseCompany = (props) => {\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            By Company</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              disabled={props.loading}\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, ['country_id','key'])), 'country-wise-company-sales')} >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }\r\n    >\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          loading={props.loading}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesCountryWiseCompany;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { countryCompanySales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesCountryWiseCompany from 'components/dashboardSalesCountryWiseCompany/DashboardSalesCountryWiseCompany'\r\n\r\nexport const AdminDashboardCountryCompanySales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isCountryCompanySalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.country_company_sales)\r\n\r\n    useEffect(() => {\r\n        dispatch(countryCompanySales())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                country_id: value.country_id,\r\n                country_name: value.country_name,\r\n                company_name: value.company_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Country',\r\n            dataIndex: 'country_name',\r\n            key: 'country_name',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Company',\r\n            dataIndex: 'company_name',\r\n            key: 'company_name',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n\r\n    return (\r\n\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesCountryWiseCompany loading={!isLoaded} data={data} columns={columns} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Select, Tooltip, Button,Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nconst Option = Select.Option\r\n\r\nconst DashboardSalesPeriodWiseProduct = (props) => {\r\n  const handleChange = (value) => {\r\n    props.updateStatus(value)\r\n  }\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            By Product</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          \r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), props.status + '-wise-product-sales')}\r\n              disabled={props.loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n\r\n        </div>\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table\r\n          className='gx-table-no-bordered mpp-list-table'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          // pagination={{ pageSize: 20 }}\r\n          scroll={{ y: 300 }}\r\n          loading={props.loading}\r\n          bordered={false}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesPeriodWiseProduct;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { productPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesPeriodWiseProduct from '../../../../../../components/dashboardSalesPeriodWiseProduct/DashboardSalesPeriodWiseProduct';\r\n\r\nexport const AdminDashboardPeriodProductSales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isProductPeriodSalesLoaded = useSelector(state => state.adminDashboard.isProductPeriodSalesLoaded);\r\n    const productPeriodSalesList = useSelector(state => state.adminDashboard.product_period_sales)\r\n    const [period, setPeriod] = useState(\"period\");\r\n\r\n    useEffect(() => {\r\n        dispatch(productPeriodSales(period))\r\n    }, [period])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = productPeriodSalesList.length ? productPeriodSalesList.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                product_name: value.product_name,\r\n                year: value.year,\r\n                month: value.month,\r\n                quarter: value.quarter_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isProductPeriodSalesLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Product Name',\r\n            dataIndex: 'product_name',\r\n            key: 'product_name',\r\n            fixed: 'left',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Quarter',\r\n            dataIndex: 'quarter',\r\n            key: 'quarter',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n    const updateStatus = (value) => {\r\n        setPeriod(value)\r\n    }\r\n    return (\r\n        <Col span={12}  className='mb-30'>\r\n            <DashboardSalesPeriodWiseProduct status={period} loading={!isProductPeriodSalesLoaded} data={data} columns={columns} updateStatus={updateStatus} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Select, Tooltip, Button,Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nconst Option = Select.Option\r\n\r\nconst DashboardSalesPeriodWiseCompany = (props) => {\r\n  const handleChange = (value) => {\r\n    props.updateStatus(value)\r\n  }\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            By Company</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          \r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), props.status + '-wise-company-sales')}\r\n              disabled={props.loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered mpp-list-table'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          loading={props.loading}\r\n          bordered={false}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesPeriodWiseCompany;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { companyPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesPeriodWiseCompany from '../../../../../../components/dashboardSalesPeriodWiseCompany/DashboardSalesPeriodWiseCompany';\r\n\r\nexport const AdminDashboardPeriodCompanySales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isCompanyPeriodSalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.company_period_sales)\r\n    const [period, setPeriod] = useState('period');\r\n\r\n    useEffect(() => {\r\n        dispatch(companyPeriodSales(period))\r\n    }, [period])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                company_name: value.company_name,\r\n                year: value.year,\r\n                month: value.month,\r\n                quarter: value.quarter_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Company Name',\r\n            dataIndex: 'company_name',\r\n            key: 'company_name',\r\n            fixed: 'left',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Quarter',\r\n            dataIndex: 'quarter',\r\n            key: 'quarter',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n    const updateStatus = (value) => {\r\n        setPeriod(value)\r\n    }\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesPeriodWiseCompany status={period} data={data} loading={!isLoaded} columns={columns} updateStatus={updateStatus} />\r\n        </Col>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Select, Tooltip, Button,Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nconst Option = Select.Option\r\n\r\nconst DashboardSalesPeriodWiseCountry = (props) => {\r\n  const handleChange = (value) => {\r\n    props.updateStatus(value)\r\n  }\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            By Country</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          \r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), props.status + '-wise-country-sales')}\r\n              disabled={props.loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered mpp-list-table'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          loading={props.loading}\r\n          bordered={false}\r\n          size='small'\r\n        />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesPeriodWiseCountry;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { countryPeriodSales } from '../../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesPeriodWiseCountry from 'components/dashboardSalesPeriodWiseCountry/DashboardSalesPeriodWiseCountry'\r\n\r\nexport const AdminDashboardPeriodCountrySales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isCountryPeriodSalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.country_period_sales)\r\n    const [period, setPeriod] = useState(\"period\");\r\n\r\n    useEffect(() => {\r\n        dispatch(countryPeriodSales(period))\r\n    }, [period])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                country_name: value.country_name,\r\n                year: value.year,\r\n                month: value.month,\r\n                quarter: value.quarter_name,\r\n                total_value: value.total_value\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Country Name',\r\n            dataIndex: 'country_name',\r\n            key: 'country_name',\r\n            fixed: 'left',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Quarter',\r\n            dataIndex: 'quarter',\r\n            key: 'quarter',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Sales',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n    const updateStatus = (value) => {\r\n        setPeriod(value)\r\n    }\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesPeriodWiseCountry status={period} loading={!isLoaded} data={data} columns={columns} updateStatus={updateStatus} />\r\n        </Col>\r\n\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Select, Tooltip, Button,Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nconst Option = Select.Option\r\n\r\nconst DashboardSalesPricePerPack = (props) => {\r\n  const handleChange = (value) => {\r\n    props.updateStatus(value)\r\n  }\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            Price Per Pack By Time Period</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'price-per-pack-' + props.status)}\r\n              disabled={props.loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered mpp-list-table'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          loading={props.loading}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesPricePerPack;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { packPeriodSales } from '../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesPricePerPack from 'components/dashboardSalesPricePerPack/DashboardSalesPricePerPack'\r\n\r\nexport const AdminDashboardPackPeriodSales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isPackPeriodSalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.pack_period_sales)\r\n    const [period, setPeriod] = useState(\"period\");\r\n\r\n    \r\n    useEffect(() => {\r\n        dispatch(packPeriodSales(period))\r\n    }, [period])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                price_per_pack: Number(value.price_per_pack),\r\n                year: value.year,\r\n                month: value.month,\r\n                quarter: value.quarter_name\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Price per pack',\r\n            dataIndex: 'price_per_pack',\r\n            key: 'price_per_pack',\r\n            fixed: 'left',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Quarter',\r\n            dataIndex: 'quarter',\r\n            key: 'quarter',\r\n            width: 150\r\n        },\r\n    ]\r\n    const updateStatus = (value) => {\r\n        setPeriod(value)\r\n    }\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesPricePerPack status={period} loading={!isLoaded} data={data} columns={columns} updateStatus={updateStatus} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport Widget from 'components/Widget/index';\r\nimport { Select, Tooltip, Button,Table } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { exportToXLXS } from '../../helpers';\r\nimport { omit } from 'lodash';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nconst Option = Select.Option\r\n\r\nconst DashboardSalesPricePerTreatment = (props) => {\r\n  const handleChange = (value) => {\r\n    props.updateStatus(value)\r\n  }\r\n  return (\r\n    <Widget styleName='gx-order-history dashboard-min-height'\r\n      title={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <h2 className='gx-text-capitalize line-height-27'>\r\n            Price Per Treatment By Time Period</h2>\r\n        </div>\r\n      } extra={\r\n        <div className='gx-flex-row gx-align-items-center'>\r\n          <Tooltip title={<IntlMessages id='report.download' />}>\r\n            <Button\r\n              className='mr-0 mb-0'\r\n              onClick={() => exportToXLXS(props.data.map(val => omit(val, 'key')), 'price-per-treatment-' + props.status)}\r\n              disabled={props.loading}\r\n            >\r\n              <DownloadOutlined className='font-20' />\r\n            </Button>\r\n          </Tooltip>\r\n        </div>\r\n      }>\r\n      <div className='gx-table-responsive'>\r\n        <Table className='gx-table-no-bordered mpp-list-table'\r\n          columns={props.columns}\r\n          dataSource={props.data}\r\n          scroll={{ y: 300 }}\r\n          bordered={false}\r\n          loading={props.loading}\r\n          size='small' />\r\n      </div>\r\n    </Widget>\r\n  );\r\n};\r\n\r\nexport default DashboardSalesPricePerTreatment;\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { treatmentPeriodSales } from '../../../../../appRedux/actions/AdminDashboard'\r\nimport { Col } from 'antd';\r\nimport DashboardSalesPricePerTreatment from 'components/dashboardSalesPricePerTreatment/DashboardSalesPricePerTreatment'\r\n\r\nexport const AdminDashboardTreatmentPeriodSales = (props) => {\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    const isLoaded = useSelector(state => state.adminDashboard.isTreatmentPeriodSalesLoaded);\r\n    const List = useSelector(state => state.adminDashboard.treatment_period_sales)\r\n    const [period, setPeriod] = useState(\"period\");\r\n\r\n    const [showName, setShowName] = useState();\r\n    const [varName, setVarName] = useState();\r\n\r\n    useEffect(() => {\r\n        dispatch(treatmentPeriodSales(period))\r\n    }, [period])\r\n\r\n    useEffect(() => {\r\n        let temp_id = 0\r\n        let rowData = List.length ? List.map(\r\n            value => ({\r\n                key: ++temp_id,\r\n                price_per_treatment: Number(value.price_per_treatment),\r\n                year: value.year,\r\n                month: value.month,\r\n                quarter: value.quarter_name,\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Price per treatment',\r\n            dataIndex: 'price_per_treatment',\r\n            key: 'price_per_treatment',\r\n            fixed: 'left',\r\n            width: 150,\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Quarter',\r\n            dataIndex: 'quarter',\r\n            key: 'quarter',\r\n            width: 150\r\n        },\r\n    ]\r\n    const updateStatus = (value) => {\r\n        setPeriod(value)\r\n    }\r\n    return (\r\n        <Col span={12} className='mb-30'>\r\n            <DashboardSalesPricePerTreatment status={period} loading={!isLoaded} data={data} columns={columns} updateStatus={updateStatus} />\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useState, useEffect } from 'react';\r\nimport { adminDashboardSummary, bulkReminderMail } from '../../../../appRedux/actions/AdminDashboard'\r\nimport { Table, Col, Button, Select, Tooltip } from 'antd';\r\nimport Widget from 'components/Widget/index';\r\nimport { BarChartOutlined, BellOutlined, FileSearchOutlined } from '@ant-design/icons';\r\nimport { getQuarter } from '../../../../helpers';\r\n\r\nconst { Option } = Select\r\n\r\nexport const AdminDashboardSummary = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const List = useSelector(state => state.adminDashboard.admin_dashboard_summary)\r\n    const isLoaded = useSelector(state => state.adminDashboard.isAdminDashboardSummaryLoaded);\r\n\r\n    const [type, setType] = useState('all_three_submitted');\r\n    const [data, setData] = useState([]);\r\n    const [columns, setColumns] = useState();\r\n    const [showName, setShowName] = useState();\r\n\r\n    useEffect(() => {\r\n        dispatch(adminDashboardSummary(type))\r\n        if (type === 'all_three_submitted') { setShowName('View Report'); }\r\n        if (type === 'not_submitted') { setShowName('Reminder'); }\r\n        if (type === 'saved_but_not_submitted') { setShowName('Reminder'); }\r\n        if (type === 'submitted_not_approved') { setShowName('View Report'); }\r\n    }, [type])\r\n\r\n    useEffect(() => {\r\n        if (isLoaded) {\r\n            let columnData, rowData = []\r\n            if (type === 'all_three_submitted') {\r\n                let temp_id = 0\r\n                rowData = List.length ? List.map(\r\n                    value => {\r\n                        return {\r\n                            key: ++temp_id,\r\n                            company_name: value.partner.company_name,\r\n                            company_email: value.email,\r\n                            [showName]: { 'partner_id': value.partner.partner_id }\r\n                        }\r\n                    }\r\n                ) : [];\r\n                columnData = [\r\n                    {\r\n                        title: 'Company Name',\r\n                        dataIndex: 'company_name',\r\n                        key: 'company_name',\r\n                    },\r\n                    {\r\n                        title: 'Company Email',\r\n                        dataIndex: 'company_email',\r\n                        key: 'company_email',\r\n                    },\r\n                    {\r\n                        title: showName,\r\n                        dataIndex: showName,\r\n                        key: showName,\r\n                        render: (data) => {\r\n                            return (\r\n\r\n                                <>\r\n                                    <div className='gx-flex-row gx-align-items-center font-20'>\r\n                                        <Tooltip title='PDT'>\r\n                                            <i onClick={() => navigateToPdt(data.partner_id)} className='icon icon-timeline color-blue' />\r\n                                        </Tooltip>\r\n                                        <Tooltip\r\n                                            title='Filing Plans'\r\n                                        >\r\n                                            <FileSearchOutlined onClick={() => navigateToFilingPlans(data.partner_id)} className='font-20 color-blue mr-20 ml-20' />\r\n                                        </Tooltip>\r\n                                        <Tooltip title='Sales report'>\r\n                                            <BarChartOutlined onClick={() => navigateToSalesReport(data.partner_id)} className='font-20 color-blue' />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                </>\r\n                            )\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n            else if (type === 'submitted_not_approved') {\r\n                let temp_id = 0\r\n                rowData = List.length ? List.map(\r\n                    value => {\r\n                        return {\r\n                            key: ++temp_id,\r\n                            company_name: value.partner.company_name,\r\n                            company_email: value.email,\r\n                            [showName]: { 'partner_id': value.partner.partner_id, 'template_data': value.partner.template_data }\r\n                        }\r\n                    }\r\n                ) : [];\r\n                columnData = [\r\n                    {\r\n                        title: 'Company Name',\r\n                        dataIndex: 'company_name',\r\n                        key: 'company_name',\r\n                    },\r\n                    {\r\n                        title: 'Company Email',\r\n                        dataIndex: 'company_email',\r\n                        key: 'company_email',\r\n                    },\r\n                    {\r\n                        title: showName,\r\n                        dataIndex: showName,\r\n                        key: showName,\r\n                        render: (data) => {\r\n                            let showPDT = false\r\n                            let showFilingPlan = false\r\n                            let showSales = false\r\n                            const template_data = data.template_data\r\n                            template_data.map(obj => {\r\n\r\n                                if (obj !== null) {\r\n                                    if (obj.template_type === 'pdt' && obj.is_approved !== true) {\r\n                                        showPDT = true\r\n                                    }\r\n\r\n                                    if (obj.template_type === 'filing plan' && obj.is_approved !== true) {\r\n                                        showFilingPlan = true\r\n                                    }\r\n\r\n                                    if (obj.template_type === 'sales' && obj.is_approved !== true) {\r\n                                        showSales = true\r\n                                    }\r\n                                }\r\n                            })\r\n\r\n                            return (\r\n                                <>\r\n                                    <div className='gx-flex-row gx-align-items-center font-20'>\r\n                                        {\r\n                                            showPDT ?\r\n                                                <Tooltip title='PDT'>\r\n                                                    <i onClick={() => navigateToPdt(data.partner_id)} className='icon icon-timeline color-blue mr-20' />\r\n                                                </Tooltip> : null\r\n                                        }\r\n                                        {\r\n                                            showFilingPlan ?\r\n                                                <Tooltip\r\n                                                    title='Filing Plans'\r\n                                                >\r\n                                                    <FileSearchOutlined onClick={() => navigateToFilingPlans(data.partner_id)} className='font-20 color-blue mr-20' />\r\n                                                </Tooltip> : null\r\n                                        }\r\n                                        {\r\n                                            showSales ?\r\n                                                <Tooltip title='Sales report'>\r\n                                                    <BarChartOutlined onClick={() => navigateToSalesReport(data.partner_id)} className='font-20 color-blue' />\r\n                                                </Tooltip> : null\r\n                                        }\r\n                                    </div>\r\n                                </>\r\n                            )\r\n                        }\r\n                    }\r\n                ]\r\n            } else {\r\n                let temp_id = 0\r\n                rowData = List.length ? List.map(\r\n                    value => {\r\n                        return {\r\n                            key: ++temp_id,\r\n                            company_name: value.partner.company_name,\r\n                            company_email: value.email\r\n                        }\r\n                    }\r\n                ) : [];\r\n                columnData = [\r\n                    {\r\n                        title: 'Company Name',\r\n                        dataIndex: 'company_name',\r\n                        key: 'company_name',\r\n                    },\r\n                    {\r\n                        title: 'Company Email',\r\n                        dataIndex: 'company_email',\r\n                        key: 'company_email',\r\n                    },\r\n                ]\r\n            }\r\n            setData(rowData)\r\n            setColumns(columnData)\r\n        }\r\n    }, [isLoaded])\r\n\r\n    const navigateToPdt = (item) => {\r\n        props.history.push('/admin/development-timeline/' + item)\r\n    }\r\n\r\n    const navigateToFilingPlans = (item) => {\r\n        props.history.push('/admin/filing-plans/' + item)\r\n    }\r\n\r\n    const navigateToSalesReport = (item) => {\r\n        props.history.push('/admin/sales-report/' + item)\r\n    }\r\n\r\n    const handleChange = (value) => {\r\n        setType(value)\r\n    }\r\n\r\n    const sendEmail = () => {\r\n        let temp = []\r\n        if (type === 'not_submitted' || type === 'saved_but_not_submitted') {\r\n            if (List.length > 0) {\r\n                List.map(value => {\r\n                    let not_submitted = []\r\n                    const template_data = value.partner.template_data\r\n                    if (template_data.length < 1) {\r\n                        not_submitted = ['pdt', 'filing plan', 'sales']\r\n                    } else {\r\n                        template_data.map(obj => {\r\n                            if (obj !== null) {\r\n                                if (obj.report_status !== 'Submitted' && obj.report_status !== 'Approved') {\r\n                                    not_submitted.push(obj.template_type)\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    temp.push({\r\n                        'email_id': value.email,\r\n                        'not_submitted': not_submitted\r\n                    })\r\n                })\r\n            }\r\n        }\r\n        dispatch(bulkReminderMail({ 'data': temp }))\r\n    }\r\n\r\n    return (\r\n        <Col xs={24} className='mb-30'>\r\n            <Widget styleName='gx-order-history dashboard-min-height'\r\n                title={\r\n                    <div className='gx-flex-row gx-align-items-center'>\r\n                        <h2 className='gx-text-capitalize line-height-27 mb-0'>\r\n                            {getQuarter() ? 'Admin Dashboard Summary for ' + '(' + getQuarter() + ')' : 'Admin Dashboard Summary'}\r\n\r\n                        </h2>\r\n                        <Select className='gx-select-md ml-20' defaultValue='all_three_submitted' onChange={handleChange}>\r\n                            <Option value='all_three_submitted'>All data submitted</Option>\r\n                            <Option value='not_submitted'>Yet to submit data</Option>\r\n                            <Option value='saved_but_not_submitted'>Saved but not submitted data</Option>\r\n                            <Option value='submitted_not_approved'>Submitted but not approved</Option>\r\n                        </Select>\r\n                    </div>\r\n                }\r\n                extra={\r\n                    <div className='gx-flex-row gx-align-items-center'>\r\n                        {\r\n                            type === 'not_submitted' || type === 'saved_but_not_submitted' ?\r\n                                <Button\r\n                                    type='primary'\r\n                                    className='mb-0'\r\n                                    onClick={sendEmail}\r\n                                    disabled={!isLoaded}\r\n                                >\r\n                                    <BellOutlined /> Send Reminder\r\n                                </Button>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                }>\r\n                <div\r\n                    className='gx-table-responsive'\r\n                >\r\n                    <Table\r\n                        className='gx-table-no-bordered mpp-list-table'\r\n                        columns={columns}\r\n                        dataSource={data}\r\n                        bordered={false}\r\n                        size='small'\r\n                        loading={!isLoaded}\r\n                    />\r\n                </div>\r\n            </Widget>\r\n        </Col>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Row, Tabs } from 'antd';\r\nimport {\r\n    AdminDashboardProjectCount,\r\n    AdminDashboardProductCompanyCount,\r\n    AdminDashboardProductCountryCount,\r\n    AdminDashboardCompanyCount,\r\n    AdminDashboardCountryProduct,\r\n    AdminDashboardProductCompanySales,\r\n    AdminDashboardProductPeriodSales,\r\n    AdminDashboardProductCountrySales,\r\n    AdminDashboardCompanyProductSales,\r\n    AdminDashboardCompanyPeriodSales,\r\n    AdminDashboardCompanyCountrySales,\r\n    AdminDashboardCountryProductSales,\r\n    AdminDashboardCountryPeriodSales,\r\n    AdminDashboardCountryCompanySales,\r\n    AdminDashboardPeriodProductSales,\r\n    AdminDashboardPeriodCountrySales,\r\n    AdminDashboardPeriodCompanySales,\r\n    AdminDashboardPackPeriodSales,\r\n    AdminDashboardTreatmentPeriodSales,\r\n    AdminDashboardSummary\r\n\r\n} from './dashboard-tables'\r\n\r\nimport './admin-dashboard.css'\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst AdminDashboard = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <div className='gx-flex-row gx-align-items-center gx-justify-content-between'>\r\n                <h1 className='title gx-mb-4'>Dashboard</h1>\r\n            </div>\r\n            <Tabs\r\n                tabPosition='top'\r\n                type='card'\r\n            >\r\n                <TabPane tab='Summary' key='1'>\r\n                    <Row>\r\n                        <AdminDashboardSummary history={props.history} />\r\n                    </Row>\r\n                </TabPane>\r\n                <TabPane tab='Product / Project' key='2'>\r\n                    <Row>\r\n                        <AdminDashboardProjectCount />\r\n                        <AdminDashboardProductCompanyCount />\r\n                        <AdminDashboardCompanyCount />\r\n                    </Row>\r\n                </TabPane>\r\n\r\n                <TabPane tab='Country Filings' key='3'>\r\n                    <Row>\r\n                        <AdminDashboardProductCountryCount />\r\n                        <AdminDashboardCountryProduct />\r\n                    </Row>\r\n                </TabPane>\r\n\r\n                <TabPane tab='Sales by Product' key='4'>\r\n                    <Row>\r\n                        <AdminDashboardProductCompanySales />\r\n                        <AdminDashboardProductPeriodSales />\r\n                        <AdminDashboardProductCountrySales />\r\n                    </Row>\r\n                </TabPane>\r\n                <TabPane tab='Sales by Company' key='5'>\r\n                    <Row>\r\n                        <AdminDashboardCompanyProductSales />\r\n                        <AdminDashboardCompanyPeriodSales />\r\n                        <AdminDashboardCompanyCountrySales />\r\n                    </Row>\r\n                </TabPane>\r\n                <TabPane tab='Sales by Country' key='6'>\r\n                    <Row>\r\n                        <AdminDashboardCountryProductSales />\r\n                        <AdminDashboardCountryPeriodSales />\r\n                        <AdminDashboardCountryCompanySales />\r\n                    </Row>\r\n                </TabPane>\r\n                <TabPane tab='Sales over Time' key='7'>\r\n                    <Row>\r\n                        <AdminDashboardPeriodProductSales />\r\n                        <AdminDashboardPeriodCountrySales />\r\n                        <AdminDashboardPeriodCompanySales />\r\n                    </Row>\r\n                </TabPane>\r\n                <TabPane tab='Price' key='8'>\r\n                    <Row>\r\n                        <AdminDashboardPackPeriodSales />\r\n                        <AdminDashboardTreatmentPeriodSales />\r\n                    </Row>\r\n                </TabPane>\r\n            </Tabs>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AdminDashboard","import { partnerDashboardConstants } from '../../constants';\r\nimport { getPartnerDashboard } from '../../services';\r\nimport { hideLoader, showLoader } from './Loader';\r\n\r\nexport const getPartnerDashboardAction = () => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: partnerDashboardConstants.GET_DASHBOARD_REQUEST });\r\n        getPartnerDashboard().then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: partnerDashboardConstants.GET_DASHBOARD_SUCCESS, data: response ? response : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(showLoader());\r\n                dispatch({ type: partnerDashboardConstants.GET_DASHBOARD_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n","import { config } from '../constants';\r\nimport { authHeader } from '../helpers';\r\nimport { handleResponse } from './handle-response';\r\n\r\nexport const getPartnerDashboard = () => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/partner/dashboard/`, requestOptions)\r\n        .then(handleResponse)\r\n}","import React from 'react';\r\nimport Widget from 'components/Widget';\r\nimport { Col } from 'antd';\r\nimport { FileSearchOutlined, BarChartOutlined } from '@ant-design/icons'\r\nimport moment from 'moment';\r\nimport './template-tile.css'\r\n\r\nconst TemplateTile = (props) => {\r\n  const navigate = () => {\r\n    const { template_type } = props.data\r\n    if (template_type == 'pdt') {\r\n      props.history.push('/partner/development-timeline')\r\n    }\r\n    else if (template_type === 'filing plan') {\r\n      props.history.push('/partner/filing-plans')\r\n    }\r\n    else if (template_type === 'sales') {\r\n      props.history.push('/partner/sales-report')\r\n    }\r\n\r\n  }\r\n  const { template_type, report_status, no_of_days_to_submit, last_message } = props.data\r\n\r\n  return (\r\n    <Col span={8} onClick={navigate} className='tile-hover'>\r\n      <Widget  >\r\n        <div className='gx-flex-column template-tile-icon'>\r\n          {\r\n            template_type === 'pdt' ?\r\n              <span className='font-45'><i className='icon icon-timeline mb-20 color-purple' /></span> :\r\n              template_type === 'filing plan' ?\r\n                <FileSearchOutlined className='color-purple font-40' /> :\r\n                <BarChartOutlined className='color-purple font-40' />\r\n          }\r\n          <h3 className='color-purple mb-30'>\r\n            {\r\n              template_type === 'pdt' ?\r\n                'Product Development Timeline' :\r\n                template_type === 'filing plan' ?\r\n                  'Filing Plan' :\r\n                  'Sales Report'\r\n            }\r\n          </h3>\r\n        </div>\r\n        <div key={props.key} className='gx-media gx-align-items-center gx-flex-nowrap gx-pro-contact-list'>\r\n          <div className='gx-media-body'>\r\n            <p className='gx-fs-lg color-black'>For Quarter: <span className='gx-mb-0 gx-fs-lg color-gray'>\r\n              {props.quarter ? props.quarter : '---'}</span></p>\r\n            <p className='gx-fs-lg color-black'>Last Date of Submission:\r\n            <span className='gx-mb-0 gx-fs-lg color-red'>{no_of_days_to_submit ? ' ' + moment(no_of_days_to_submit).format('Do MMM YYYY') : '---'}</span>\r\n            </p>\r\n            <p className='gx-fs-lg color-black'>Report Status:<span className={\r\n              report_status === 'Approved' ? 'gx-mb-0 gx-fs-lg color-green' :\r\n                report_status === 'Rejected' ? 'gx-mb-0 gx-fs-lg color-red' : 'gx-mb-0 gx-fs-lg color-blue'\r\n            }> {report_status}</span>\r\n            </p>\r\n            <p className='gx-fs-lg color-black'>Last Message: <span className='gx-mb-0 gx-fs-lg color-gray'>\r\n              {last_message ? last_message : '---'}</span></p>\r\n          </div>\r\n        </div>\r\n      </Widget>\r\n    </Col>\r\n  )\r\n}\r\n\r\nexport default TemplateTile;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { Card, Row, Empty } from 'antd';\r\nimport { getPartnerDashboardAction } from '../../../appRedux/actions/PartnerDashboard';\r\nimport TemplateTile from 'components/TemplateTile';\r\n\r\nimport './partner-dashboard.css'\r\nimport { getQuarter } from '../../../helpers';\r\n\r\nconst PartnerDashboard = (props) => {\r\n\r\n    const { isLoaded, partnerList } = useSelector(({ partnerDashboard }) => partnerDashboard);\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getPartnerDashboardAction());\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isLoaded) {\r\n            setData(partnerList)\r\n        }\r\n    }, [isLoaded, partnerList])\r\n\r\n    return (\r\n        <div>\r\n            <div className='gx-flex-row gx-align-items-center gx-justify-content-between'>\r\n                <h1 className='title gx-mb-4'><IntlMessages id='sidebar.partnerDashboard' /></h1>\r\n            </div>\r\n            {\r\n                data && data.length > 0 ?\r\n                    <Row>\r\n                        {\r\n                            data.map((value, index) => <TemplateTile quarter={getQuarter()} data={value} history={props.history} key={index} />)\r\n                        }\r\n                    </Row>\r\n                    :\r\n                    <Card>\r\n                        <Empty description='No data available!' />\r\n                    </Card>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PartnerDashboard","import { adminPartnerConstants } from '../../constants';\r\nimport { hideLoader, showLoader } from './Loader';\r\nimport { addPartner, deletePartner, editPartner, getPartner, getPartnerList, getRegionList, getReportCutOffDate, sendReportReminder, setReportCutOffDate } from '../../services';\r\nimport { showMessage } from '../../helpers'\r\n\r\nexport const adminAddPartner = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminPartnerConstants.ADD_PARTNER_REQUEST });\r\n        addPartner(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.ADD_PARTNER_SUCCESS });\r\n                showMessage('success', 'Partner added succcessfully!');\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.ADD_PARTNER_FAILURE });\r\n                let errorMsg = error && error.error ? error.error.filter(\r\n                    (value) => value !== 'None'\r\n                ) : ''\r\n                if (errorMsg.length) {\r\n                    showMessage('error', errorMsg[0]);\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const adminEditPartner = (id, data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminPartnerConstants.EDIT_PARTNER_REQUEST });\r\n        editPartner(id, data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.EDIT_PARTNER_SUCCESS });\r\n                showMessage('success', 'Partner edited succcessfully!');\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.EDIT_PARTNER_FAILURE });\r\n                let errorMsg = error && error.error ? error.error.filter(\r\n                    (value) => value !== 'None'\r\n                ) : ''\r\n                if (errorMsg.length) {\r\n                    showMessage('error', errorMsg[0]);\r\n                }\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminPartnerList = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminPartnerConstants.GET_PARTNER_LIST_REQUEST });\r\n        getPartnerList().then(\r\n            response => {\r\n                dispatch({ type: adminPartnerConstants.GET_PARTNER_LIST_SUCCESS, data: response ? response : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminPartnerConstants.GET_PARTNER_LIST_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminSinglePartner = (id, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminPartnerConstants.GET_PARTNER_REQUEST });\r\n        getPartner(id).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.GET_PARTNER_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.GET_PARTNER_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const deleteAdminSinglePartner = (id, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminPartnerConstants.DELETE_PARTNER_REQUEST });\r\n        deletePartner(id).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.DELETE_PARTNER_SUCCESS });\r\n                showMessage('success', 'Partner successfully removed!')\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.DELETE_PARTNER_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const adminSendReminder = (id, type, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminPartnerConstants.SEND_REMINDER_REQUEST });\r\n        sendReportReminder(id, type).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.SEND_REMINDER_SUCCESS });\r\n                showMessage('success', 'Reminder sent!');\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.SEND_REMINDER_FAILURE });\r\n                console.log('error', error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const resetEditPartner = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminPartnerConstants.RESET_EDIT_PARTNER });\r\n    }\r\n}\r\n\r\nexport const getAdminCountryList = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminPartnerConstants.GET_COUNTRY_LIST_REQUEST });\r\n        getRegionList().then(\r\n            response => {\r\n                dispatch({ type: adminPartnerConstants.GET_COUNTRY_LIST_SUCCESS, data: response ? response : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminPartnerConstants.GET_COUNTRY_LIST_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const adminSetCutOffDate = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminPartnerConstants.SET_CUT_OFF_DATE_REQUEST });\r\n        setReportCutOffDate(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.SET_CUT_OFF_DATE_SUCCESS });\r\n                showMessage('success', 'Submission Date set successfully!')\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminPartnerConstants.SET_CUT_OFF_DATE_FAILURE });\r\n                console.log('error', error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const adminGetCutOffDate = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminPartnerConstants.GET_CUT_OFF_DATE_REQUEST });\r\n        getReportCutOffDate().then(\r\n            response => {\r\n                dispatch({ type: adminPartnerConstants.GET_CUT_OFF_DATE_SUCCESS, data: response ? response : {} });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminPartnerConstants.GET_CUT_OFF_DATE_FAILURE });\r\n                console.log('error', error)\r\n            }\r\n        )\r\n    }\r\n}","import { config } from '../constants';\r\nimport { authHeader } from '../helpers';\r\nimport { handleResponse } from './handle-response';\r\n\r\n\r\nexport const addPartner = (data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/partner/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const editPartner = (id, data) => {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/partner/${id}/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getPartnerList = () => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/partner/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getPartner = (id) => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/partner/${id}/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const deletePartner = (id) => {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/partner/${id}/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\n\r\nexport const sendReportReminder = (partner_id, template_type) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ partner_id, template_type })\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/reminder/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\n\r\nexport const getRegionList = () => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/country_list/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\n\r\nexport const setReportCutOffDate = ({ date }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ date })\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/cut_off_date/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getReportCutOffDate = () => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/cut_off_date/`, requestOptions)\r\n        .then(handleResponse)\r\n}","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { Card, Table, Row, Col, Button, Checkbox, Space, Input, Tag, Tooltip } from 'antd';\r\nimport { SearchOutlined, InfoCircleTwoTone, EyeTwoTone, BellTwoTone, CheckCircleTwoTone, CloseCircleTwoTone, EditTwoTone, DeleteTwoTone, UsergroupAddOutlined } from '@ant-design/icons';\r\nimport { adminSendReminder, deleteAdminSinglePartner, getAdminPartnerList } from '../../../appRedux/actions/AdminPartner';\r\nimport { findIndex, has } from 'lodash';\r\nimport moment from 'moment';\r\n\r\nimport './partner-list.css'\r\nimport { showConfirm } from '../../../helpers';\r\n\r\nconst PartnerList = (props) => {\r\n\r\n    const isLoaded = useSelector(state => state.adminPartner.isLoaded);\r\n    const adminPartnerList = useSelector(state => state.adminPartner.partnerList);\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n    const [searchedColumn, setSearchedColumn] = useState('');\r\n    const searchInput = useRef();\r\n\r\n    useEffect(() => {\r\n        dispatch(getAdminPartnerList());\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isLoaded) {\r\n            let rowData = adminPartnerList.length ? adminPartnerList.filter(\r\n                value => value.partner\r\n            ).map(\r\n                value => ({\r\n                    key: value.partner.partner_id,\r\n                    name: value.partner.company_name,\r\n                    email: value.email,\r\n                    active_products: value.partner.active_products,\r\n                    pdt: getTemplateData(value.partner.template_data, 'pdt', value.partner.partner_id),\r\n                    filing_plans: getTemplateData(value.partner.template_data, 'filing plan', value.partner.partner_id),\r\n                    sales_report: getTemplateData(value.partner.template_data, 'sales', value.partner.partner_id),\r\n                })\r\n            ) : [];\r\n            setData(rowData)\r\n        }\r\n    }, [isLoaded])\r\n\r\n    const getTemplateData = (templateList, type, partner_id) => {\r\n        let templateData = templateList[findIndex(templateList, { template_type: type })];\r\n        return templateData ? { ...templateData, partner_id } : { partner_id }\r\n    }\r\n\r\n    const navigateToAddPartner = () => {\r\n        const { history } = props;\r\n        history.push('/admin/add-partner')\r\n    }\r\n\r\n    const navigateToContent = (item) => {\r\n        props.history.push('/admin/edit-partner/' + item.key)\r\n    }\r\n\r\n    const navigateToPdt = (item) => {\r\n        props.history.push('/admin/development-timeline/' + item)\r\n    }\r\n\r\n    const navigateToFilingPlans = (item) => {\r\n        props.history.push('/admin/filing-plans/' + item)\r\n    }\r\n\r\n    const navigateToSalesReport = (item) => {\r\n        props.history.push('/admin/sales-report/' + item)\r\n    }\r\n\r\n    const handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n        confirm();\r\n        setSearchedColumn(dataIndex);\r\n    };\r\n\r\n    const handleReset = clearFilters => {\r\n        clearFilters();\r\n    };\r\n\r\n    const getColumnSearchProps = dataIndex => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    ref={searchInput}\r\n                    placeholder={`Search ${dataIndex}`}\r\n                    value={selectedKeys[0]}\r\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                    onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n                />\r\n                <Space>\r\n                    <Button\r\n                        type='primary'\r\n                        onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\r\n                        icon={<SearchOutlined />}\r\n                        size='small'\r\n                        style={{ width: 90 }}\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                    <Button onClick={() => handleReset(clearFilters)} size='small' style={{ width: 90 }}>\r\n                        Reset\r\n                    </Button>\r\n                </Space>\r\n            </div>\r\n        ),\r\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n        onFilter: (value, record) =>\r\n            record[dataIndex]\r\n                ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n                : '',\r\n        onFilterDropdownVisibleChange: visible => {\r\n            if (visible) {\r\n                // setTimeout(() => this.searchInput.select(), 100);\r\n            }\r\n        },\r\n        render: text =>\r\n            searchedColumn === dataIndex ? (\r\n                text\r\n            ) : (\r\n                    text\r\n                ),\r\n    });\r\n\r\n    const setColumns = () => {\r\n        let columns = [{\r\n            title: 'Company Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            ...getColumnSearchProps('name'),\r\n            sorter: (a, b) => a.name.localeCompare(b.name),\r\n            width: 200,\r\n            render: name => <span className='gx-text-capitalize'>{name}</span>\r\n        }, {\r\n            title: 'Email',\r\n            dataIndex: 'email',\r\n            key: 'email',\r\n            width: 140\r\n        }, {\r\n            title: 'Active Products',\r\n            dataIndex: 'active_products',\r\n            key: 'active_products',\r\n            width: 240,\r\n            render: products => (\r\n                <>\r\n                    {products.map(\r\n                        value => <Tag key={value.product_id}>{value.product_name}</Tag>\r\n                    )}\r\n                </>\r\n            )\r\n        }, {\r\n            title: (<h5 className='mb-0'>Product Development Timeline</h5>),\r\n            dataIndex: 'pdt',\r\n            key: 'pdt',\r\n            align: 'center',\r\n            width: 140,\r\n            render: (data) => renderTemplateData(\r\n                data,\r\n                () => navigateToPdt(data.partner_id),\r\n                () => dispatch(adminSendReminder(data.partner_id, 'PDT'))\r\n            )\r\n        }, {\r\n            title: (<h5 className='mb-0'>Filing Plans</h5>),\r\n            dataIndex: 'filing_plans',\r\n            key: 'filing_plans',\r\n            align: 'center',\r\n            width: 140,\r\n            render: (data) => renderTemplateData(\r\n                data,\r\n                () => navigateToFilingPlans(data.partner_id),\r\n                () => dispatch(adminSendReminder(data.partner_id, 'Filing Plans'))\r\n            )\r\n        }, {\r\n            title: (<h5 className='mb-0'>Sales Report</h5>),\r\n            dataIndex: 'sales_report',\r\n            key: 'sales_report',\r\n            align: 'center',\r\n            width: 140,\r\n            render: (data) => renderTemplateData(\r\n                data,\r\n                () => navigateToSalesReport(data.partner_id),\r\n                () => dispatch(adminSendReminder(data.partner_id, 'Sales'))\r\n            ),\r\n        }, {\r\n            title: 'Action',\r\n            key: 'operation',\r\n            align: 'center',\r\n            width: 140,\r\n            render: item => (\r\n                <div style={{ display: 'inline-flex', alignItems: 'center' }}>\r\n                    <Button\r\n                        type='link'\r\n                        className='margin-0'\r\n                        onClick={() => navigateToContent(item)}\r\n                    >\r\n                        <Tooltip title='Edit Partner'>\r\n                            <EditTwoTone twoToneColor='#00AEEF' className='font-20' />\r\n                        </Tooltip>\r\n                    </Button>\r\n                    <Button\r\n                        type='link'\r\n                        className='margin-0'\r\n                        onClick={() => showDeletePartner(item)}\r\n                    >\r\n                        <Tooltip title='Deactivate Partner'>\r\n                            <DeleteTwoTone twoToneColor='#00AEEF' className='font-20' />\r\n                        </Tooltip>\r\n                    </Button>\r\n                </div>\r\n            ),\r\n        }];\r\n        return columns\r\n    }\r\n\r\n    const renderTemplateData = (data, viewReport, sendReminder) => {\r\n        if (has(data, 'is_read')) {\r\n            const { quarter_name, is_approved, submission_time, updated_at, report_status } = data;\r\n            return (\r\n                <div className='gx-flex-row gx-align-items-center gx-justify-content-center font-20'>\r\n                    <Tooltip title={'For Quarter: ' + quarter_name}>\r\n                        <InfoCircleTwoTone twoToneColor='#00AEEF' />\r\n                    </Tooltip>\r\n                    <Tooltip\r\n                        title={'Report ' + report_status + ' on ' + moment(report_status === 'Submitted' ? submission_time : updated_at).format('Do MMM YYYY, hh:mm A')}\r\n                    >\r\n                        {\r\n                            is_approved === null ?\r\n                                <Checkbox className='ml-20' checked={false}></Checkbox> :\r\n                                is_approved ?\r\n                                    <CheckCircleTwoTone className='ml-20' twoToneColor='#52c41a' /> :\r\n                                    <CloseCircleTwoTone className='ml-20' twoToneColor='#f44336' />\r\n                        }\r\n                    </Tooltip>\r\n                    <Tooltip title='View report'>\r\n                        <EyeTwoTone\r\n                            className='ml-20'\r\n                            twoToneColor='#00AEEF'\r\n                            onClick={() => viewReport()}\r\n                        />\r\n                    </Tooltip>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className='gx-flex-row gx-align-items-center gx-justify-content-center font-20'>\r\n                    <Tooltip title='Send Reminder'>\r\n                        <BellTwoTone\r\n                            twoToneColor='#00AEEF'\r\n                            onClick={() => sendReminder()}\r\n                        />\r\n                    </Tooltip>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const showDeletePartner = (item) => {\r\n        showConfirm('Do you want to deactivate ' + item.name.toUpperCase() + ' ?', () => {\r\n            dispatch(deleteAdminSinglePartner(item.key, () => { dispatch(getAdminPartnerList()) }))\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <div className='gx-flex-row align-items-center'>\r\n                        <h1 className='title gx-mb-4'><IntlMessages id='sidebar.partnerList' /></h1>\r\n                        <Button onClick={navigateToAddPartner} type='primary' className='gx-ml-auto'>\r\n                            <UsergroupAddOutlined /> <IntlMessages id='partner.list.addPartner' />\r\n                        </Button>\r\n                    </div>\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Card className='mb-0'>\r\n                        <Table\r\n                            className='gx-table-responsive mpp-list-table'\r\n                            columns={setColumns()}\r\n                            dataSource={data}\r\n                            bordered\r\n                            // pagination={{ pageSize: 20 }}\r\n                            loading={!isLoaded}\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PartnerList","import React from 'react';\r\nimport IntlMessages from \"util/IntlMessages\";\r\n\r\n\r\nconst PartnerPerformance = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"title gx-mb-4\"><IntlMessages id=\"sidebar.partnerList\" /></h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PartnerPerformance\r\n","import { authConstants } from '../../constants';\r\nimport { hideLoader, showLoader } from './Loader';\r\nimport { login, changePassword, tokenValidate, passwordSet, forgotPassword } from '../../services';\r\nimport { showMessage } from '../../helpers'\r\n\r\nexport const userLogin = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader())\r\n        login(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                if (!response) {\r\n                    showMessage('error', 'User Does not exist');\r\n                    dispatch({ type: authConstants.LOGIN_FAILURE });\r\n                } else {\r\n                    dispatch({ type: authConstants.LOGIN_SUCCESS });\r\n                    localStorage.setItem('user', JSON.stringify(response));\r\n                    showMessage('success', 'User logged in successfully');\r\n                    if (onSuccess) {\r\n                        onSuccess()\r\n                    }\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: authConstants.LOGIN_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const userLogout = () => {\r\n    return dispatch => {\r\n        dispatch({ type: authConstants.LOGOUT_SUCCESS });\r\n        localStorage.removeItem('user');\r\n    }\r\n}\r\n\r\nexport const userChangePassword = (data) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: authConstants.CHANGE_PASSWORD_REQUEST });\r\n        changePassword(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: authConstants.CHANGE_PASSWORD_SUCCESS });\r\n                showMessage('success', 'Password changed successfully');\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: authConstants.CHANGE_PASSWORD_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const resetChangePassword = () => {\r\n    return dispatch => dispatch({ type: authConstants.CHANGE_PASSWORD_REQUEST })\r\n}\r\n\r\nexport const validateToken = (data) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: authConstants.VALIDATE_TOKEN_REQUEST });\r\n        tokenValidate(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: authConstants.VALIDATE_TOKEN_SUCCESS });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: authConstants.VALIDATE_TOKEN_FAILURE });\r\n                console.log(error)\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const setPassword = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: authConstants.SET_PASSWORD_REQUEST });\r\n        passwordSet(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: authConstants.SET_PASSWORD_SUCCESS });\r\n                showMessage('success', 'Password set successfully');\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: authConstants.SET_PASSWORD_FAILURE });\r\n                showMessage('error', error['password'][0]);\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const userForgetPassword = (data) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: authConstants.FORGOT_PASSWORD_REQUEST });\r\n        forgotPassword(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: authConstants.FORGOT_PASSWORD_SUCCESS });\r\n                showMessage('success', 'Email to change password has been sent to given email id!');\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: authConstants.FORGOT_PASSWORD_FAILURE });\r\n                if (error && error.email) {\r\n                    showMessage('error', error.email[0]);\r\n                }\r\n            }\r\n        )\r\n    }\r\n}","import { adminProductConstants } from '../../constants';\r\nimport { hideLoader, showLoader } from './Loader';\r\nimport { addProduct, deleteProduct, editProduct, getProduct, getProductDetails, getProductList } from '../../services';\r\nimport { showMessage } from '../../helpers'\r\n\r\nexport const adminAddProduct = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminProductConstants.ADD_PRODUCT_REQUEST });\r\n        addProduct(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminProductConstants.ADD_PRODUCT_SUCCESS });\r\n                showMessage('success', 'Product added succcessfully!');\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminProductConstants.ADD_PRODUCT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const adminEditProduct = (id, data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminProductConstants.EDIT_PRODUCT_REQUEST });\r\n        editProduct(id, data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminProductConstants.EDIT_PRODUCT_SUCCESS });\r\n                showMessage('success', 'Product edited succcessfully!');\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminProductConstants.EDIT_PRODUCT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminProductList = (showRecent) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminProductConstants.GET_PRODUCT_LIST_REQUEST });\r\n        getProductList(showRecent).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminProductConstants.GET_PRODUCT_LIST_SUCCESS, data: response ? response : [] });\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminProductConstants.GET_PRODUCT_LIST_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminProduct = (id, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminProductConstants.GET_PRODUCT_REQUEST });\r\n        getProduct(id).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminProductConstants.GET_PRODUCT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) { onSuccess() }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminProductConstants.GET_PRODUCT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const deleteAdminProduct = (id, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: adminProductConstants.DELETE_PRODUCT_REQUEST });\r\n        deleteProduct(id).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminProductConstants.DELETE_PRODUCT_SUCCESS });\r\n                showMessage('success', 'Product Deactivated!')\r\n                if (onSuccess) { onSuccess() }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: adminProductConstants.DELETE_PRODUCT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminProductDetails = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch({ type: adminProductConstants.GET_PRODUCT_DETAILS_REQUEST });\r\n        getProductDetails(data).then(\r\n            response => {\r\n                dispatch({ type: adminProductConstants.GET_PRODUCT_DETAILS_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess(response ? response : {})\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: adminProductConstants.GET_PRODUCT_DETAILS_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const resetProduct = () => {\r\n    return dispatch => {\r\n        dispatch({ type: adminProductConstants.RESET_PRODUCT });\r\n    }\r\n}","import { config } from '../constants';\r\nimport { authHeader } from '../helpers';\r\nimport { handleResponse } from './handle-response';\r\n\r\n\r\nexport const addProduct = (data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/product/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const editProduct = (id, data) => {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/product/${id}/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getProduct = (id) => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/product/${id}/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const deleteProduct = (id) => {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/product/${id}/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getProductList = (showRecent) => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/product/?recent=${showRecent}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getProductDetails = ({ product_name, partner_id }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ product_name, partner_id })\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/admin/product_detail/`, requestOptions)\r\n        .then(handleResponse)\r\n}","import * as FileSaver from 'file-saver';\r\nimport { pdtConstants } from '../../constants';\r\nimport { hideLoader, showLoader } from './Loader';\r\nimport { getPDT, postPDT, adminGetPDT, adminPostPDT, approvePDT, submitPDT, markPDTMessageRead, getPDTReport, downloadpdtReport } from '../../services';\r\nimport { showMessage } from '../../helpers'\r\n\r\nexport const getPdtData = (onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: pdtConstants.GET_PDT_REQUEST });\r\n        getPDT().then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.GET_PDT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess(response)\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.GET_PDT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminPDTReport = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch({ type: pdtConstants.GET_PDT_REPORT_REQUEST });\r\n        getPDTReport(data).then(\r\n            response => {\r\n                dispatch({ type: pdtConstants.GET_PDT_REPORT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: pdtConstants.GET_PDT_REPORT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const downloadPDTReport = (filename, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: pdtConstants.REPORT_DOWNLOAD_PDT_REQUEST });\r\n        downloadpdtReport().then(response => {\r\n            dispatch(hideLoader());\r\n            dispatch({ type: pdtConstants.REPORT_DOWNLOAD_PDT_SUCCESS });\r\n            FileSaver.saveAs(response, filename);\r\n            if (onSuccess) {\r\n                onSuccess()\r\n            }\r\n        }).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.REPORT_DOWNLOAD_PDT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const postPdtData = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: pdtConstants.POST_PDT_REQUEST });\r\n        postPDT(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.POST_PDT_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.POST_PDT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminPdtData = (id, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: pdtConstants.GET_ADMIN_PDT_REQUEST });\r\n        adminGetPDT(id).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.GET_ADMIN_PDT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess(response)\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.GET_ADMIN_PDT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const postAdminPdtData = (id, data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: pdtConstants.POST_ADMIN_PDT_REQUEST });\r\n        adminPostPDT(id, data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.POST_ADMIN_PDT_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.POST_ADMIN_PDT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const approvePDTReport = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: pdtConstants.APPROVE_PDT_REQUEST });\r\n        approvePDT(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.APPROVE_PDT_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.APPROVE_PDT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const submitPDTReport = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: pdtConstants.REPORT_PDT_REQUEST });\r\n        submitPDT(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.REPORT_PDT_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: pdtConstants.REPORT_PDT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const partnerMarkMessageRead = (type, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch({ type: pdtConstants.MESSAGE_READ_REQUEST });\r\n        markPDTMessageRead(type).then(\r\n            response => {\r\n                dispatch({ type: pdtConstants.MESSAGE_READ_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: pdtConstants.MESSAGE_READ_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}","import { config } from '../constants';\r\nimport { authHeader } from '../helpers';\r\nimport { handleResponse } from './handle-response';\r\n\r\nexport const getPDT = () => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/pdt/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const postPDT = (data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/pdt/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const adminGetPDT = (id) => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/pdt/${id}/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const adminPostPDT = (id, data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/pdt/${id}/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const submitPDT = ({ message }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ message })\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/pdt/submit/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const approvePDT = ({ partner_id, message, is_approved }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ partner_id, message, is_approved })\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/pdt/message/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\n\r\nexport const markPDTMessageRead = (type) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/pdt/inbox/${type}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getPDTReport = (data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/report/pdt/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\n\r\nexport const downloadPDTReport = () => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({})\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/report/pdt/download/`, requestOptions)\r\n        .then((response) => response.blob())\r\n        .then((blob) => {\r\n            const url = window.URL.createObjectURL(new Blob([blob]));\r\n            const link = document.createElement('a');\r\n            link.href = url;\r\n            link.setAttribute('download', `sample.${this.state.file}`);\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            link.parentNode.removeChild(link);\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        });\r\n}\r\n\r\nexport const downloadpdtReport = () => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({}),\r\n        responseType: 'blob'\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/report/pdt/download/`, requestOptions)\r\n        .then(response => response.blob())\r\n\r\n}","import * as FileSaver from 'file-saver';\r\nimport { filingPlansConstants } from '../../constants';\r\nimport { hideLoader, showLoader } from './Loader';\r\nimport { showMessage } from '../../helpers'\r\nimport { adminGetFilingPlans, adminPostFilingPlans, approveFilingPlans, downloadFilingPlansReport, getFilingPlans, getFilingPlansReport, markFilingPlansMessageRead, postFilingPlans, submitFilingPlans } from '../../services/FilingPlans';\r\n\r\nexport const getFilingPlansData = (onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: filingPlansConstants.GET_FILING_PLANS_REQUEST });\r\n        getFilingPlans().then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.GET_FILING_PLANS_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess(response)\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.GET_FILING_PLANS_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminFilingPlansReport = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch({ type: filingPlansConstants.GET_FILING_PLANS_REPORT_REQUEST });\r\n        getFilingPlansReport(data).then(\r\n            response => {\r\n                dispatch({ type: filingPlansConstants.GET_FILING_PLANS_REPORT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: filingPlansConstants.GET_FILING_PLANS_REPORT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const downloadFilingReport = (filename, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_REQUEST });\r\n        downloadFilingPlansReport().then(response => {\r\n            dispatch(hideLoader());\r\n            dispatch({ type: filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_SUCCESS });\r\n            FileSaver.saveAs(response, filename);\r\n            if (onSuccess) {\r\n                onSuccess()\r\n            }\r\n        }).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.REPORT_DOWNLOAD_FILING_PLANS_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const postFilingPlansData = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: filingPlansConstants.POST_FILING_PLANS_REQUEST });\r\n        postFilingPlans(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.POST_FILING_PLANS_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.POST_FILING_PLANS_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminFilingPlansData = (id, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: filingPlansConstants.GET_ADMIN_FILING_PLANS_REQUEST });\r\n        adminGetFilingPlans(id).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.GET_ADMIN_FILING_PLANS_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess(response)\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.GET_ADMIN_FILING_PLANS_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const postAdminFilingPlansData = (id, data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: filingPlansConstants.POST_ADMIN_FILING_PLANS_REQUEST });\r\n        adminPostFilingPlans(id, data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.POST_ADMIN_FILING_PLANS_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.POST_ADMIN_FILING_PLANS_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const approveFilingPlansReport = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: filingPlansConstants.APPROVE_FILING_PLANS_REQUEST });\r\n        approveFilingPlans(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.APPROVE_FILING_PLANS_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.APPROVE_FILING_PLANS_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const submitFilingPlansReport = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: filingPlansConstants.REPORT_FILING_PLANS_REQUEST });\r\n        submitFilingPlans(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.REPORT_FILING_PLANS_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: filingPlansConstants.REPORT_FILING_PLANS_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const partnerMarkFilingPlansMessageRead = (type, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch({ type: filingPlansConstants.MESSAGE_READ_REQUEST });\r\n        markFilingPlansMessageRead(type).then(\r\n            response => {\r\n                dispatch({ type: filingPlansConstants.MESSAGE_READ_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: filingPlansConstants.MESSAGE_READ_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}","import { config } from '../constants';\r\nimport { authHeader } from '../helpers';\r\nimport { handleResponse } from './handle-response';\r\n\r\nexport const getFilingPlans = () => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/filing/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const postFilingPlans = (data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/filing/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const adminGetFilingPlans = (id) => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/filing/${id}/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const adminPostFilingPlans = (id, data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/filing/${id}/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const submitFilingPlans = ({message}) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({message})\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/filing/submit/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const approveFilingPlans = ({ partner_id, message, is_approved }) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ partner_id, message, is_approved })\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/filing/message/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\n\r\nexport const markFilingPlansMessageRead = (type) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/template/filing/inbox/${type}`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const getFilingPlansReport = (data) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(data)\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/report/filing/`, requestOptions)\r\n        .then(handleResponse)\r\n}\r\n\r\nexport const downloadFilingPlansReport = () => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({}),\r\n        responseType: 'blob'\r\n    };\r\n\r\n    return fetch(`${config.API_URL}/report/filing/download/`, requestOptions)\r\n        .then(response => response.blob())\r\n}","import * as FileSaver from 'file-saver';\r\nimport { salesReportConstants } from '../../constants';\r\nimport { hideLoader, showLoader } from './Loader';\r\nimport { showMessage } from '../../helpers'\r\nimport { getConsolidatedSalesReport, getSalesReport, downloadConsolidatedSalesReport, postSalesReport, adminGetSalesReport, adminPostSalesReport, approveSalesReport, submitSalesReport, markSalesReportMessageRead, getProductsToBeVerified, postProductsToBeVerified } from '../../services';\r\n\r\nexport const getApiSalesData = (onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.GET_API_SALES_REPORT_REQUEST });\r\n        getSalesReport('api').then(\r\n            response => {\r\n                dispatch({ type: salesReportConstants.GET_API_SALES_REPORT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess(response)\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.GET_API_SALES_REPORT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getFdfSalesData = (onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.GET_FDF_SALES_REPORT_REQUEST });\r\n        getSalesReport('fdf').then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.GET_FDF_SALES_REPORT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess(response)\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.GET_FDF_SALES_REPORT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminConsolidatedApiReport = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch({ type: salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_REQUEST });\r\n        getConsolidatedSalesReport('api', data).then(\r\n            response => {\r\n                dispatch({ type: salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: salesReportConstants.GET_CONSOLIDATED_API_SALES_REPORT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminConsolidatedFdfReport = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch({ type: salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_REQUEST });\r\n        getConsolidatedSalesReport('fdf', data).then(\r\n            response => {\r\n                dispatch({ type: salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: salesReportConstants.GET_CONSOLIDATED_FDF_SALES_REPORT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const downloadApiSalesReport = (filename, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.DOWNLOAD_API_SALES_REPORT_REQUEST });\r\n        downloadConsolidatedSalesReport('api').then(response => {\r\n            dispatch(hideLoader());\r\n            dispatch({ type: salesReportConstants.DOWNLOAD_API_SALES_REPORT_SUCCESS });\r\n            FileSaver.saveAs(response, filename);\r\n            if (onSuccess) {\r\n                onSuccess()\r\n            }\r\n        }).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.DOWNLOAD_API_SALES_REPORT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const downloadFdfSalesReport = (filename, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_REQUEST });\r\n        downloadConsolidatedSalesReport('fdf').then(response => {\r\n            dispatch(hideLoader());\r\n            dispatch({ type: salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_SUCCESS });\r\n            FileSaver.saveAs(response, filename);\r\n            if (onSuccess) {\r\n                onSuccess()\r\n            }\r\n        }).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.DOWNLOAD_FDF_SALES_REPORT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const postApiSalesReportData = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.POST_API_SALES_REPORT_REQUEST });\r\n        postSalesReport('api', data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.POST_API_SALES_REPORT_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.POST_API_SALES_REPORT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const postFdfSalesReportData = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.POST_FDF_SALES_REPORT_REQUEST });\r\n        postSalesReport('fdf', data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.POST_FDF_SALES_REPORT_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.POST_FDF_SALES_REPORT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminApiSalesData = (id, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.GET_ADMIN_API_SALES_REPORT_REQUEST });\r\n        adminGetSalesReport('api', id).then(\r\n            response => {\r\n                dispatch({ type: salesReportConstants.GET_ADMIN_API_SALES_REPORT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess(response)\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.GET_ADMIN_API_SALES_REPORT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminFdfSalesData = (id, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_REQUEST });\r\n        adminGetSalesReport('fdf', id).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_SUCCESS, data: response ? response : {} });\r\n                if (onSuccess) {\r\n                    onSuccess(response)\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.GET_ADMIN_FDF_SALES_REPORT_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const postAdminApiSalesData = (id, data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.POST_ADMIN_API_SALES_REPORT_REQUEST });\r\n        adminPostSalesReport('api', id, data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.POST_ADMIN_API_SALES_REPORT_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.POST_ADMIN_API_SALES_REPORT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const postAdminFdfSalesData = (id, data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_REQUEST });\r\n        adminPostSalesReport('fdf', id, data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.POST_ADMIN_FDF_SALES_REPORT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const approveSalesReportData = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.APPROVE_SALES_REPORT_REQUEST });\r\n        approveSalesReport(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.APPROVE_SALES_REPORT_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.APPROVE_SALES_REPORT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const submitSalesReportData = (data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.SUBMIT_SALES_REPORT_REQUEST });\r\n        submitSalesReport(data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.SUBMIT_SALES_REPORT_SUCCESS });\r\n                showMessage('success', 'Reports submitted successfully!')\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.SUBMIT_SALES_REPORT_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const partnerMarkSalesReportMessageRead = (type, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch({ type: salesReportConstants.MESSAGE_READ_REQUEST });\r\n        markSalesReportMessageRead(type).then(\r\n            response => {\r\n                dispatch({ type: salesReportConstants.MESSAGE_READ_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: salesReportConstants.MESSAGE_READ_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const getAdminProductsToBeVerified = (id, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch({ type: salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_REQUEST });\r\n        getProductsToBeVerified(id).then(\r\n            response => {\r\n                dispatch({ type: salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_SUCCESS, data: response ? response : [] });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch({ type: salesReportConstants.GET_PRODUCT_VERIFICATION_LIST_FAILURE });\r\n                console.log(error)\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport const postAdminProductsToBeVerified = (id, data, onSuccess) => {\r\n    return dispatch => {\r\n        dispatch(showLoader());\r\n        dispatch({ type: salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_REQUEST });\r\n        postProductsToBeVerified(id, data).then(\r\n            response => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_SUCCESS });\r\n                if (onSuccess) {\r\n                    onSuccess()\r\n                }\r\n            }\r\n        ).catch(\r\n            error => {\r\n                dispatch(hideLoader());\r\n                dispatch({ type: salesReportConstants.POST_PRODUCT_VERIFICATION_LIST_FAILURE });\r\n                showMessage('error', error.toString());\r\n            }\r\n        )\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { Card, Table, Row, Col, Button, Tooltip } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteAdminProduct, getAdminProductList } from '../../../appRedux/actions';\r\nimport { DeleteTwoTone, EditTwoTone, MedicineBoxOutlined } from '@ant-design/icons';\r\nimport { showConfirm } from '../../../helpers';\r\n\r\nconst ProductList = (props) => {\r\n\r\n    const isLoaded = useSelector(state => state.adminProducts.isLoaded);\r\n    const adminProductList = useSelector(state => state.adminProducts.productList);\r\n    const dispatch = useDispatch();\r\n    const [data, setData] = useState([]);\r\n    const [filteredInfo, setFilteredInfo] = useState({});\r\n\r\n    useEffect(() => {\r\n        dispatch(getAdminProductList(true));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        let rowData = adminProductList.length ? adminProductList.map(\r\n            value => ({\r\n                key: value.product_id,\r\n                name: value.product_name,\r\n                category: value.category,\r\n                therapyArea: value.therapy_area,\r\n            })\r\n        ) : [];\r\n        setData(rowData)\r\n    }, [isLoaded])\r\n\r\n    const navigateToAddProduct = () => {\r\n        const { history } = props;\r\n        history.push('/admin/add-product')\r\n    }\r\n\r\n    const navigateToEditProduct = (item) => {\r\n        const { history } = props;\r\n        history.push('/admin/edit-product/' + item.key)\r\n    }\r\n\r\n    const columns = [{\r\n        title: 'Product Name',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        ellipsis: true,\r\n        sorter: (a, b) => a.name.localeCompare(b.name),\r\n        render: name => <span>{name}</span>\r\n    }, {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        key: 'category',\r\n        filters: [\r\n            { text: 'FDF', value: 'FDF' },\r\n            { text: 'API', value: 'API' },\r\n        ],\r\n        filteredValue: filteredInfo.category,\r\n        onFilter: (value, record) => record.category.includes(value),\r\n    }, {\r\n        title: 'Therapy Area',\r\n        dataIndex: 'therapyArea',\r\n        key: 'therapyArea',\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'operation',\r\n        align: 'center',\r\n        render: item => (\r\n            <div style={{ display: 'inline-flex', alignItems: 'center' }}>\r\n                <Button\r\n                    type='link'\r\n                    className='margin-0'\r\n                    onClick={() => navigateToEditProduct(item)}\r\n                >\r\n                    <Tooltip title='Edit Product'>\r\n                        <EditTwoTone twoToneColor='#00AEEF' className='font-20' />\r\n                    </Tooltip>\r\n                </Button>\r\n                <Button\r\n                    type='link'\r\n                    className='margin-0'\r\n                    onClick={() => showDeleteProduct(item)}\r\n                >\r\n                    <Tooltip title='Deactivate Product'>\r\n                        <DeleteTwoTone twoToneColor='#00AEEF' className='font-20' />\r\n                    </Tooltip>\r\n                </Button>\r\n            </div>\r\n        ),\r\n    }\r\n    ];\r\n\r\n    const showDeleteProduct = (item) => {\r\n        showConfirm('Do you want to deactivate ' + item.name.toUpperCase() + ' ?', () => {\r\n            dispatch(deleteAdminProduct(item.key, () => { dispatch(getAdminProductList()) }))\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <div className='gx-flex-row align-items-center'>\r\n                        <h1 className='title gx-mb-4'><IntlMessages id='sidebar.productList' /></h1>\r\n                        <Button type='primary' className='gx-ml-auto' onClick={navigateToAddProduct} >\r\n                            <MedicineBoxOutlined /> <IntlMessages id='product.list.addProduct' />\r\n                        </Button>\r\n                    </div>\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Card className='mb-0'>\r\n                        <Table\r\n                            className='gx-table-responsive mpp-list-table'\r\n                            columns={columns}\r\n                            dataSource={data}\r\n                            // pagination={{ pageSize: 100 }}\r\n                            bordered\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductList\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\n\r\nconst NotificationItem = ({ notification, isAdmin }) => {\r\n  const { created_at, message, is_approved, is_partner_message } = notification;\r\n  return (\r\n    <li className='gx-media'>\r\n      <div className='gx-user-thumb gx-mr-3'>\r\n        {\r\n          !is_partner_message ?\r\n            isAdmin ?\r\n              <Avatar className='gx-size-50' icon={<UserOutlined />} /> :\r\n              <Avatar className='gx-size-50' ><span className='font-20'>A</span></Avatar>\r\n            :\r\n            isAdmin ?\r\n              <Avatar className='gx-size-50' ><span className='font-20'>P</span></Avatar> :\r\n              <Avatar className='gx-size-50' icon={<UserOutlined />} />\r\n        }\r\n      </div>\r\n      <div className='gx-media-body'>\r\n\r\n        {\r\n          !is_partner_message ?\r\n            <p className={is_approved ? 'color-green mb-0 ' : 'color-red mb-0 '}>Report is <span>{is_approved ? 'Approved' : 'Rejected'}</span></p> :\r\n            <p className={'color-blue mb-0 '}>Report is <span>Submitted</span></p>\r\n        }\r\n        <p className='gx-fs-sm'>{message}</p>\r\n        <div className='gx-flex-row gx-justify-content-between gx-align-items-center'>\r\n          <span className='gx-meta-date'><small>{moment(created_at).format('Do MMM YYYY, hh:mm A')}</small></span>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NotificationItem;\r\n","import React from \"react\";\r\nimport NotificationItem from \"./NotificationItem\";\r\nimport CustomScrollbars from 'util/CustomScrollbars'\r\nimport Auxiliary from \"util/Auxiliary\";\r\nimport { Empty } from \"antd\";\r\n\r\nconst AdminNotifications = ({ data, isAdmin }) => {\r\n  return (\r\n    <Auxiliary>\r\n      <div className=\"gx-popover-header\">\r\n        <h3 className=\"gx-mb-0\">Messages</h3>\r\n        <i className=\"gx-icon-btn icon icon-charvlet-down\" />\r\n      </div>\r\n      <CustomScrollbars className=\"gx-popover-scroll\">\r\n        {\r\n          data && data.length > 0 ?\r\n            <ul className=\"gx-sub-popover\">\r\n              {data.map((notification, index) => <NotificationItem isAdmin={isAdmin} key={index}\r\n                notification={notification} />)}\r\n            </ul>\r\n            : <Empty className='mt-20' description='No messages' />\r\n        }\r\n      </CustomScrollbars>\r\n    </Auxiliary>\r\n  )\r\n};\r\n\r\nexport default AdminNotifications;\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\nimport 'ag-grid-enterprise';\r\nimport { Button, Input, Modal, Popover, Form, Badge, Tooltip, Card, Empty } from 'antd';\r\nimport { MailOutlined, CheckCircleOutlined, CloseCircleOutlined, DownloadOutlined, LeftOutlined } from '@ant-design/icons';\r\nimport $ from 'jquery'\r\nimport datepicker from 'jquery-ui/ui/widgets/datepicker';\r\nimport AdminNotifications from 'components/AdminNotifications';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { getAdminPdtData, getPdtData, postAdminPdtData, postPdtData, approvePDTReport, submitPDTReport, partnerMarkMessageRead } from '../../../appRedux/actions/ProductDevelopmentTimeline';\r\nimport { showMessage, statusArray } from '../../../helpers';\r\nimport moment from 'moment';\r\nimport { findIndex, isEmpty } from 'lodash'\r\n\r\nimport './pdt.css';\r\n\r\nconst confirm = Modal.confirm;\r\n\r\nfunction getDatePicker() {\r\n\r\n    function Datepicker() { }\r\n    Datepicker.prototype.init = function (params) {\r\n        this.eInput = document.createElement('input');\r\n        this.eInput.value = params.value;\r\n        this.eInput.classList.add('ag-input');\r\n        this.eInput.style.height = '100%';\r\n        $(this.eInput).datepicker({ dateFormat: 'mm/dd/yy' });\r\n    };\r\n    Datepicker.prototype.getGui = function () {\r\n        return this.eInput;\r\n    };\r\n    Datepicker.prototype.afterGuiAttached = function () {\r\n        this.eInput.focus();\r\n        this.eInput.select();\r\n    };\r\n    Datepicker.prototype.getValue = function () {\r\n        return this.eInput.value;\r\n    };\r\n    Datepicker.prototype.destroy = function () { };\r\n    Datepicker.prototype.isPopup = function () {\r\n        return false;\r\n    };\r\n    return Datepicker;\r\n}\r\n\r\nconst DevelopmentTimeline = (props) => {\r\n    const [isDataReady, setIsDataReady] = useState(false);\r\n    const [showReport, setShowReport] = useState(false);\r\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\r\n    const [reportDetails, setReportDetails] = useState({});\r\n    const [quarterEditDetails, setQuarterEditDetails] = useState({});\r\n    const [messageCount, setMessageCount] = useState(0);\r\n    const [partnerId, setPartnerId] = useState(null);\r\n    const [gridApi, setGridApi] = useState({});\r\n    const [rowData, setRowData] = useState(null);\r\n    const [quarterOrder, setQuarterOrder] = useState([]);\r\n    const [columnDefs, setColumnDefs] = useState([\r\n        {\r\n            headerName: 'Products',\r\n            field: 'product',\r\n            editable: false,\r\n            rowGroup: true,\r\n            hide: true,\r\n        }\r\n    ]);\r\n    const { pdtList } = useSelector(({ pdt }) => pdt);\r\n    const [form] = Form.useForm();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setPDT()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isDataReady) {\r\n            addQuarter();\r\n        }\r\n    }, [isDataReady])\r\n\r\n    const navigateBack = () => {\r\n        if (isUserAdmin) {\r\n            props.history.push('/admin/partner-list')\r\n        }\r\n    }\r\n\r\n    const setPDT = () => {\r\n        const { id } = props.match.params;\r\n        if (id) {\r\n            setIsUserAdmin(true)\r\n            dispatch(getAdminPdtData(id, (data) => {\r\n                setValues(data)\r\n                setPartnerId(id)\r\n            }))\r\n        } else {\r\n            dispatch(getPdtData((data) => {\r\n                setValues(data)\r\n            }))\r\n        }\r\n    }\r\n\r\n    const setValues = (data) => {\r\n        setRowData(data.rows);\r\n        setQuarterOrder(data.quarter_order);\r\n        setMessageCount(data.unread_message_count);\r\n        setReportDetails(data.pdt_meta);\r\n        setQuarterEditDetails(data.quarter_editable)\r\n        setShowReport(!isEmpty(data));\r\n    }\r\n\r\n    const onGridReady = (params) => {\r\n        setGridApi(params.api);\r\n        setIsDataReady(true);\r\n    }\r\n\r\n    const addQuarter = () => {\r\n        const { report_status } = reportDetails;\r\n        const quarterNumber = quarterOrder ? quarterOrder.length : 0\r\n        const column = [\r\n            ...columnDefs,\r\n            {\r\n                headerName: 'Status',\r\n                field: 'product_status',\r\n                width: 150,\r\n                editable: (params) => {\r\n                    return params.data.editable && (report_status !== 'Approved' || isUserAdmin)\r\n                },\r\n                cellClass: (params) => {\r\n                    const { data } = params;\r\n                    if (data) {\r\n                        return (data.editable) && (report_status !== 'Approved' || isUserAdmin) ? 'editable-cell' : 'non-editable-cell'\r\n                    }\r\n                },\r\n                cellEditorSelector: (params) => {\r\n                    return {\r\n                        component: 'agRichSelect',\r\n                        params: { values: statusArray.map(value => value.id) }\r\n                    }\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (!statusArray.map(value => value.id).includes(value) && value)\r\n                    },\r\n                },\r\n            },\r\n            {\r\n                headerName: 'Notes',\r\n                field: 'notes',\r\n                editable: (report_status !== 'Approved' || isUserAdmin),\r\n                cellClass: (params) => {\r\n                    const { data } = params;\r\n                    if (data) {\r\n                        return (report_status !== 'Approved' || isUserAdmin) ? 'editable-cell' : 'non-editable-cell'\r\n                    }\r\n                },\r\n                width: 250,\r\n            }\r\n        ];\r\n        for (let i = 0; i < quarterNumber; i++) {\r\n            const obj = {\r\n                headerName: quarterOrder[i],\r\n                children: [\r\n                    {\r\n                        headerName: 'Start Date (MM/DD/YYYY)',\r\n                        field: 'start_date_' + quarterOrder[i],\r\n                        editable: (report_status !== 'Approved' || isUserAdmin) && quarterEditDetails[quarterOrder[i]],\r\n                        cellEditor: 'datePicker',\r\n                        cellClass: (params) => {\r\n                            const { data } = params;\r\n                            if (data) {\r\n                                return ((report_status !== 'Approved' || isUserAdmin) && quarterEditDetails[quarterOrder[i]] ? 'editable-cell' : 'non-editable-cell');\r\n                            }\r\n                        },\r\n                        cellClassRules: {\r\n                            'error-cell': (params) => {\r\n                                const { value } = params\r\n                                return (!checkDate(value) && value)\r\n                            },\r\n                        },\r\n                        sortable: false,\r\n                        width: 200\r\n                    },\r\n                    {\r\n                        headerName: 'End Date (MM/DD/YYYY)',\r\n                        field: 'end_date_' + quarterOrder[i],\r\n                        editable: (report_status !== 'Approved' || isUserAdmin) && quarterEditDetails[quarterOrder[i]],\r\n                        sortable: false,\r\n                        cellClass: (params) => {\r\n                            const { data } = params;\r\n                            if (data) {\r\n                                return ((report_status !== 'Approved' || isUserAdmin) && quarterEditDetails[quarterOrder[i]] ? 'editable-cell' : 'non-editable-cell');\r\n                            }\r\n                        },\r\n                        cellClassRules: {\r\n                            'error-cell': (params) => {\r\n                                const { value } = params\r\n                                return (!checkDate(value) && value)\r\n                            },\r\n                        },\r\n                        cellEditor: 'datePicker',\r\n                        width: 200\r\n                    }\r\n                ],\r\n            }\r\n            column.push(obj)\r\n        }\r\n        setColumnDefs(column)\r\n        gridApi.setColumnDefs(column)\r\n        gridApi.forEachNode((node) => {\r\n            if (node.key === rowData[0].product) {\r\n                node.setExpanded(true);\r\n            }\r\n        });\r\n        handleUndefinedValues();\r\n    }\r\n\r\n    const handleUndefinedValues = () => {\r\n        let tempRowData = [...rowData];\r\n        gridApi.forEachNode((node) => {\r\n            const { data } = node;\r\n            if (data) {\r\n                quarterOrder.forEach((value) => {\r\n                    if (!data.hasOwnProperty('start_date_' + value)) {\r\n                        tempRowData[findIndex(tempRowData, { stage_id: data.stage_id })]['start_date_' + value] = null;\r\n                        tempRowData[findIndex(tempRowData, { stage_id: data.stage_id })]['end_date_' + value] = null;\r\n                    }\r\n                })\r\n            }\r\n        });\r\n        setRowData(tempRowData)\r\n    }\r\n\r\n    const checkDataValues = (dataList) => {\r\n        return !dataList.some(value => checkRow(value))\r\n    }\r\n\r\n    const checkRow = (rowData) => {\r\n        let statusFlag = false\r\n        for (let key in rowData) {\r\n            if (rowData.hasOwnProperty(key)) {\r\n                if (key === 'product_status' && rowData['editable'] && !statusArray.map(value => value.id).includes(rowData['product_status'])) {\r\n                    statusFlag = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        let dateFlag = Object.keys(rowData).filter(value => value.split('_')[0] === 'start' || value.split('_')[0] === 'end')\r\n            .some(value => (!checkDate(rowData[value]) && rowData[value] !== undefined && rowData[value] !== null && rowData[value] !== ''))\r\n\r\n        return statusFlag || dateFlag\r\n    }\r\n\r\n    const saveReportBeforeAction = (callback) => {\r\n        gridApi.stopEditing();\r\n        gridApi.selectAll();\r\n        const obj = {};\r\n        let selectedNodes = gridApi.getSelectedNodes().filter(d => d.data);\r\n        if (checkDataValues(selectedNodes.map(value => value.data))) {\r\n            selectedNodes.forEach(node => {\r\n                const { product_id, stage_id, editable, product_status, notes } = node.data;\r\n                if (obj[product_id] === undefined) {\r\n                    obj[product_id] = {}\r\n                }\r\n                if (obj[product_id][stage_id] === undefined) {\r\n                    obj[product_id][stage_id] = {}\r\n                }\r\n                if (editable) {\r\n                    obj[product_id]['product_status'] = product_status;\r\n                }\r\n                obj[product_id][stage_id]['notes'] = notes;\r\n                quarterOrder.forEach((quarter) => {\r\n                    const start_date_name = 'start_date_' + quarter\r\n                    const end_date_name = 'end_date_' + quarter\r\n\r\n                    const start_date = node.data[start_date_name]\r\n                    const end_date = node.data[end_date_name]\r\n\r\n                    obj[product_id][stage_id][quarter] = {\r\n                        start_date: start_date === '' ? null : start_date,\r\n                        end_date: end_date === '' ? null : end_date\r\n                    }\r\n                })\r\n            })\r\n            if (isUserAdmin) {\r\n                dispatch(postAdminPdtData(partnerId, obj, callback()))\r\n            } else {\r\n                dispatch(postPdtData(obj, callback()))\r\n            }\r\n            gridApi.deselectAll()\r\n        } else {\r\n            Modal.error({\r\n                title: 'Invalid data!',\r\n                content: 'Please input valid entries!',\r\n            });\r\n            gridApi.deselectAll()\r\n        }\r\n    }\r\n\r\n    const saveData = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                showMessage('success', 'Data recorded successfully!')\r\n            }\r\n        )\r\n    }\r\n\r\n    const showSubmitConfirm = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                confirm({\r\n                    content: showCommentsForm(),\r\n                    okText: 'Submit',\r\n                    cancelText: 'Cancel',\r\n                    title: 'Do you want to submit the report?',\r\n                    className: 'btn-confirm-green',\r\n                    onOk(close) {\r\n                        form.validateFields().then(\r\n                            values => {\r\n                                let msg = values.commentData ? values.commentData : '';\r\n                                dispatch(submitPDTReport(\r\n                                    { message: msg },\r\n                                    () => {\r\n                                        showMessage('success', 'Report has been submitted to the admin!');\r\n                                        setPDT();\r\n                                        form.resetFields(['commentData'])\r\n                                    }\r\n                                ))\r\n                                close()\r\n                            }\r\n                        )\r\n                    },\r\n                    onCancel() {\r\n                        form.resetFields(['commentData'])\r\n                    },\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    const approver = (msg, isApproved) => {\r\n        let data = {\r\n            'partner_id': partnerId,\r\n            'message': msg,\r\n            'is_approved': isApproved\r\n        }\r\n        dispatch(approvePDTReport(data, () => {\r\n            if (isApproved) {\r\n                showMessage('success', 'Report Approved!');\r\n            } else {\r\n                showMessage('success', 'Report Rejected!');\r\n            }\r\n            form.resetFields(['commentData'])\r\n            setPDT()\r\n        }))\r\n    }\r\n\r\n    const showCommentsForm = () => {\r\n        return (\r\n            <Form\r\n                form={form}\r\n                layout=\"vertical\"\r\n                className='mt-20'\r\n            >\r\n                <div className='mb-10'>\r\n                    <span>\r\n                        {\r\n                            isUserAdmin ? 'Add comments for partner:' : 'Add comments for admin:'\r\n                        }\r\n                    </span>\r\n                </div>\r\n                <Form.Item\r\n                    name='commentData'\r\n                    className='mb-0'\r\n                    rules={[\r\n                        { required: isUserAdmin, message: isUserAdmin ? 'Enter comments for partner' : 'Enter comments for admin' },\r\n                    ]}\r\n                >\r\n                    <Input.TextArea placeholder=\"Enter comments here\" />\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n    const showRejectConfirm = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                confirm({\r\n                    title: 'Do you want to reject the report?',\r\n                    className: 'btn-confirm-red',\r\n                    content: showCommentsForm(),\r\n                    okText: 'Reject',\r\n                    cancelText: 'Cancel',\r\n                    icon: (<CloseCircleOutlined />),\r\n                    onOk(close) {\r\n                        form.validateFields().then(\r\n                            values => {\r\n                                let msg = values.commentData ? values.commentData : '';\r\n                                approver(msg, false);\r\n                                close()\r\n                            }\r\n                        )\r\n                    },\r\n                    onCancel() {\r\n                        form.resetFields(['commentData'])\r\n                    },\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    const showApproveConfirm = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                confirm({\r\n                    title: 'Do you want to approve the report?',\r\n                    className: 'btn-confirm-green',\r\n                    content: showCommentsForm(),\r\n                    icon: (<CheckCircleOutlined />),\r\n                    okText: 'Approve',\r\n                    cancelText: 'Cancel',\r\n                    onOk(close) {\r\n                        form.validateFields().then(\r\n                            values => {\r\n                                let msg = values.commentData ? values.commentData : '';\r\n                                approver(msg, true);\r\n                                close()\r\n                            }\r\n                        )\r\n                    },\r\n                    onCancel() {\r\n                        form.resetFields(['commentData'])\r\n                    },\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    const displayHeader = () => {\r\n        if (showReport) {\r\n            if (reportDetails) {\r\n                const { partner_name, quarter_name, report_status, approval_time, submission_time } = reportDetails;\r\n                return (\r\n                    <div className='gx-mb-4'>\r\n                        <h1 className='title '>{isUserAdmin ? <Tooltip title='Back'><LeftOutlined className='mr-10' onClick={navigateBack} /></Tooltip> : null}Product Development Timeline {isUserAdmin ? <span className='mr-5'>for <span className='text-capitalize'>{partner_name}</span></span> : null}\r\n                            <span className='text-capitalize'>({quarter_name})</span>\r\n                        </h1>\r\n                        <h4 className={isUserAdmin ? 'ml-30' : ''}>Report Status:&nbsp;\r\n                            <span className='text-capitalize'> {report_status}</span>\r\n                            <span>\r\n                                {!approval_time && !submission_time ? '' : ' on ' + moment(report_status === 'Submitted' || report_status === 'Resubmitted' ? submission_time : approval_time).format('Do MMM YYYY, hh:mm A')}\r\n                            </span>\r\n                        </h4>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return (\r\n                <div className='gx-mb-4'>\r\n                    <h1 className='title '>{isUserAdmin ? <LeftOutlined className='mr-5' onClick={navigateBack} /> : null}Product Development Timeline {isUserAdmin && reportDetails ? <span>for <span className='text-capitalize'>{reportDetails.partner_name}</span></span> : null}\r\n                    </h1>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const displayCTA = () => {\r\n        if (showReport) {\r\n            const { report_status } = reportDetails\r\n            if (isUserAdmin) {\r\n                return (\r\n                    <div className='gx-flex-row'>\r\n                        <Button\r\n                            type='primary'\r\n                            onClick={() => { saveData(false) }}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <Button\r\n                            className='gx-btn-success'\r\n                            onClick={() => showApproveConfirm()}\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                        <Button\r\n                            className='gx-btn-danger'\r\n                            onClick={() => showRejectConfirm()}\r\n                        >\r\n                            Reject\r\n                        </Button>\r\n                        <Tooltip title={<IntlMessages id='report.download' />}>\r\n                            <Button onClick={() => downloadExcel()} >\r\n                                <DownloadOutlined />\r\n                            </Button>\r\n                        </Tooltip>\r\n                        <Badge count={messageCount}>\r\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\r\n                                content={<AdminNotifications isAdmin={isUserAdmin} data={pdtList && pdtList.messages ? pdtList.messages : []} />} trigger='click'>\r\n                                <Button\r\n                                    className='mr-0'\r\n                                    onClick={() => dispatch(partnerMarkMessageRead(\r\n                                        isUserAdmin ? 'admin' : 'partner',\r\n                                        () => setMessageCount(0)\r\n                                    ))}\r\n                                >\r\n                                    <MailOutlined />\r\n                                </Button>\r\n                            </Popover>\r\n                        </Badge>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div className='gx-flex-row'>\r\n                        <Button\r\n                            type='primary'\r\n                            onClick={() => { saveData(false) }}\r\n                            disabled={report_status === 'Approved'}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => showSubmitConfirm()}\r\n                            className='gx-btn-success'\r\n                            disabled={report_status === 'Approved'}\r\n                        >\r\n                            Submit Report\r\n                        </Button>\r\n                        <Badge count={messageCount}>\r\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\r\n                                content={<AdminNotifications data={pdtList && pdtList.messages ? pdtList.messages : []} />} trigger='click'>\r\n                                <Button\r\n                                    className='mr-0'\r\n                                    onClick={() => dispatch(partnerMarkMessageRead(\r\n                                        isUserAdmin ? 'admin' : 'partner',\r\n                                        () => setMessageCount(0)\r\n                                    ))}\r\n                                >\r\n                                    <MailOutlined />\r\n                                </Button>\r\n                            </Popover>\r\n                        </Badge>\r\n                        <Tooltip title={<IntlMessages id='report.download' />}>\r\n                            <Button className='mr-0' onClick={() => downloadExcel()} >\r\n                                <DownloadOutlined />\r\n                            </Button>\r\n                        </Tooltip>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const downloadExcel = () => {\r\n        gridApi.selectAll();\r\n        gridApi.exportDataAsExcel({\r\n            sheetName: 'pdt',\r\n            fileName: 'pdt'\r\n        })\r\n        gridApi.deselectAll();\r\n    }\r\n\r\n    const checkDate = (value) => {\r\n        return moment(value, 'M/D/YYYY').format('M/D/YYYY') === value || moment(value, 'MM/DD/YYYY').format('MM/DD/YYYY') === value\r\n    }\r\n\r\n    const handleCellValueChange = (params) => {\r\n        const { colDef, node, newValue, oldValue } = params;\r\n        let rowNode = gridApi.getRowNode(node.id);\r\n        let fieldNameList = colDef.field.split('_');\r\n        if (newValue !== oldValue) {\r\n            if (fieldNameList[0] === 'start' || fieldNameList[0] === 'end') {\r\n                if (newValue === ' ') {\r\n                    rowNode.setDataValue(colDef.field, null)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const setReportHeight = () => {\r\n        return window.innerHeight - 120\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='gx-flex-row gx-justify-content-between'>\r\n                {displayHeader()}\r\n                {displayCTA()}\r\n            </div>\r\n            {\r\n                showReport ?\r\n                    <div className='ag-theme-balham' style={{ height: setReportHeight(), paddingBottom: 20 }}>\r\n                        <AgGridReact\r\n                            onGridReady={onGridReady}\r\n                            columnDefs={columnDefs}\r\n                            rowData={rowData}\r\n                            defaultColGroupDef={{ marryChildren: true }}\r\n                            defaultColDef={{\r\n                                filter: true,\r\n                                sortable: true,\r\n                                width: 300,\r\n                                resizable: true,\r\n                            }}\r\n                            autoGroupColumnDef={{\r\n                                headerName: 'Products',\r\n                                field: 'stage',\r\n                                editable: false,\r\n                                minWidth: 250,\r\n                            }}\r\n                            suppressRowTransform={true}\r\n                            enableRangeSelection={true}\r\n                            enableCellChangeFlash={true}\r\n                            onCellValueChanged={handleCellValueChange}\r\n                            animateRows={true}\r\n                            components={{ datePicker: getDatePicker() }}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    <Card>\r\n                        <Empty\r\n                            description={\r\n                                (<p className='empty-msg'>\r\n                                    <span>No Data Available</span><br />\r\n                                    <span>Please contact Admin for more information!</span>\r\n                                </p>)\r\n                            }\r\n                        />\r\n                    </Card>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DevelopmentTimeline\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\nimport 'ag-grid-enterprise';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { Button, Input, Modal, Popover, Form, Badge, Tooltip, Card, Empty } from 'antd';\r\nimport { MailOutlined, CheckCircleOutlined, CloseCircleOutlined, DownloadOutlined, LeftOutlined } from '@ant-design/icons';\r\nimport AdminNotifications from 'components/AdminNotifications';\r\nimport { showMessage } from '../../../helpers';\r\nimport { approveFilingPlansReport, getAdminFilingPlansData, getFilingPlansData, partnerMarkFilingPlansMessageRead, postAdminFilingPlansData, postFilingPlansData, submitFilingPlansReport } from '../../../appRedux/actions/FilingPlans';\r\nimport moment from 'moment';\r\nimport { findIndex, isEmpty } from 'lodash';\r\n\r\nconst confirm = Modal.confirm;\r\n\r\nconst FilingPlans = (props) => {\r\n    const [isDataReady, setIsDataReady] = useState(false);\r\n    const [showReport, setShowReport] = useState(false);\r\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\r\n    const [messageCount, setMessageCount] = useState(0);\r\n    const [partnerId, setPartnerId] = useState(null);\r\n    const [gridApi, setGridApi] = useState({});\r\n    const [columnApi, setColumnApi] = useState({});\r\n    const [rowData, setRowData] = useState(null);\r\n    const [productList, setProductList] = useState([]);\r\n    const [reportDetails, setReportDetails] = useState({});\r\n    const [apiStatusArray, setApiStatusArray] = useState([]);\r\n    const [fdfStatusArray, setFdfStatusArray] = useState([]);\r\n    const [columnDefs, setColumnDefs] = useState([\r\n        {\r\n            headerName: 'Country',\r\n            field: 'country',\r\n            editable: false\r\n        }\r\n    ]);\r\n    const plansList = useSelector(({ filingPlans }) => filingPlans.plansList);\r\n    const [form] = Form.useForm();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setFilingPlans()\r\n        return () => {\r\n            setIsDataReady(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isDataReady) {\r\n            addProduct();\r\n        }\r\n    }, [isDataReady])\r\n\r\n    const navigateBack = () => {\r\n        if (isUserAdmin) {\r\n            props.history.push('/admin/partner-list')\r\n        }\r\n    }\r\n\r\n    const setFilingPlans = () => {\r\n        const { id } = props.match.params;\r\n        if (id) {\r\n            setIsUserAdmin(true)\r\n            dispatch(getAdminFilingPlansData(id, (data) => {\r\n                setValues(data)\r\n                setPartnerId(id)\r\n            }))\r\n        } else {\r\n            dispatch(getFilingPlansData((data) => {\r\n                setValues(data)\r\n            }))\r\n        }\r\n    }\r\n\r\n    const setValues = (data) => {\r\n        let rowData = data.rows ? data.rows.map(value => {\r\n            let rowValue = { ...value };\r\n            data.product_details.forEach(\r\n                value => {\r\n                    if (!rowValue.hasOwnProperty(value.product_name) || !rowValue[value.product_name]) {\r\n                        rowValue[value.product_name] = '0'\r\n                    }\r\n                }\r\n            )\r\n            return rowValue\r\n        }) : [];\r\n        setRowData(rowData);\r\n        setProductList(data.product_details)\r\n        setMessageCount(data.unread_message_count)\r\n        setReportDetails(data.filing_meta);\r\n        setApiStatusArray(data.status_dropdown['API'])\r\n        setFdfStatusArray(data.status_dropdown['FDF'])\r\n        setShowReport(!isEmpty(data))\r\n    }\r\n\r\n    const onGridReady = (params) => {\r\n        setGridApi(params.api);\r\n        setColumnApi(params.columnApi)\r\n        setIsDataReady(true)\r\n    }\r\n\r\n    const addProduct = () => {\r\n        const { report_status } = reportDetails;\r\n        const column = [...columnDefs];\r\n        productList.forEach((value) => {\r\n            const obj = {\r\n                headerName: value.product_name,\r\n                field: value.product_name,\r\n                editable: isUserAdmin || report_status !== 'Approved',\r\n                cellEditorSelector: (params) => {\r\n                    return {\r\n                        component: 'agRichSelect',\r\n                        params: { values: value.product_type === 'API' ? apiStatusArray : fdfStatusArray }\r\n                    }\r\n                },\r\n                cellClass: (params) => {\r\n                    const { data } = params;\r\n                    if (data) {\r\n                        return ((report_status !== 'Approved' || isUserAdmin) ? 'editable-cell' : 'non-editable-cell');\r\n                    }\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        if (value.product_type === 'API') {\r\n                            return !apiStatusArray.includes(params.value)\r\n                        } else {\r\n                            return !fdfStatusArray.includes(params.value)\r\n                        }\r\n                    },\r\n                },\r\n                width: 200\r\n            }\r\n            column.push(obj)\r\n        })\r\n        setColumnDefs(column)\r\n        gridApi.setColumnDefs(column)\r\n    }\r\n\r\n    const checkDataValues = (dataList) => {\r\n        return !dataList.some(value => checkRow(value))\r\n    }\r\n\r\n    const checkRow = (rowData) => {\r\n        let apiFlag = Object.keys(rowData).filter(value => productList\r\n            .map(d => d.product_name).includes(value) && productList[findIndex(productList, { 'product_name': value })].product_type === 'API')\r\n            .some(val => !apiStatusArray.includes(rowData[val]))\r\n\r\n        let fdfFlag = Object.keys(rowData).filter(value => productList\r\n            .map(d => d.product_name).includes(value) && productList[findIndex(productList, { 'product_name': value })].product_type === 'FDF')\r\n            .some(val => !fdfStatusArray.includes(rowData[val]))\r\n\r\n        return apiFlag || fdfFlag\r\n    }\r\n\r\n    const saveReportBeforeAction = (callback) => {\r\n        gridApi.stopEditing();\r\n        gridApi.selectAll();\r\n        const obj = {}\r\n        let selectedNodes = gridApi.getSelectedNodes().filter(d => d.data);\r\n        if (checkDataValues(selectedNodes.map(value => value.data))) {\r\n            selectedNodes.forEach(node => {\r\n                const { country_id } = node.data;\r\n                if (obj[country_id] === undefined) {\r\n                    obj[country_id] = {}\r\n                }\r\n                productList.forEach((value) => {\r\n                    obj[country_id][value.product_id] = node.data[value.product_name]\r\n                })\r\n            })\r\n            if (isUserAdmin) {\r\n                dispatch(postAdminFilingPlansData(partnerId, obj, callback()))\r\n            } else {\r\n                dispatch(postFilingPlansData(obj, callback()))\r\n            }\r\n            gridApi.deselectAll()\r\n        } else {\r\n            Modal.error({\r\n                title: 'Invalid data!',\r\n                content: 'Please input valid entries!',\r\n            });\r\n            gridApi.deselectAll()\r\n        }\r\n    }\r\n\r\n    const saveData = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                showMessage('success', 'Data recorded successfully!')\r\n            }\r\n        )\r\n    }\r\n\r\n    const showSubmitConfirm = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                confirm({\r\n                    content: showCommentsForm(),\r\n                    okText: 'Submit',\r\n                    cancelText: 'Cancel',\r\n                    title: 'Do you want to submit the report?',\r\n                    className: 'btn-confirm-green',\r\n                    onOk(close) {\r\n                        form.validateFields().then(\r\n                            values => {\r\n                                let msg = values.commentData ? values.commentData : '';\r\n                                dispatch(submitFilingPlansReport(\r\n                                    { message: msg },\r\n                                    () => {\r\n                                        showMessage('success', 'Report has been submitted to the admin!');\r\n                                        setFilingPlans();\r\n                                        form.resetFields(['commentData'])\r\n                                    }\r\n                                ))\r\n                                close()\r\n                            }\r\n                        )\r\n                    },\r\n                    onCancel() {\r\n                        form.resetFields(['commentData'])\r\n                    },\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    const approver = (msg, isApproved) => {\r\n        let data = {\r\n            'partner_id': partnerId,\r\n            'message': msg,\r\n            'is_approved': isApproved\r\n        }\r\n        dispatch(approveFilingPlansReport(data, () => {\r\n            if (isApproved) {\r\n                showMessage('success', 'Report Approved!');\r\n            } else {\r\n                showMessage('success', 'Report Rejected!');\r\n            }\r\n            form.resetFields(['commentData'])\r\n            setFilingPlans()\r\n        }))\r\n    }\r\n\r\n    const showCommentsForm = () => {\r\n        return (\r\n            <Form\r\n                form={form}\r\n                layout='vertical'\r\n                className='mt-20'\r\n            >\r\n                <div className='mb-10'>\r\n                    <span>\r\n                        {\r\n                            isUserAdmin ? 'Add comments for partner:' : 'Add comments for admin:'\r\n                        }\r\n                    </span>\r\n                </div>\r\n                <Form.Item\r\n                    name='commentData'\r\n                    className='mb-0'\r\n                    rules={[\r\n                        { required: isUserAdmin, message: isUserAdmin ? 'Enter comments for partner' : 'Enter comments for admin' },\r\n                    ]}\r\n                >\r\n                    <Input.TextArea placeholder='Enter comments here' />\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n    const showRejectConfirm = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                confirm({\r\n                    title: 'Do you want to reject the report?',\r\n                    className: 'btn-confirm-red',\r\n                    content: showCommentsForm(),\r\n                    okText: 'Reject',\r\n                    cancelText: 'Cancel',\r\n                    icon: (<CloseCircleOutlined />),\r\n                    onOk(close) {\r\n                        form.validateFields().then(\r\n                            values => {\r\n                                let msg = values.commentData ? values.commentData : '';\r\n                                approver(msg, false);\r\n                                close()\r\n                            }\r\n                        )\r\n                    },\r\n                    onCancel() {\r\n                        form.resetFields(['commentData'])\r\n                    },\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    const showApproveConfirm = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                confirm({\r\n                    title: 'Do you want to approve the report?',\r\n                    className: 'btn-confirm-green',\r\n                    content: showCommentsForm(),\r\n                    icon: (<CheckCircleOutlined />),\r\n                    okText: 'Approve',\r\n                    cancelText: 'Cancel',\r\n                    onOk(close) {\r\n                        form.validateFields().then(\r\n                            values => {\r\n                                let msg = values.commentData ? values.commentData : '';\r\n                                approver(msg, true);\r\n                                close()\r\n                            }\r\n                        )\r\n                    },\r\n                    onCancel() {\r\n                        form.resetFields(['commentData'])\r\n                    },\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    const downloadExcel = () => {\r\n        gridApi.selectAll();\r\n        gridApi.exportDataAsExcel({\r\n            sheetName: 'filing-plans',\r\n            fileName: 'filing-plans'\r\n        })\r\n        gridApi.deselectAll();\r\n    }\r\n\r\n    const displayHeader = () => {\r\n        if (showReport) {\r\n            if (reportDetails) {\r\n                const { partner_name, quarter_name, report_status, approval_time, submission_time } = reportDetails;\r\n                return (\r\n                    <div className='gx-mb-4'>\r\n                        <h1 className='title '>{isUserAdmin ? <Tooltip title='Back'><LeftOutlined className='mr-10' onClick={navigateBack} /></Tooltip> : null}Filing Plans {isUserAdmin ? <span className='mr-5'>for <span className='text-capitalize'>{partner_name}</span></span> : null}\r\n                            <span className='text-capitalize'>({quarter_name})</span>\r\n                        </h1>\r\n                        <h4 className={isUserAdmin ? 'ml-30' : ''}>Report Status:&nbsp;\r\n                            <span className='text-capitalize'> {report_status}</span>\r\n                            <span>\r\n                                {!approval_time && !submission_time ? '' : ' on ' + moment(report_status === 'Submitted' || report_status === 'Resubmitted' ? submission_time : approval_time).format('Do MMM YYYY, hh:mm A')}\r\n                            </span>\r\n                        </h4>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return (\r\n                <div className='gx-mb-4'>\r\n                    <h1 className='title '>{isUserAdmin ? <LeftOutlined className='mr-5' onClick={navigateBack} /> : null} Filing Plans{isUserAdmin && reportDetails ? <span>for <span className='text-capitalize'>{reportDetails.partner_name}</span></span> : null}\r\n                    </h1>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    const displayCTA = () => {\r\n        if (showReport) {\r\n            const { report_status } = reportDetails\r\n            if (isUserAdmin) {\r\n                return (\r\n                    <div className='gx-flex-row'>\r\n                        <Button\r\n                            type='primary'\r\n                            onClick={() => { saveData(false) }}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <Button\r\n                            className='gx-btn-success'\r\n                            onClick={() => showApproveConfirm()}\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                        <Button\r\n                            className='gx-btn-danger'\r\n                            onClick={() => showRejectConfirm()}\r\n                        >\r\n                            Reject\r\n                        </Button>\r\n                        <Tooltip title={<IntlMessages id='report.download' />}>\r\n                            <Button onClick={() => downloadExcel()} >\r\n                                <DownloadOutlined />\r\n                            </Button>\r\n                        </Tooltip>\r\n                        <Badge count={messageCount}>\r\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\r\n                                content={<AdminNotifications isAdmin={isUserAdmin} data={plansList && plansList.messages ? plansList.messages : []} />} trigger='click'>\r\n                                <Button\r\n                                    className='mr-0'\r\n                                    onClick={() => dispatch(partnerMarkFilingPlansMessageRead(\r\n                                        isUserAdmin ? 'admin' : 'partner',\r\n                                        () => setMessageCount(0)\r\n                                    ))}\r\n                                >\r\n                                    <MailOutlined />\r\n                                </Button>\r\n                            </Popover>\r\n                        </Badge>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div className='gx-flex-row'>\r\n                        <Button\r\n                            type='primary'\r\n                            onClick={() => { saveData(false) }}\r\n                            disabled={report_status === 'Approved'}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <Button\r\n                            onClick={() => showSubmitConfirm()}\r\n                            className='gx-btn-success'\r\n                            disabled={report_status === 'Approved'}\r\n                        >\r\n                            Submit Report\r\n                        </Button>\r\n                        <Badge count={messageCount}>\r\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\r\n                                content={<AdminNotifications isAdmin={isUserAdmin} data={plansList && plansList.messages ? plansList.messages : []} />} trigger='click'>\r\n                                <Button\r\n                                    className='mr-0'\r\n                                    onClick={() => dispatch(partnerMarkFilingPlansMessageRead(\r\n                                        isUserAdmin ? 'admin' : 'partner',\r\n                                        () => setMessageCount(0)\r\n                                    ))}\r\n                                >\r\n                                    <MailOutlined />\r\n                                </Button>\r\n                            </Popover>\r\n                        </Badge>\r\n                        <Tooltip title={<IntlMessages id='report.download' />}>\r\n                            <Button className='mr-0' onClick={() => downloadExcel()} >\r\n                                <DownloadOutlined />\r\n                            </Button>\r\n                        </Tooltip>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n\r\n    }\r\n\r\n    const handleCellValueChange = (params) => {\r\n        const { colDef, node, newValue, oldValue } = params;\r\n        let rowNode = gridApi.getRowNode(node.id);\r\n        if (newValue !== oldValue && newValue === '') {\r\n            rowNode.setDataValue(colDef.field, '0');\r\n        }\r\n    }\r\n\r\n    const setReportHeight = () => {\r\n        return window.innerHeight - 120\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='gx-flex-row gx-justify-content-between'>\r\n                {displayHeader()}\r\n                {displayCTA()}\r\n            </div>\r\n            {\r\n                showReport ?\r\n                    <div className='ag-theme-balham' style={{ height: setReportHeight(), paddingBottom: 20 }}>\r\n                        <AgGridReact\r\n                            onGridReady={onGridReady}\r\n                            columnDefs={columnDefs}\r\n                            rowData={rowData}\r\n\r\n                            defaultColGroupDef={{ marryChildren: true }}\r\n                            defaultColDef={{\r\n                                filter: true,\r\n                                sortable: true,\r\n                                width: 300,\r\n                                resizable: true,\r\n                            }}\r\n                            enableRangeSelection={true}\r\n                            enableCellChangeFlash={true}\r\n                            onCellValueChanged={handleCellValueChange}\r\n                            animateRows={true}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    <Card>\r\n                        <Empty\r\n                            description={\r\n                                (<p className='empty-msg'>\r\n                                    <span>No Data Available</span><br />\r\n                                    <span>Please contact Admin for more information!</span>\r\n                                </p>)\r\n                            }\r\n                        />\r\n                    </Card>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilingPlans\r\n","import React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'ag-grid-enterprise';\r\nimport { Select } from 'antd';\r\n\r\nconst { Option } = Select\r\n\r\n\r\n\r\nexport const SearchSelect = forwardRef((props, ref) => {\r\n\r\n    const [optionValue, setOptionValue] = useState(props.value);\r\n    const [editing, setEditing] = useState(true);\r\n    const [productList, setProductList] = useState([])\r\n    const [productNameList, setProductNameList] = useState([])\r\n    const refContainer = useRef(null);\r\n    const productSelect = useRef(null);\r\n\r\n    useEffect(() => {\r\n        focus();\r\n        setProductList(props.colDef.selectValues)\r\n        if (props.value) {\r\n            let tempSelectValues = [...props.colDef.selectValues]\r\n            tempSelectValues.push(props.value)\r\n            setProductNameList(tempSelectValues)\r\n        } else {\r\n            setProductNameList(props.colDef.selectValues);\r\n        }\r\n    }, []);\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            getValue() {\r\n                return optionValue;\r\n            },\r\n            isPopup() {\r\n                return true;\r\n            }\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!editing) {\r\n            props.api.stopEditing()\r\n        }\r\n    }, [editing]);\r\n\r\n    const focus = () => {\r\n        window.setTimeout(() => {\r\n            let container = ReactDOM.findDOMNode(refContainer.current);\r\n            if (container) {\r\n                container.focus();\r\n                productSelect.current.focus();\r\n            }\r\n        })\r\n    };\r\n\r\n    const setValues = () => {\r\n        return productNameList.map(val => <Option key={val} >{val}</Option>)\r\n    }\r\n\r\n\r\n    const handleSelect = (val) => {\r\n        setOptionValue(val);\r\n        setEditing(false)\r\n    }\r\n\r\n    const handleSearch = (value) => {\r\n        let tempProductList = [...productList]\r\n        if (!tempProductList.includes(value)) {\r\n            tempProductList.push(value)\r\n        }\r\n        setProductNameList(tempProductList)\r\n    }\r\n\r\n    return (\r\n        <div ref={refContainer}\r\n            tabIndex={1} // important - without this the key presses wont be caught\r\n        >\r\n            <Select\r\n                showSearch\r\n                // mode='tags'\r\n                showArrow={true}\r\n                allowClear\r\n                placeholder='Enter product name'\r\n                style={{ width: 200 }}\r\n                onSelect={handleSelect}\r\n                onSearch={handleSearch}\r\n                defaultValue={props.value}\r\n                // defaultOpen={true}\r\n                // autoFocus={true}\r\n                ref={productSelect}\r\n            >\r\n                {setValues()}\r\n            </Select>\r\n        </div>\r\n    );\r\n});\r\n","export const initRowData = (data) => {\r\n    let rowValueList = [...data]\r\n    for (let i = 0; i < 500; i++) {\r\n        rowValueList.push({})\r\n    }\r\n    return rowValueList\r\n}\r\n\r\nexport const suppressEnter = (params) => {\r\n    var KEY_ENTER = 13;\r\n    var event = params.event;\r\n    var key = event.which;\r\n    var suppress = key === KEY_ENTER;\r\n    return suppress;\r\n}\r\n\r\nexport const getReportHeight = () => {\r\n    return window.innerHeight - 230\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Row, Col, Select, Form, Radio, Card, Modal, Button } from 'antd';\r\nimport { pick } from 'lodash'\r\nimport { postAdminProductsToBeVerified } from '../../../appRedux/actions/SalesReport';\r\nimport { getAdminProductDetails } from '../../../appRedux/actions/AdminProducts';\r\n\r\n\r\nconst ProductVerificationModal = (props) => {\r\n    const { visible, statusArray, hideVerificationModal, partnerId, setSalesReport } = props;\r\n\r\n    const dispatch = useDispatch();\r\n    const [verificationForm] = Form.useForm();\r\n    const { productVerificationList, isLoaded } = useSelector(({ salesReport }) => salesReport);\r\n    const [toBeVerifiedProductList, setToBeVerifiedProductList] = useState([])\r\n    const [productList, setProductList] = useState([])\r\n    const [productNameList, setProductNameList] = useState([])\r\n\r\n    useEffect(() => {\r\n        setToBeVerifiedProductList(productVerificationList.pending_products)\r\n        setProductList(productVerificationList.existing_products)\r\n        setProductNameList(productVerificationList.existing_products.map(value => value.product_name))\r\n    }, [])\r\n\r\n    const handleVerification = () => {\r\n        verificationForm.validateFields().then(\r\n            values => {\r\n                dispatch(postAdminProductsToBeVerified(\r\n                    partnerId,\r\n                    values.active_products.map(value => pick(value, ['product_verification_id', 'product_name', 'is_approved', 'category', 'therapy_area', 'product_status'])),\r\n                    () => {\r\n                        hideVerificationModal()\r\n                        setSalesReport()\r\n                    }\r\n                ))\r\n            }\r\n        )\r\n    }\r\n\r\n    const handleFormValueChange = (newValue, newValueList) => {\r\n        setToBeVerifiedProductList(newValueList.active_products)\r\n    }\r\n\r\n    const handleProductSearch = (value) => {\r\n        let tempProductList = productList.map(value => value.product_name)\r\n        if (!tempProductList.includes(value)) {\r\n            tempProductList.push(value)\r\n        }\r\n        setProductNameList(tempProductList)\r\n    }\r\n\r\n    const handleProductSelect = (value, key) => {\r\n        if (productList.map(val => val.product_name).includes(value)) {\r\n            dispatch(getAdminProductDetails(\r\n                {\r\n                    'product_name': value,\r\n                    'partner_id': partnerId\r\n                },\r\n                (data) => {\r\n                    if (data) {\r\n                        const { category, therapy_area, product_status } = data;\r\n                        let tempToBeVerifiedProductList = [...toBeVerifiedProductList];\r\n                        tempToBeVerifiedProductList[key].category = category;\r\n                        tempToBeVerifiedProductList[key].therapy_area = therapy_area;\r\n                        tempToBeVerifiedProductList[key].product_status = product_status;\r\n                        tempToBeVerifiedProductList[key].product_name = value;\r\n                        tempToBeVerifiedProductList[key].does_product_exist = true;\r\n                        verificationForm.setFieldsValue({\r\n                            active_products: tempToBeVerifiedProductList\r\n                        })\r\n                        setToBeVerifiedProductList(tempToBeVerifiedProductList)\r\n                    }\r\n                }\r\n            ))\r\n        } else {\r\n            let tempToBeVerifiedProductList = [...toBeVerifiedProductList];\r\n            tempToBeVerifiedProductList[key].product_name = value;\r\n            tempToBeVerifiedProductList[key].does_product_exist = false;\r\n            verificationForm.setFieldsValue({\r\n                active_products: tempToBeVerifiedProductList\r\n            })\r\n            setToBeVerifiedProductList(tempToBeVerifiedProductList)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title='Product Verification'\r\n            visible={visible}\r\n            okText='Submit'\r\n            onCancel={() => { hideVerificationModal() }}\r\n            width={900}\r\n            footer={[\r\n                <Button key='submit' type='primary' onClick={() => { handleVerification() }}>Submit</Button>,\r\n                <Button key='cancel' onClick={() => { hideVerificationModal() }}>Cancel</Button>\r\n            ]}\r\n        >\r\n            <Form\r\n                form={verificationForm}\r\n                layout='vertical'\r\n                initialValues={{\r\n                    active_products: productVerificationList ?\r\n                        productVerificationList.pending_products\r\n                        : []\r\n                }}\r\n                onValuesChange={handleFormValueChange}\r\n            >\r\n                <Form.List\r\n                    name='active_products'\r\n                >\r\n                    {(fields, { add, remove }) => {\r\n                        return (\r\n                            <div>\r\n                                {fields.map((field, index) => (\r\n                                    <Form.Item\r\n                                        key={field.key}\r\n                                        validateTrigger={['onChange', 'onBlur']}\r\n                                        rules={[\r\n                                            {\r\n                                                required: false,\r\n                                                message: 'Please enter details',\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <div className='flex-d-row'>\r\n                                            <Col span={24}>\r\n                                                <Card className='mb-0'>\r\n                                                    <Row className='gx-flex-row'>\r\n                                                        <Col span={16}>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                className='mb-0'\r\n                                                                label='Product name'\r\n                                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                                name={[field.name, 'product_name']}\r\n                                                                fieldKey={[field.fieldKey, 'product_name']}\r\n                                                                rules={[\r\n                                                                    {\r\n                                                                        required: true,\r\n                                                                        message: 'Please Enter Product name',\r\n                                                                    },\r\n                                                                ]}\r\n                                                            >\r\n                                                                <Select\r\n                                                                    placeholder='Enter product name'\r\n                                                                    showSearch\r\n                                                                    // mode='tags'\r\n                                                                    showArrow={true}\r\n                                                                    onSearch={handleProductSearch}\r\n                                                                    onSelect={(value) => handleProductSelect(value, field.key)}\r\n                                                                >\r\n                                                                    {\r\n                                                                        productNameList.map(value => <Select.Option key={value}>{value}</Select.Option>)\r\n                                                                    }\r\n                                                                </Select>\r\n                                                            </Form.Item>\r\n                                                        </Col>\r\n                                                        <Col span={8}>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                className='mb-0'\r\n                                                                label='Approve Status'\r\n                                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                                name={[field.name, 'is_approved']}\r\n                                                                fieldKey={[field.fieldKey, 'is_approved']}\r\n                                                                rules={[\r\n                                                                    {\r\n                                                                        required: true,\r\n                                                                        message: 'Please enter status.',\r\n                                                                    },\r\n                                                                ]}\r\n                                                            >\r\n                                                                <Radio.Group buttonStyle='solid' >\r\n                                                                    <Radio.Button value={true}>Confirm</Radio.Button>\r\n                                                                    <Radio.Button value={false}>Reject</Radio.Button>\r\n                                                                </Radio.Group>\r\n                                                            </Form.Item>\r\n                                                        </Col>\r\n                                                        <Col span={8}>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                className='mb-0 mt-20'\r\n                                                                label='Category'\r\n                                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                                name={[field.name, 'category']}\r\n                                                                fieldKey={[field.fieldKey, 'category']}\r\n                                                                rules={[\r\n                                                                    {\r\n                                                                        required: !(toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false || toBeVerifiedProductList[field.fieldKey].does_product_exist)),\r\n                                                                        message: 'Please select category',\r\n                                                                    },\r\n                                                                ]}\r\n                                                            >\r\n                                                                <Radio.Group\r\n                                                                    disabled={toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false || toBeVerifiedProductList[field.fieldKey].does_product_exist)}\r\n                                                                >\r\n                                                                    <Radio value='FDF'>FDF</Radio>\r\n                                                                    <Radio value='API'>API</Radio>\r\n                                                                </Radio.Group>\r\n                                                            </Form.Item>\r\n                                                        </Col>\r\n                                                        <Col span={8}>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                className='mb-0 mt-20'\r\n                                                                label='Therapy Area'\r\n                                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                                name={[field.name, 'therapy_area']}\r\n                                                                fieldKey={[field.fieldKey, 'therapy_area']}\r\n                                                                rules={[\r\n                                                                    {\r\n                                                                        required: !(toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false || toBeVerifiedProductList[field.fieldKey].does_product_exist)),\r\n                                                                        message: 'Please select therapy area.',\r\n                                                                    },\r\n                                                                ]}\r\n                                                            >\r\n                                                                <Select\r\n                                                                    placeholder='Select therapy area'\r\n                                                                    disabled={toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false || toBeVerifiedProductList[field.fieldKey].does_product_exist)}\r\n                                                                >\r\n                                                                    <Select.Option value='HIV'>HIV</Select.Option >\r\n                                                                    <Select.Option value='HCV'>HCV</Select.Option >\r\n                                                                    <Select.Option value='HBV'>HBV</Select.Option >\r\n                                                                </Select>\r\n                                                            </Form.Item>\r\n                                                        </Col>\r\n                                                        <Col span={8}>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                className='mb-0 mt-20'\r\n                                                                label='Product Status'\r\n                                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                                name={[field.name, 'product_status']}\r\n                                                                fieldKey={[field.fieldKey, 'product_status']}\r\n                                                                rules={[\r\n                                                                    {\r\n                                                                        required: !(toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false)),\r\n                                                                        message: 'Please enter status.',\r\n                                                                    },\r\n                                                                ]}\r\n                                                            >\r\n                                                                <Select\r\n                                                                    placeholder='Please select product status'\r\n                                                                    className='product-select'\r\n                                                                    disabled={toBeVerifiedProductList && toBeVerifiedProductList[field.fieldKey] && (toBeVerifiedProductList[field.fieldKey].is_approved === false)}\r\n                                                                >\r\n                                                                    {\r\n                                                                        statusArray && statusArray.length ? statusArray.map(\r\n                                                                            value => (<Select.Option key={statusArray.indexOf(value)} value={value.id}>{value.name}</Select.Option>)\r\n                                                                        ) : []\r\n                                                                    }\r\n                                                                </Select>\r\n                                                            </Form.Item>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card>\r\n                                            </Col>\r\n                                        </div>\r\n                                    </Form.Item>\r\n                                ))}\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Form.List>\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ProductVerificationModal\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\nimport 'ag-grid-enterprise';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { Button, Input, Modal, Popover, Form, Badge, Tooltip, Tabs, InputNumber, Alert } from 'antd';\r\nimport { MailOutlined, CheckCircleOutlined, CloseCircleOutlined, DownloadOutlined, LeftOutlined } from '@ant-design/icons';\r\nimport AdminNotifications from 'components/AdminNotifications';\r\nimport { monthArray, showMessage, yearList, formulationType, currencyList, statusArray } from '../../../helpers';\r\nimport { approveSalesReportData, getAdminApiSalesData, getAdminFdfSalesData, getAdminProductsToBeVerified, getApiSalesData, getFdfSalesData, partnerMarkSalesReportMessageRead, postAdminApiSalesData, postAdminFdfSalesData, postAdminProductsToBeVerified, postApiSalesReportData, postFdfSalesReportData, submitSalesReportData } from '../../../appRedux/actions/SalesReport';\r\nimport { isEmpty, findIndex, has } from 'lodash';\r\nimport moment from 'moment'\r\n\r\nimport { SearchSelect } from './searchSelect'\r\n\r\nimport './sales-report.css'\r\nimport { initRowData, suppressEnter } from './sales-report-util';\r\nimport ProductVerificationModal from './productVerificationModal';\r\n\r\nconst confirm = Modal.confirm;\r\nconst TabPane = Tabs.TabPane;\r\n\r\n\r\nconst SalesReport = (props) => {\r\n    const [isDataReady, setIsDataReady] = useState(false);\r\n    const [isFdfInitialized, setIsFdfInitialized] = useState(false);\r\n    const [areApiRowsSelected, setAreApiRowsSelected] = useState(false);\r\n    const [areFdfRowsSelected, setAreFdfRowsSelected] = useState(false);\r\n    const [deleteApiIds, setDeleteApiIds] = useState([]);\r\n    const [deleteFdfIds, setDeleteFdfIds] = useState([]);\r\n    const [addApiRowNumber, setAddApiRowNumber] = useState(0);\r\n    const [addFdfRowNumber, setAddFdfRowNumber] = useState(0);\r\n\r\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\r\n    const [showVerificationModal, setShowVerificationModal] = useState(false);\r\n    const [pendingProducts, setPendingProducts] = useState(0);\r\n    const [partnerId, setPartnerId] = useState(null);\r\n    const [reportDetails, setReportDetails] = useState({});\r\n\r\n    const [apiGridApi, setApiGridApi] = useState(null);\r\n    const [fdfGridApi, setFdfGridApi] = useState(null);\r\n    const [ApiRowData, setApiRowData] = useState([]);\r\n    const [FdfRowData, setFdfRowData] = useState([]);\r\n    const [ApiColumnDefs, setApiColumnDefs] = useState([]);\r\n    const [FdfColumnDefs, setFdfColumnDefs] = useState([]);\r\n\r\n    const [messageCount, setMessageCount] = useState(0);\r\n    const [countryOrder, setCountryOrder] = useState([]);\r\n    const [countryDropdown, setCountryDropdown] = useState([]);\r\n    const [apiProductOrder, setApiProductOrder] = useState([]);\r\n    const [apiProductDropdown, setApiProductDropdown] = useState([]);\r\n    const [fdfProductOrder, setFdfProductOrder] = useState([]);\r\n    const [fdfProductDropdown, setFdfProductDropdown] = useState([]);\r\n    const [yearDropdown, setYearDropdown] = useState([]);\r\n    const [monthDropdown, setMonthDropdown] = useState([]);\r\n    const [tabKey, setTabKey] = useState('api');\r\n\r\n    const { apiSalesList, fdfSalesList } = useSelector(({ salesReport }) => salesReport);\r\n    const [form] = Form.useForm();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setSalesReport()\r\n        return () => {\r\n            setIsDataReady(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isDataReady && !isFdfInitialized) { addApiColumns(); }\r\n        if (isFdfInitialized) { addFdfColumns(); }\r\n    }, [isDataReady, isFdfInitialized])\r\n\r\n    const navigateBack = () => {\r\n        if (isUserAdmin) {\r\n            props.history.push('/admin/partner-list')\r\n        }\r\n    }\r\n\r\n    const setSalesReport = () => {\r\n        const { id } = props.match.params;\r\n        if (id) {\r\n            setIsUserAdmin(true)\r\n            dispatch(getAdminApiSalesData(id, (apiData) => {\r\n                setApiValues(apiData);\r\n                dispatch(getAdminFdfSalesData(id, (fdfData) => {\r\n                    setFdfValues(fdfData);\r\n                    setIsDataReady(true);\r\n                    setPartnerId(id)\r\n                }))\r\n            }))\r\n        } else {\r\n            dispatch(getApiSalesData((apiData) => {\r\n                setApiValues(apiData);\r\n                dispatch(getFdfSalesData((fdfData) => {\r\n                    setFdfValues(fdfData);\r\n                    setIsDataReady(true)\r\n                }))\r\n            }))\r\n        }\r\n    }\r\n\r\n    const setApiValues = (data) => {\r\n        const { country_order, product_order, rows, sales_meta, unread_message_count, pending_product_count } = data;\r\n        setCountryOrder(country_order && country_order.length ? country_order : []);\r\n        setCountryDropdown(country_order && country_order.length ? country_order.map(\r\n            value => value.country_name\r\n        ) : [])\r\n        setApiProductOrder(product_order && product_order.length ? product_order : []);\r\n        setApiProductDropdown(product_order && product_order.length ? product_order.map(\r\n            value => value.product_name\r\n        ) : [])\r\n        setYearDropdown(yearList());\r\n        setMonthDropdown(monthArray.map(value => value.name))\r\n        setApiRowData(initRowData(rows))\r\n        setReportDetails(sales_meta)\r\n        setMessageCount(unread_message_count)\r\n        setPendingProducts(pending_product_count)\r\n    }\r\n\r\n    const setFdfValues = (data) => {\r\n        const { product_order, rows, sales_meta, unread_message_count } = data;\r\n        setFdfProductOrder(product_order && product_order.length ? product_order : []);\r\n        setFdfProductDropdown(product_order && product_order.length ? product_order.map(\r\n            value => value.product_name\r\n        ) : [])\r\n        setFdfRowData(initRowData(rows));\r\n        setReportDetails(sales_meta)\r\n        setMessageCount(unread_message_count)\r\n    }\r\n\r\n    const onApiGridReady = (params) => {\r\n        setApiGridApi(params.api);\r\n    }\r\n\r\n    const onFdfGridReady = (params) => {\r\n        setFdfGridApi(params.api);\r\n        setIsFdfInitialized(true)\r\n    }\r\n\r\n    const addApiColumns = () => {\r\n        let apiColumns = [\r\n            {\r\n                headerName: 'Sr.No',\r\n                checkboxSelection: true,\r\n                valueGetter: 'node.rowIndex + 1',\r\n                headerCheckboxSelection: true,\r\n                width: 100\r\n            },\r\n            {\r\n                headerName: 'Year',\r\n                field: 'year',\r\n                cellEditorSelector: (params) => {\r\n                    return {\r\n                        component: 'agRichSelect',\r\n                        params: { values: yearDropdown }\r\n                    }\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return ((isNaN(value) || (!isNaN(value) && !yearDropdown.includes(value))) && (value))\r\n                    },\r\n                },\r\n                width: 120\r\n            },\r\n            {\r\n                headerName: 'Month',\r\n                field: 'month',\r\n                cellEditorSelector: (params) => {\r\n                    return {\r\n                        component: 'agRichSelect',\r\n                        params: { values: monthDropdown }\r\n                    }\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (!monthDropdown.includes(value) && (value))\r\n                    },\r\n                },\r\n                width: 150\r\n            },\r\n            {\r\n                headerName: 'Country',\r\n                field: 'country_name',\r\n                cellEditorSelector: (params) => {\r\n                    return {\r\n                        component: 'agRichSelect',\r\n                        params: { values: countryDropdown }\r\n                    }\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (!countryDropdown.includes(value) && (value))\r\n                    },\r\n                },\r\n                width: 150\r\n            },\r\n            {\r\n                headerName: 'Purchaser',\r\n                field: 'purchaser',\r\n                width: 200\r\n            },\r\n            {\r\n                headerName: 'Api Name',\r\n                field: 'product_name',\r\n                cellEditor: 'searchSelector',\r\n                selectValues: apiProductDropdown,\r\n                suppressKeyboardEvent: (params) => {\r\n                    return suppressEnter(params)\r\n                },\r\n                width: 200\r\n            },\r\n            {\r\n                headerName: 'Quantity (Kg)',\r\n                field: 'quantity',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && value !== null && value !== undefined)\r\n                    },\r\n                },\r\n                width: 200\r\n            },\r\n            {\r\n                headerName: 'Total Value (USD)',\r\n                field: 'total_value',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && value !== null && value !== undefined)\r\n                    },\r\n                },\r\n                width: 200\r\n            }\r\n        ]\r\n        setApiColumnDefs(apiColumns);\r\n        if (apiProductDropdown && apiProductDropdown.length) {\r\n            apiGridApi.setColumnDefs(apiColumns);\r\n        }\r\n    }\r\n\r\n    const addFdfColumns = () => {\r\n        let fdfColumns = [\r\n            {\r\n                headerName: 'Sr.No',\r\n                checkboxSelection: true,\r\n                valueGetter: 'node.rowIndex + 1',\r\n                headerCheckboxSelection: true,\r\n                width: 100\r\n            },\r\n            {\r\n                headerName: 'Year',\r\n                field: 'year',\r\n                cellEditorSelector: (params) => {\r\n                    return {\r\n                        component: 'agRichSelect',\r\n                        params: { values: yearDropdown }\r\n                    }\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return ((isNaN(value) || (!isNaN(value) && !yearDropdown.includes(value))) && (value))\r\n                    },\r\n                },\r\n                width: 100\r\n            },\r\n            {\r\n                headerName: 'Month',\r\n                field: 'month',\r\n                cellEditorSelector: (params) => {\r\n                    return {\r\n                        component: 'agRichSelect',\r\n                        params: { values: monthDropdown }\r\n                    }\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (!monthDropdown.includes(value) && (value))\r\n                    },\r\n                },\r\n                width: 100\r\n            },\r\n            {\r\n                headerName: 'Country',\r\n                field: 'country_name',\r\n                cellEditorSelector: (params) => {\r\n                    return {\r\n                        component: 'agRichSelect',\r\n                        params: { values: countryDropdown }\r\n                    }\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (!countryDropdown.includes(value) && (value))\r\n                    },\r\n                },\r\n                width: 150\r\n            },\r\n            {\r\n                headerName: 'Purchaser',\r\n                field: 'purchaser',\r\n                width: 200\r\n            },\r\n            {\r\n                headerName: 'Product',\r\n                field: 'product_name',\r\n                cellEditor: 'searchSelector',\r\n                selectValues: fdfProductDropdown,\r\n                suppressKeyboardEvent: (params) => {\r\n                    return suppressEnter(params)\r\n                },\r\n                width: 200\r\n            },\r\n            {\r\n                headerName: 'Strength',\r\n                field: 'strength',\r\n                width: 150\r\n            },\r\n            {\r\n                headerName: 'Formulation Type',\r\n                field: 'formulation_md',\r\n                cellEditorSelector: (params) => {\r\n                    return {\r\n                        component: 'agRichSelect',\r\n                        params: { values: formulationType }\r\n                    }\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (!formulationType.includes(value) && (value))\r\n                    },\r\n                },\r\n                width: 150\r\n            },\r\n            {\r\n                headerName: 'Pack Size',\r\n                field: 'pack_size',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && (value))\r\n                    },\r\n                },\r\n                width: 100\r\n            },\r\n            {\r\n                headerName: 'Quantity',\r\n                field: 'quantity',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && (value))\r\n                    },\r\n                },\r\n                width: 100\r\n            },\r\n            {\r\n                headerName: 'Currency',\r\n                field: 'currency',\r\n                cellEditorSelector: (params) => {\r\n                    return {\r\n                        component: 'agRichSelect',\r\n                        params: { values: Object.keys(currencyList) }\r\n                    }\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        let currenyArr = Object.keys(currencyList)\r\n                        return (!currenyArr.includes(value) && (value))\r\n                    },\r\n                },\r\n                width: 100\r\n            },\r\n            {\r\n                headerName: 'Gross Sale Price (per pack) (Local Currency)',\r\n                field: 'gross_sale_price_currency',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && (value))\r\n                    },\r\n                },\r\n                width: 300\r\n            },\r\n            {\r\n                headerName: 'Applicable Currency Exchange Rate to USD',\r\n                field: 'usd_exchange_rate',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && (value))\r\n                    },\r\n                },\r\n                width: 300\r\n            },\r\n            {\r\n                headerName: 'Gross Sale Price (per pack) (USD)',\r\n                field: 'gross_sale_price_usd',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && (value))\r\n                    },\r\n                },\r\n                width: 300\r\n            },\r\n            {\r\n                headerName: 'Total Gross Sales Value (USD)',\r\n                field: 'total_gross_value',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && (value))\r\n                    },\r\n                },\r\n                width: 300\r\n            },\r\n            {\r\n                headerName: 'Deductable Expenses (USD)',\r\n                field: 'deductable_expenses',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && (value))\r\n                    },\r\n                },\r\n                width: 200\r\n            },\r\n            {\r\n                headerName: 'Total Net Sales Value',\r\n                field: 'total_value',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && (value))\r\n                    },\r\n                },\r\n                width: 200\r\n            },\r\n            {\r\n                headerName: 'Royalty %',\r\n                field: 'royalty_percent',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && (value))\r\n                    },\r\n                },\r\n                width: 100\r\n            },\r\n            {\r\n                headerName: 'Royalty Due',\r\n                field: 'royalty_due',\r\n                type: 'valueColumn',\r\n                valueParser: (params) => {\r\n                    const { newValue } = params\r\n                    return isNaN(newValue) ? newValue : Number(newValue)\r\n                },\r\n                cellClassRules: {\r\n                    'error-cell': (params) => {\r\n                        const { value } = params\r\n                        return (isNaN(value) && (value))\r\n                    },\r\n                },\r\n                width: 200\r\n            },\r\n            {\r\n                headerName: 'Procurement Agency End-Country',\r\n                field: 'procurement_end_country',\r\n                width: 150\r\n            },\r\n            {\r\n                headerName: 'Comments',\r\n                field: 'comments',\r\n                width: 200\r\n            }\r\n        ]\r\n        setFdfColumnDefs(fdfColumns);\r\n        if (fdfProductDropdown && fdfProductDropdown.length) {\r\n            fdfGridApi.setColumnDefs(fdfColumns);\r\n        }\r\n    }\r\n\r\n    const addApiRow = () => {\r\n        let rowData = [...ApiRowData];\r\n        for (let i = 0; i < addApiRowNumber; i++) {\r\n            rowData.push({});\r\n        }\r\n        setApiRowData(rowData)\r\n        setAddApiRowNumber(0)\r\n    }\r\n\r\n    const addFdfRow = () => {\r\n        let rowData = [...FdfRowData];\r\n        for (let i = 0; i < addFdfRowNumber; i++) {\r\n            rowData.push({});\r\n        }\r\n        setFdfRowData(rowData)\r\n        setAddFdfRowNumber(0)\r\n    }\r\n\r\n    const checkApiRowNodes = (dataList) => {\r\n        if (dataList.some(value => checkApiRow(value).flag)) {\r\n            let errorData = dataList.filter(val => checkApiRow(val).flag)\r\n            let errorIndex = dataList.map((val, index) => {\r\n                if (checkApiRow(val).flag === true) {\r\n                    return index + 1\r\n                }\r\n            }).filter(val => val !== undefined)\r\n            let apiErrorList = errorData.map((val, index) => ({ errorkeys: checkApiRow(val).errorKey, index: errorIndex[index] }));\r\n            let errMsg = () => {\r\n                return (\r\n                    <div>\r\n                        <p>Please Check API Table:</p>\r\n                        {\r\n                            apiErrorList.map(value => {\r\n                                return (\r\n                                    <p>\r\n                                        <span className='mr-5'>Row no. {value.index}: </span>\r\n                                        <span>{value.errorkeys.map((val, index) => value.errorkeys.length === (index + 1) ? val : val + ', ')}</span>\r\n                                    </p>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            Modal.error({\r\n                title: 'Invalid data!',\r\n                content: errMsg(),\r\n            });\r\n        }\r\n        return !dataList.some(value => checkApiRow(value).flag)\r\n    }\r\n\r\n    const checkApiRow = (rowData) => {\r\n        let flag = false;\r\n        let errorKey = [];\r\n        for (let key in rowData) {\r\n            if (rowData.hasOwnProperty(key)) {\r\n                if (key === 'year' && ((isNaN(rowData['year']) || !yearDropdown.includes(Number(rowData['year']))) && rowData['year'] !== '' && rowData['year'] !== null)) {\r\n                    flag = true;\r\n                    errorKey.push('Year');\r\n                } if (key === 'month' && (!monthDropdown.includes(rowData['month']) && rowData['month'] !== '' && rowData['month'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Month');\r\n                } if (key === 'country_name' && (!countryDropdown.includes(rowData['country_name']) && rowData['country_name'] !== '' && rowData['country_name'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Country');\r\n                } if (key === 'quantity' && (isNaN(rowData['quantity']) && rowData['quantity'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Quantity');\r\n                } if (key === 'total_value' && (isNaN(rowData['total_value']) && rowData['total_value'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Total Value');\r\n                }\r\n            }\r\n        }\r\n        return { flag, errorKey }\r\n    }\r\n\r\n    const checkFdfRowNodes = (dataList) => {\r\n        if (dataList.some(value => checkFdfRow(value).flag)) {\r\n            let errorData = dataList.filter(val => checkFdfRow(val).flag)\r\n            let errorIndex = dataList.map((val, index) => {\r\n                if (checkFdfRow(val).flag === true) {\r\n                    return index + 1\r\n                }\r\n            }).filter(val => val !== undefined)\r\n            let fdfErrorList = errorData.map((val, index) => ({ errorkeys: checkFdfRow(val).errorKey, index: errorIndex[index] }));\r\n            let errMsg = () => {\r\n                return (\r\n                    <div>\r\n                        <p>Please Check FDF Table:</p>\r\n                        {\r\n                            fdfErrorList.map(value => {\r\n                                return (\r\n                                    <p>\r\n                                        <span className='mr-5'>Row no. {value.index}: </span>\r\n                                        <span>{value.errorkeys.map((val, index) => value.errorkeys.length === (index + 1) ? val : val + ', ')}</span>\r\n                                    </p>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            Modal.error({\r\n                title: 'Invalid data!',\r\n                content: errMsg(),\r\n            });\r\n        }\r\n        return !dataList.some(value => checkFdfRow(value).flag)\r\n    }\r\n\r\n    const checkFdfRow = (rowData) => {\r\n        let flag = false;\r\n        let errorKey = [];\r\n        for (let key in rowData) {\r\n            if (rowData.hasOwnProperty(key)) {\r\n                if (key === 'year' && ((isNaN(rowData['year']) || !yearDropdown.includes(Number(rowData['year']))) && rowData['year'] !== '' && rowData['year'] !== null)) {\r\n                    flag = true;\r\n                    errorKey.push('Year');\r\n                }\r\n                if (key === 'month' && (!monthDropdown.includes(rowData['month']) && rowData['month'] !== '' && rowData['month'] !== null)) {\r\n                    flag = true;\r\n                    errorKey.push('Month');\r\n                }\r\n                if (key === 'country_name' && (!countryDropdown.includes(rowData['country_name']) && rowData['country_name'] !== '' && rowData['country_name'] !== null)) {\r\n                    flag = true;\r\n                    errorKey.push('Country');\r\n                }\r\n                if (key === 'quantity' && (isNaN(rowData['quantity']) && rowData['quantity'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Quantity');\r\n                }\r\n                if (key === 'formulation_md' && (!formulationType.includes(rowData['formulation_md']) && rowData['formulation_md'] !== '' && rowData['formulation_md'] !== null)) {\r\n                    flag = true;\r\n                    errorKey.push('Formulation Type');\r\n                }\r\n                if (key === 'pack_size' && (isNaN(rowData['pack_size']) && rowData['pack_size'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Pack Size');\r\n                }\r\n                if (key === 'currency' && (!Object.keys(currencyList).includes(rowData['currency']) && rowData['currency'] && rowData['currency'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Currency');\r\n                }\r\n                if (key === 'gross_sale_price_currency' && (isNaN(rowData['gross_sale_price_currency']) && rowData['gross_sale_price_currency'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Gross Sale Price (per pack) (Local Currency)');\r\n                }\r\n                if (key === 'usd_exchange_rate' && (isNaN(rowData['usd_exchange_rate']) && rowData['usd_exchange_rate'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Applicable Currency Exchange Rate');\r\n                }\r\n                if (key === 'gross_sale_price_usd' && (isNaN(rowData['gross_sale_price_usd']) && rowData['gross_sale_price_usd'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Gross Sale Price (per pack) (USD)');\r\n                }\r\n                if (key === 'total_gross_value' && (isNaN(rowData['total_gross_value']) && rowData['total_gross_value'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Total Gross Sales Value (USD)');\r\n                }\r\n                if (key === 'deductable_expenses' && (isNaN(rowData['deductable_expenses']) && rowData['deductable_expenses'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Deductable Expenses (USD)');\r\n                }\r\n                if (key === 'total_value' && (isNaN(rowData['total_value']) && rowData['total_value'] !== null)) {\r\n                    flag = true\r\n                    errorKey.push('Total Net Sales Value');\r\n                }\r\n                if (key === 'royalty_percent' && isNaN(rowData['royalty_percent'])) {\r\n                    flag = true\r\n                    errorKey.push('Royalty %');\r\n                }\r\n                if (key === 'royalty_due' && isNaN(rowData['royalty_due'])) {\r\n                    flag = true\r\n                    errorKey.push('Royalty Due');\r\n                }\r\n            }\r\n        }\r\n        return { flag, errorKey }\r\n    }\r\n\r\n    const checkNullRow = (rowData) => {\r\n        let flag = true;\r\n        for (var key in rowData) {\r\n            if (rowData.hasOwnProperty(key)) {\r\n                if (!(rowData[key] === null || rowData[key] === undefined || rowData[key] === 0 || rowData[key] === '')) {\r\n                    flag = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return flag\r\n    }\r\n\r\n    const saveApiData = () => {\r\n        let apiData = [];\r\n        apiGridApi.stopEditing();\r\n        apiGridApi.selectAll();\r\n        let selectedApiNodes = apiGridApi.getSelectedNodes().filter(\r\n            value => value.data && !isEmpty(value.data)\r\n        ).filter(val => !checkNullRow(val.data))\r\n        if (checkApiRowNodes(selectedApiNodes.map(value => value.data))) {\r\n            selectedApiNodes.forEach(value => {\r\n                let nodeData = { ...value.data };\r\n                const { country_name, product_name } = nodeData;\r\n                if (country_name && countryOrder.map(value => value.country_name).includes(country_name)) {\r\n                    nodeData['country_id'] = countryOrder[findIndex(countryOrder, { 'country_name': country_name })].country_id;\r\n                }\r\n                if (product_name && apiProductDropdown.includes(product_name)) {\r\n                    nodeData['product_id'] = apiProductOrder[findIndex(apiProductOrder, { 'product_name': product_name })].product_id;\r\n                }\r\n                apiData.push(nodeData)\r\n            })\r\n            let finalApiData = apiData.filter(val => !isEmpty(val)).filter(val => !checkNullRow(val))\r\n            if (isUserAdmin) {\r\n                dispatch(postAdminApiSalesData(partnerId, [...deleteApiIds, ...finalApiData], () => {\r\n                    showMessage('success', 'Data successfully recorded!');\r\n                    setDeleteApiIds([])\r\n                    setSalesReport()\r\n                }))\r\n            } else {\r\n                dispatch(postApiSalesReportData([...deleteApiIds, ...finalApiData], () => {\r\n                    showMessage('success', 'Data successfully recorded!');\r\n                    setDeleteApiIds([])\r\n                    setSalesReport()\r\n                }))\r\n            }\r\n            apiGridApi.deselectAll()\r\n        } else {\r\n            // Modal.error({\r\n            //     title: 'Invalid data!',\r\n            //     content: 'Please input valid entries!',\r\n            // });\r\n            apiGridApi.deselectAll()\r\n        }\r\n    }\r\n\r\n    const saveFdfData = () => {\r\n        let fdfData = [];\r\n        fdfGridApi.stopEditing();\r\n        fdfGridApi.selectAll();\r\n        let selectedFdfNodes = fdfGridApi.getSelectedNodes().filter(\r\n            value => value.data && !isEmpty(value.data)\r\n        ).filter(val => !checkNullRow(val.data))\r\n        if (checkFdfRowNodes(selectedFdfNodes.map(value => value.data))) {\r\n            selectedFdfNodes.forEach(value => {\r\n                let nodeData = { ...value.data };\r\n                const { country_name, product_name } = nodeData;\r\n                if (country_name && countryOrder.map(value => value.country_name).includes(country_name)) {\r\n                    nodeData['country_id'] = countryOrder[findIndex(countryOrder, { 'country_name': country_name })].country_id;\r\n                }\r\n                if (product_name && fdfProductDropdown.includes(product_name)) {\r\n                    nodeData['product_id'] = fdfProductOrder[findIndex(fdfProductOrder, { 'product_name': product_name })].product_id;\r\n                }\r\n                fdfData.push(nodeData)\r\n            })\r\n            let finalFdfData = fdfData.filter(val => !isEmpty(val)).filter(value => !checkNullRow(value))\r\n            if (isUserAdmin) {\r\n                dispatch(postAdminFdfSalesData(partnerId, [...deleteFdfIds, ...finalFdfData], () => {\r\n                    showMessage('success', 'Data successfully recorded!');\r\n                    setDeleteFdfIds([])\r\n                    setSalesReport()\r\n                }))\r\n            } else {\r\n                dispatch(postFdfSalesReportData([...deleteFdfIds, ...finalFdfData], () => {\r\n                    showMessage('success', 'Data successfully recorded!');\r\n                    setDeleteFdfIds([])\r\n                    setSalesReport()\r\n                }))\r\n            }\r\n            fdfGridApi.deselectAll()\r\n        } else {\r\n            // Modal.error({\r\n            //     title: 'Invalid data!',\r\n            //     content: 'Please input valid entries!',\r\n            // });\r\n            fdfGridApi.deselectAll()\r\n        }\r\n    }\r\n\r\n    const saveData = () => {\r\n        if (tabKey === 'api') {\r\n            saveApiData()\r\n        } else {\r\n            saveFdfData()\r\n        }\r\n    }\r\n\r\n    const saveReportBeforeAction = (callback) => {\r\n        if (apiGridApi) apiGridApi.stopEditing();\r\n        if (isFdfInitialized) fdfGridApi.stopEditing();\r\n        let apiData = ApiRowData && ApiRowData.length > 0 ? ApiRowData.filter(value => !isEmpty(value)).map(value => {\r\n            const { country_name, product_name } = value\r\n            if (country_name && countryOrder.map(value => value.country_name).includes(country_name)) {\r\n                value['country_id'] = countryOrder[findIndex(countryOrder, { 'country_name': country_name })].country_id;\r\n            }\r\n            if (product_name && apiProductDropdown.includes(product_name)) {\r\n                value['active_product_id'] = apiProductOrder[findIndex(apiProductOrder, { 'product_name': product_name })].active_product_id;\r\n            }\r\n            return value\r\n        }) : [];\r\n        let fdfData = FdfRowData && FdfRowData.length > 0 ? FdfRowData.filter(value => !isEmpty(value)).map(value => {\r\n            const { country_name, product_name } = value\r\n            if (country_name && countryOrder.map(value => value.country_name).includes(country_name)) {\r\n                value['country_id'] = countryOrder[findIndex(countryOrder, { 'country_name': country_name })].country_id;\r\n            }\r\n            if (product_name && fdfProductDropdown.includes(product_name)) {\r\n                value['active_product_id'] = fdfProductOrder[findIndex(fdfProductOrder, { 'product_name': product_name })].active_product_id;\r\n            }\r\n            return value\r\n        }) : [];\r\n        if (checkFdfRowNodes(fdfData) && checkApiRowNodes(apiData)) {\r\n            let finalApiData = apiData.filter(value => !checkNullRow(value))\r\n            let finalFdfData = fdfData.filter(value => !checkNullRow(value))\r\n            if (isUserAdmin) {\r\n                dispatch(postAdminApiSalesData(partnerId, [...deleteApiIds, ...finalApiData], () => {\r\n                    setDeleteApiIds([])\r\n                    dispatch(postAdminFdfSalesData(partnerId, [...deleteFdfIds, ...finalFdfData], () => {\r\n                        setDeleteFdfIds([])\r\n                        callback()\r\n                    }))\r\n                }))\r\n            } else {\r\n                dispatch(postApiSalesReportData([...deleteApiIds, ...finalApiData], () => {\r\n                    setDeleteApiIds([])\r\n                    dispatch(postFdfSalesReportData([...deleteFdfIds, ...finalFdfData], () => {\r\n                        setDeleteFdfIds([])\r\n                        callback()\r\n                    }))\r\n                }))\r\n            }\r\n        }\r\n    }\r\n\r\n    const showSubmitConfirm = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                confirm({\r\n                    title: 'Do you want to submit the report?',\r\n                    content: showCommentsForm(),\r\n                    className: 'btn-confirm-green',\r\n                    okText: 'Submit',\r\n                    cancelText: 'Cancel',\r\n                    onOk(close) {\r\n                        form.validateFields().then(\r\n                            values => {\r\n                                let msg = values.commentData;\r\n                                dispatch(submitSalesReportData({ message: msg }, () => {\r\n                                    setSalesReport()\r\n                                    form.resetFields(['commentData'])\r\n                                }))\r\n                                close()\r\n                            }\r\n                        )\r\n                    },\r\n                    onCancel() {\r\n                        form.resetFields(['commentData'])\r\n                    },\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    const approver = (msg, isApproved) => {\r\n        let data = {\r\n            'partner_id': partnerId,\r\n            'message': msg,\r\n            'is_approved': isApproved\r\n        }\r\n        dispatch(approveSalesReportData(data, () => {\r\n            if (isApproved) {\r\n                showMessage('success', 'Report Approved!');\r\n            } else {\r\n                showMessage('success', 'Report Rejected!');\r\n            }\r\n            form.resetFields(['commentData']);\r\n            setSalesReport()\r\n        }))\r\n    }\r\n\r\n    const showCommentsForm = () => {\r\n        return (\r\n            <Form\r\n                form={form}\r\n                layout='vertical'\r\n                className='mt-20'\r\n            >\r\n                <div className='mb-10'>\r\n                    <span>\r\n                        {isUserAdmin ? 'Add comments for partner:' : 'Add comments for admin:'}\r\n                    </span>\r\n                </div>\r\n                <Form.Item\r\n                    name='commentData'\r\n                    className='mb-0'\r\n                    rules={[\r\n                        { required: isUserAdmin, message: isUserAdmin ? 'Enter comments for partner' : 'Enter comments for admin' },\r\n                    ]}\r\n                >\r\n                    <Input.TextArea placeholder='Enter comments here' />\r\n                </Form.Item>\r\n            </Form>\r\n        )\r\n    }\r\n\r\n    const showRejectConfirm = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                setSalesReport()\r\n                confirm({\r\n                    title: 'Do you want to reject the report?',\r\n                    className: 'btn-confirm-red',\r\n                    content: showCommentsForm(),\r\n                    okText: 'Reject',\r\n                    cancelText: 'Cancel',\r\n                    icon: (<CloseCircleOutlined />),\r\n                    onOk(close) {\r\n                        form.validateFields().then(\r\n                            values => {\r\n                                let msg = values.commentData;\r\n                                approver(msg, false);\r\n                                close()\r\n                            }\r\n                        )\r\n                    },\r\n                    onCancel() {\r\n                        form.resetFields(['commentData'])\r\n                    },\r\n                });\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    const showApproveConfirm = () => {\r\n        saveReportBeforeAction(\r\n            () => {\r\n                setSalesReport();\r\n                confirm({\r\n                    title: 'Do you want to approve the report?',\r\n                    className: 'btn-confirm-green',\r\n                    content: showCommentsForm(),\r\n                    icon: (<CheckCircleOutlined />),\r\n                    okText: 'Approve',\r\n                    cancelText: 'Cancel',\r\n                    onOk(close) {\r\n                        form.validateFields().then(\r\n                            values => {\r\n                                let msg = values.commentData;\r\n                                approver(msg, true);\r\n                                close()\r\n                            }\r\n                        )\r\n                    },\r\n                    onCancel() {\r\n                        form.resetFields(['commentData'])\r\n                    },\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    const displayGridCta = () => {\r\n        const { report_status } = reportDetails;\r\n        if ((tabKey === 'api' && apiProductDropdown && apiProductDropdown.length) || (tabKey === 'fdf' && fdfProductDropdown && fdfProductDropdown.length))\r\n            return (\r\n                <div>\r\n                    <Tooltip title={tabKey === 'api' ? 'Save API report' : 'Save FDF report'}>\r\n                        <Button\r\n                            type='primary'\r\n                            onClick={() => { saveData(false) }}\r\n                            className='mb-0 sales-report-btn-save'\r\n                            disabled={report_status === 'Approved' && !isUserAdmin}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </Tooltip>\r\n                    <Tooltip title={<IntlMessages id='report.download' />}>\r\n                        <Button className='mb-0' onClick={() => downloadExcel()} >\r\n                            <DownloadOutlined />\r\n                        </Button>\r\n                    </Tooltip>\r\n                </div >\r\n            )\r\n    }\r\n\r\n    const displayHeader = () => {\r\n        const { partner_name, quarter_name, report_status, approval_time, submission_time } = reportDetails;\r\n        if (apiProductOrder.length > 0 || fdfProductOrder.length > 0) {\r\n            return (\r\n                <div className={pendingProducts > 0 ? 'gx-mb-2' : 'gx-mb-4'}>\r\n                    <h1 className='title '>{isUserAdmin ? <Tooltip title='Back'><LeftOutlined className='mr-10' onClick={navigateBack} /></Tooltip> : null}Sales Report {isUserAdmin ? <span className='mr-5'>for <span className='text-capitalize'>{partner_name}</span></span> : null}\r\n                        <span className='text-capitalize'>({quarter_name})</span>\r\n                    </h1>\r\n                    <h4 className={isUserAdmin ? 'ml-30' : ''}>Report Status:&nbsp;\r\n                        <span className='text-capitalize'> {report_status}</span>\r\n                        <span>\r\n                            {!approval_time && !submission_time ? '' : ' on ' + moment(report_status === 'Submitted' || report_status === 'Resubmitted' ? submission_time : approval_time).format('Do MMM YYYY, hh:mm A')}\r\n                        </span>\r\n                    </h4>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className='gx-mb-4'>\r\n                    <h1 className='title '>{isUserAdmin ? <LeftOutlined className='mr-5' onClick={navigateBack} /> : null}Sales Report {isUserAdmin && partner_name ? <span>for <span className='text-capitalize'>{partner_name}</span></span> : null}\r\n                    </h1>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const displayProductVerification = () => {\r\n        if (isUserAdmin && pendingProducts > 0) {\r\n            return (\r\n                <Alert\r\n                    className='ml-30 min-width-600'\r\n                    message=\"Product verification pending!\"\r\n                    description={\r\n                        <div>\r\n                            <span>\r\n                                There are\r\n                                            <span className='text-capitalize color-red ml-5 mr-5'> {pendingProducts}</span>\r\n                                            products to be verified\r\n                                            <Button type='link' className='mb-0' onClick={() => viewVerificationModal()}>View Details</Button>\r\n                            </span>\r\n                        </div>\r\n                    }\r\n                    type=\"warning\"\r\n                    showIcon\r\n                />\r\n            )\r\n        }\r\n    }\r\n\r\n    const displayCTA = () => {\r\n        if ((apiProductOrder.length > 0 || fdfProductOrder.length > 0)) {\r\n            const { report_status } = reportDetails\r\n            if (isUserAdmin) {\r\n                return (\r\n                    <div className='gx-flex-row gx-justify-content-end'>\r\n                        <Button\r\n                            className='gx-btn-success mb-0'\r\n                            onClick={() => showApproveConfirm()}\r\n                            disabled={pendingProducts > 0}\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                        <Button\r\n                            className='gx-btn-danger mb-0'\r\n                            onClick={() => showRejectConfirm()}\r\n                            disabled={pendingProducts > 0}\r\n                        >\r\n                            Reject\r\n                        </Button>\r\n                        <Badge count={messageCount}>\r\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\r\n                                content={<AdminNotifications isAdmin={isUserAdmin} data={apiSalesList && apiSalesList.messages ? apiSalesList.messages : fdfSalesList && fdfSalesList.messages ? fdfSalesList.messages : []} />} trigger='click'>\r\n                                <Button\r\n                                    className='mr-0 mb-0'\r\n                                    onClick={() => dispatch(partnerMarkSalesReportMessageRead(\r\n                                        isUserAdmin ? 'admin' : 'partner',\r\n                                        () => setMessageCount(0)\r\n                                    ))}\r\n                                >\r\n                                    <MailOutlined />\r\n                                </Button>\r\n                            </Popover>\r\n                        </Badge>\r\n\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div className='gx-flex-row gx-justify-content-end'>\r\n                        <Button\r\n                            onClick={() => showSubmitConfirm()}\r\n                            className='gx-btn-success mb-0'\r\n                            disabled={report_status === 'Approved'}\r\n                        >\r\n                            Submit Report\r\n                        </Button>\r\n                        <Badge count={messageCount}>\r\n                            <Popover overlayClassName='gx-popover-horizantal' placement='bottomRight'\r\n                                content={<AdminNotifications isAdmin={isUserAdmin} data={apiSalesList && apiSalesList.messages ? apiSalesList.messages : fdfSalesList && fdfSalesList.messages ? fdfSalesList.messages : []} />} trigger='click'>\r\n                                <Button\r\n                                    className='mr-0 mb-0'\r\n                                    onClick={() => dispatch(partnerMarkSalesReportMessageRead(\r\n                                        isUserAdmin ? 'admin' : 'partner',\r\n                                        () => setMessageCount(0)\r\n                                    ))}\r\n                                >\r\n                                    <MailOutlined />\r\n                                </Button>\r\n                            </Popover>\r\n                        </Badge>\r\n                    </div>\r\n                )\r\n            }\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const downloadExcel = () => {\r\n        if (tabKey === 'api') {\r\n            apiGridApi.selectAll();\r\n            apiGridApi.exportDataAsExcel({\r\n                sheetName: 'API',\r\n                fileName: 'sales-report',\r\n                columnKeys: ['year', 'month', 'country_name', 'purchaser', 'product_name', 'quantity', 'total_value']\r\n            })\r\n            apiGridApi.deselectAll();\r\n        } else if (tabKey === 'fdf') {\r\n            fdfGridApi.selectAll();\r\n            fdfGridApi.exportDataAsExcel({\r\n                sheetName: 'FDF',\r\n                fileName: 'sales-report',\r\n                columnKeys: ['year', 'month', 'country_name', 'product_name', 'purchaser', 'strength', 'formulation_md', 'pack_size', 'quantity', 'currency', 'gross_sale_price_currency', 'usd_exchange_rate', 'gross_sale_price_usd', 'total_gross_value', 'deductable_expenses', 'total_value', 'royalty_percent', 'royalty_due', 'procurement_end_country', 'comments']\r\n            })\r\n            fdfGridApi.deselectAll();\r\n        }\r\n    }\r\n\r\n    const handleApiCellValueChange = (params) => {\r\n        const { colDef, node, newValue, oldValue, source } = params;\r\n        let rowNode = apiGridApi.getRowNode(node.id);\r\n        if (newValue !== oldValue) {\r\n            switch (colDef.field) {\r\n                case 'year':\r\n                    if (!isNaN(newValue) && yearDropdown.includes(Number(newValue))) {\r\n                        rowNode.setDataValue(colDef.field, Number(newValue));\r\n                    } else {\r\n                        if (newValue === ' ') {\r\n                            rowNode.setDataValue(colDef.field, null);\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'month':\r\n                    if (newValue === ' ') {\r\n                        rowNode.setDataValue(colDef.field, null);\r\n                    }\r\n                    break;\r\n                case 'country':\r\n                    if (newValue === ' ') {\r\n                        rowNode.setDataValue(colDef.field, null);\r\n                    }\r\n                    break;\r\n                case 'quantity':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'total_value':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleFdfCellValueChange = (params) => {\r\n        const { colDef, node, newValue, oldValue, data } = params;\r\n        let rowNode = fdfGridApi.getRowNode(node.id);\r\n        if (newValue !== oldValue) {\r\n            // if (data && data.hasOwnProperty('gross_sale_price_currency') && data.hasOwnProperty('usd_exchange_rate')) {\r\n            //     if ((data['gross_sale_price_currency'] === 0 || data['usd_exchange_rate'] === 0 || data['gross_sale_price_currency'] === null || data['usd_exchange_rate'] === null)) {\r\n            //         rowNode.setDataValue('gross_sale_price_usd', 0)\r\n            //     } else {\r\n            //         rowNode.setDataValue('gross_sale_price_usd', Number(data['gross_sale_price_currency'] / data['usd_exchange_rate']));\r\n            //     }\r\n            // }\r\n            // if (data && data.hasOwnProperty('gross_sale_price_currency') && data.hasOwnProperty('usd_exchange_rate') && data.hasOwnProperty('quantity')) {\r\n            //     if (data['gross_sale_price_currency'] === 0 || data['usd_exchange_rate'] === 0 || data['gross_sale_price_currency'] === null || data['usd_exchange_rate'] === null) {\r\n            //         rowNode.setDataValue('total_gross_value', 0)\r\n            //     } else {\r\n            //         rowNode.setDataValue('total_gross_value', Number((data['gross_sale_price_currency'] / data['usd_exchange_rate']) * data['quantity']));\r\n            //     }\r\n            // }\r\n            // if (data && data.hasOwnProperty('gross_sale_price_currency') && data.hasOwnProperty('usd_exchange_rate') && data.hasOwnProperty('quantity') && data.hasOwnProperty('deductable_expenses')) {\r\n            //     if (data['gross_sale_price_currency'] === 0 || data['usd_exchange_rate'] === 0 || data['gross_sale_price_currency'] === null || data['usd_exchange_rate'] === null) {\r\n            //         rowNode.setDataValue('total_value', Number(0 - data['deductable_expenses']))\r\n            //     } else {\r\n            //         rowNode.setDataValue('total_value', Number(((data['gross_sale_price_currency'] / data['usd_exchange_rate']) * data['quantity']) - data['deductable_expenses']));\r\n            //     }\r\n\r\n            // }\r\n            switch (colDef.field) {\r\n                case 'year':\r\n                    if (!isNaN(newValue) && yearDropdown.includes(Number(newValue))) {\r\n                        rowNode.setDataValue(colDef.field, Number(newValue));\r\n                    } else {\r\n                        if (newValue === ' ') {\r\n                            rowNode.setDataValue(colDef.field, null);\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'month':\r\n                    if (newValue === ' ') {\r\n                        rowNode.setDataValue(colDef.field, null);\r\n                    }\r\n                    break;\r\n                case 'country':\r\n                    if (newValue === ' ') {\r\n                        rowNode.setDataValue(colDef.field, null);\r\n                    }\r\n                    break;\r\n                case 'formulation_md':\r\n                    if (newValue === ' ') {\r\n                        rowNode.setDataValue(colDef.field, null);\r\n                    }\r\n                    break;\r\n                case 'currency':\r\n                    if (newValue === ' ') {\r\n                        rowNode.setDataValue(colDef.field, null);\r\n                    }\r\n                    break;\r\n                case 'quantity':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'pack_size':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'gross_sale_price_currency':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'usd_exchange_rate':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'gross_sale_price_usd':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'total_gross_value':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'deductable_expenses':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'total_value':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'royalty_percent':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'royalty_due':\r\n                    if (!isNaN(newValue)) {\r\n                        if (newValue === null) {\r\n                            rowNode.setDataValue(colDef.field, 0)\r\n                        } else {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue))\r\n                        }\r\n                    } else {\r\n                        if (newValue && newValue.indexOf(',') !== -1 && !isNaN(newValue.split(',').join(''))) {\r\n                            rowNode.setDataValue(colDef.field, Number(newValue.split(',').join('')))\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleApiRowSelection = () => {\r\n        setAreApiRowsSelected(apiGridApi.getSelectedNodes().length > 0)\r\n    }\r\n\r\n    const handleFdfRowSelection = () => {\r\n        setAreFdfRowsSelected(fdfGridApi.getSelectedNodes().length > 0)\r\n    }\r\n\r\n    const deleteSelectedApiRows = () => {\r\n        let rowIndexList = apiGridApi.getSelectedNodes().map(value => value.rowIndex);\r\n        let tempDeleteIds = [...deleteApiIds];\r\n        let rowData = [...ApiRowData]\r\n        rowIndexList.forEach((value) => {\r\n            let nodeData = apiGridApi.getRowNode(value)\r\n            if (nodeData.data.hasOwnProperty('sales_report_id') && !has(tempDeleteIds, { sales_report_id: nodeData.data.sales_report_id })) {\r\n                tempDeleteIds.push({ sales_report_id: nodeData.data.sales_report_id })\r\n            }\r\n        })\r\n\r\n        let finalData = rowData.filter((value, index) => {\r\n            return !rowIndexList.includes(index)\r\n        })\r\n        setApiRowData(finalData)\r\n        setDeleteApiIds(tempDeleteIds)\r\n        apiGridApi.deselectAll()\r\n    }\r\n\r\n    const deleteSelectedFdfRows = () => {\r\n        let rowIndexList = fdfGridApi.getSelectedNodes().map(value => value.rowIndex);\r\n        let tempDeleteIds = [...deleteApiIds];\r\n        let rowData = [...FdfRowData]\r\n        rowIndexList.forEach((value) => {\r\n            let nodeData = fdfGridApi.getRowNode(value)\r\n            if (nodeData.data.hasOwnProperty('sales_report_id') && !has(tempDeleteIds, { sales_report_id: nodeData.data.sales_report_id })) {\r\n                tempDeleteIds.push({ sales_report_id: nodeData.data.sales_report_id })\r\n            }\r\n        })\r\n\r\n        let finalData = rowData.filter((value, index) => {\r\n            return !rowIndexList.includes(index)\r\n        })\r\n        setFdfRowData(finalData)\r\n        setDeleteFdfIds(tempDeleteIds)\r\n        fdfGridApi.deselectAll()\r\n    }\r\n\r\n    const setReportHeight = () => {\r\n        return window.innerHeight - 230\r\n    }\r\n\r\n    const viewVerificationModal = () => {\r\n        dispatch(getAdminProductsToBeVerified(partnerId, () => {\r\n            setShowVerificationModal(true)\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='gx-flex-row gx-justify-content-between'>\r\n                {displayHeader()}\r\n                {displayCTA()}\r\n            </div>\r\n            <div className='gx-flex-row gx-justify-content-between'>\r\n                {displayProductVerification()}\r\n            </div>\r\n            <Tabs\r\n                tabPosition='top'\r\n                type='card'\r\n                className='sales-report-tabs'\r\n                tabBarExtraContent={displayGridCta()}\r\n                onChange={(currentTabKey) => { setTabKey(currentTabKey) }}\r\n            >\r\n                <TabPane tab='API' key='api'>\r\n                    {\r\n                        apiProductDropdown && apiProductDropdown.length ?\r\n                            <div>\r\n                                <div\r\n                                    className='ag-theme-balham'\r\n                                    style={{ height: setReportHeight(), paddingBottom: 20 }}\r\n                                >\r\n                                    <AgGridReact\r\n                                        onGridReady={onApiGridReady}\r\n                                        columnDefs={ApiColumnDefs}\r\n                                        rowData={ApiRowData}\r\n                                        defaultColGroupDef={{ marryChildren: true }}\r\n                                        defaultColDef={{\r\n                                            filter: true,\r\n                                            sortable: true,\r\n                                            width: 300,\r\n                                            resizable: true,\r\n                                            editable: (apiSalesList.sales_meta.report_status !== 'Approved' || isUserAdmin),\r\n                                            cellClass: (params) => {\r\n                                                const { data } = params;\r\n                                                const { report_status } = apiSalesList.sales_meta;\r\n                                                if (data) {\r\n                                                    return ((report_status !== 'Approved' || isUserAdmin) ? 'editable-cell' : 'non-editable-cell');\r\n                                                }\r\n                                            },\r\n                                        }}\r\n                                        columnTypes={{\r\n                                            valueColumn: {\r\n                                                valueParser: 'Number(newValue)',\r\n                                                filter: 'agNumberColumnFilter',\r\n                                            },\r\n                                        }}\r\n                                        enableRangeSelection={true}\r\n                                        enableCellChangeFlash={true}\r\n                                        animateRows={true}\r\n                                        rowSelection={'multiple'}\r\n                                        suppressRowClickSelection={true}\r\n                                        onSelectionChanged={handleApiRowSelection}\r\n                                        onCellValueChanged={handleApiCellValueChange}\r\n                                        frameworkComponents={{\r\n                                            searchSelector: SearchSelect\r\n                                        }}\r\n\r\n                                    />\r\n                                </div>\r\n                                <div className='gx-flex-row'>\r\n                                    <InputNumber disabled={reportDetails.report_status === 'Approved' && !isUserAdmin} min={0} defaultValue={0} max={10000} onChange={(value) => { setAddApiRowNumber(value) }} />\r\n                                    <Button type='primary' onClick={addApiRow} disabled={reportDetails.report_status === 'Approved' && !isUserAdmin} > Add Row</Button>\r\n                                    <Button onClick={deleteSelectedApiRows} disabled={(reportDetails.report_status === 'Approved' && !isUserAdmin) || !areApiRowsSelected} > Delete Selected Rows</Button>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            null\r\n                    }\r\n                </TabPane>\r\n                <TabPane tab='FDF' key='fdf'>\r\n                    {\r\n                        fdfProductDropdown && fdfProductDropdown.length ?\r\n                            <div>\r\n                                <div className='ag-theme-balham' style={{ height: setReportHeight(), paddingBottom: 20 }}>\r\n                                    <AgGridReact\r\n                                        onGridReady={onFdfGridReady}\r\n                                        columnDefs={FdfColumnDefs}\r\n                                        rowData={FdfRowData}\r\n                                        defaultColGroupDef={{ marryChildren: true }}\r\n                                        defaultColDef={{\r\n                                            filter: true,\r\n                                            sortable: true,\r\n                                            width: 300,\r\n                                            editable: (apiSalesList.sales_meta.report_status !== 'Approved' || isUserAdmin),\r\n                                            resizable: true,\r\n                                            cellClass: (params) => {\r\n                                                const { data } = params;\r\n                                                const { report_status } = reportDetails;\r\n                                                if (data) {\r\n                                                    return ((report_status !== 'Approved' || isUserAdmin) ? 'editable-cell' : 'non-editable-cell');\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                        columnTypes={{\r\n                                            valueColumn: {\r\n                                                valueParser: 'Number(newValue)',\r\n                                                filter: 'agNumberColumnFilter',\r\n                                            },\r\n                                        }}\r\n                                        enableRangeSelection={true}\r\n                                        suppressAggFuncInHeader={true}\r\n                                        enableCellChangeFlash={true}\r\n                                        animateRows={true}\r\n                                        rowSelection={'multiple'}\r\n                                        suppressRowClickSelection={true}\r\n                                        onSelectionChanged={handleFdfRowSelection}\r\n                                        onCellValueChanged={handleFdfCellValueChange}\r\n                                        frameworkComponents={{\r\n                                            searchSelector: SearchSelect\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className='gx-flex-row'>\r\n                                    <InputNumber disabled={reportDetails.report_status === 'Approved' && !isUserAdmin} min={0} defaultValue={0} max={10000} onChange={(value) => { setAddFdfRowNumber(value) }} />\r\n                                    <Button type='primary' onClick={addFdfRow} disabled={reportDetails.report_status === 'Approved' && !isUserAdmin} > Add Row</Button>\r\n                                    <Button onClick={deleteSelectedFdfRows} disabled={(reportDetails.report_status === 'Approved' && !isUserAdmin) || !areFdfRowsSelected} > Delete Selected Rows</Button>\r\n                                </div>\r\n\r\n                            </div>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </TabPane>\r\n            </Tabs>\r\n            {\r\n                showVerificationModal ?\r\n                    <ProductVerificationModal\r\n                        visible={showVerificationModal}\r\n                        displayVerificationModal={() => { setShowVerificationModal(true) }}\r\n                        hideVerificationModal={() => { setShowVerificationModal(false) }}\r\n                        partnerId={partnerId}\r\n                        setSalesReport={setSalesReport}\r\n                        statusArray={statusArray}\r\n                    />\r\n                    : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SalesReport\r\n","import React, { useEffect } from 'react';\r\nimport { Button, Form, Input } from 'antd';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { resetChangePassword, userChangePassword } from '../../../appRedux/actions'\r\n\r\nconst FormItem = Form.Item;\r\n\r\n\r\nconst ChangePassword = (props) => {\r\n\r\n    const { changePasswordSuccess } = useSelector(({ authentication }) => authentication);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        if (changePasswordSuccess) {\r\n            props.history.push('/logout')\r\n            dispatch(resetChangePassword())\r\n        }\r\n    }, [changePasswordSuccess])\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const onFinish = values => {\r\n        dispatch(userChangePassword(values))\r\n    };\r\n\r\n    return (\r\n        <div className='gx-login-container'>\r\n            <div className='gx-login-content'>\r\n\r\n                <div className='gx-login-header'>\r\n                    <img src={require('assets/images/logo-white.png')} alt='wieldy' title='wieldy' />\r\n                </div>\r\n                <div className='gx-mb-4'>\r\n                    <h2>Change Password</h2>\r\n                    <p><IntlMessages id='appModule.enterPasswordReset' /></p>\r\n                </div>\r\n\r\n                <Form\r\n                    initialValues={{ remember: true }}\r\n                    name='reset-password'\r\n                    onFinish={onFinish}\r\n                    onFinishFailed={onFinishFailed}\r\n                    className='gx-signin-form gx-form-row0'>\r\n\r\n                    <FormItem\r\n                        rules={[\r\n                            { required: true, message: 'Please input your Password!' },\r\n                            { min: 8, message: <IntlMessages id='error.password_min' /> },\r\n                            { pattern: /^(?=.*\\d)(?=.*[a-z]).{8,100}$/, message: <IntlMessages id='error.password_valid' /> }\r\n                        ]}\r\n                        name='password'\r\n                    >\r\n                        <Input.Password placeholder='Password' />\r\n                    </FormItem>\r\n\r\n                    <FormItem\r\n                        name='confirm'\r\n                        dependencies={['password']}\r\n                        hasFeedback\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please confirm your password!',\r\n                            },\r\n                            ({ getFieldValue }) => ({\r\n                                validator(rule, value) {\r\n                                    if (!value || getFieldValue('password') === value) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject('The two passwords that you entered do not match!');\r\n                                },\r\n                            }),\r\n                        ]}\r\n                    >\r\n                        <Input.Password placeholder='Retype New Password' />\r\n                    </FormItem>\r\n\r\n                    <FormItem>\r\n                        <Button type='primary' htmlType='submit'>\r\n                            <IntlMessages id='app.userAuth.resetPassword' />\r\n                        </Button>\r\n                    </FormItem>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChangePassword;\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Card,\r\n} from 'antd';\r\nimport { LeftOutlined, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport FormItem from 'antd/lib/form/FormItem';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAdminProductList, adminAddPartner, getAdminSinglePartner, adminEditPartner, resetEditPartner, getAdminCountryList } from '../../../appRedux/actions';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport './add-partner.css'\r\nimport { countryCodeList, statusArray } from '../../../helpers';\r\nimport { sortBy } from 'lodash';\r\n\r\nconst { Option } = Select;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n    },\r\n};\r\n\r\nconst AddPartner = (props) => {\r\n\r\n    const { isPartnerAdded, isPartnerEdited, partnerDetails, countryList, isLoaded } = useSelector(({ adminPartner }) => adminPartner);\r\n    const { productList } = useSelector(({ adminProducts }) => adminProducts);\r\n    const [editFlag, setEditFlag] = useState(false);\r\n    const [partnerEmployeeData, setPartnerEmployeeData] = useState([]);\r\n    const dispatch = useDispatch();\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n        const { path, params } = props.match;\r\n        if (params.id && (path.split('/')[2] === 'edit-partner')) {\r\n            dispatch(getAdminSinglePartner(params.id))\r\n            dispatch(getAdminCountryList())\r\n            dispatch(getAdminProductList(false))\r\n            setEditFlag(true)\r\n        } else {\r\n            dispatch(getAdminCountryList())\r\n            dispatch(getAdminProductList(false))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isPartnerEdited || isPartnerAdded) {\r\n            form.resetFields();\r\n            props.history.push('/admin/partner-list')\r\n        }\r\n        if (isLoaded) {\r\n            if (editFlag) {\r\n                const { partner } = partnerDetails;\r\n                setPartnerEmployeeData(partner && partner.employee ? partner.employee : [])\r\n                form.setFieldsValue({\r\n                    company_name: partner.company_name,\r\n                    email: partnerDetails.email,\r\n                    contact: partner.contact_number.slice(partner.contact_number.length - 10),\r\n                    prefix: partner.contact_number.substring(0, partner.contact_number.length - 10),\r\n                    address: partner.address,\r\n                    region: partner.region,\r\n                    active_products: partner.active_products\r\n                })\r\n                if (partner.employee && partner.employee.length > 0) {\r\n                    form.setFieldsValue({\r\n                        employee: partner.employee,\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    const onFinish = values => {\r\n        const { params } = props.match;\r\n        let data = {\r\n            'email': values.email ? values.email.toLowerCase() : '',\r\n            'partner': {\r\n                'company_name': values.company_name,\r\n                'contact_number': values.prefix + values.contact,\r\n                'address': values.address ? values.address : null,\r\n                'region': values.region,\r\n                'active_products': values.active_products ? values.active_products : [],\r\n                'employee': setEmployeeData(values.employee)\r\n            }\r\n        }\r\n        if (editFlag) {\r\n            let editData = data;\r\n            dispatch(adminEditPartner(params.id, editData, () => {\r\n                dispatch(resetEditPartner())\r\n            }))\r\n        } else {\r\n            dispatch(adminAddPartner(data, () => {\r\n                dispatch(resetEditPartner())\r\n            }))\r\n        }\r\n    };\r\n\r\n    const setEmployeeData = (data) => {\r\n        if (data.length > 0) {\r\n            if (editFlag) {\r\n                return data.map((value, index) => {\r\n                    if (partnerEmployeeData[index]) {\r\n                        return { ...value, 'employee_id': partnerEmployeeData[index].employee_id }\r\n                    } else {\r\n                        return { ...value, 'employee_id': 0 }\r\n                    }\r\n                })\r\n            } else {\r\n                return data.map(value => ({ ...value, 'employee_id': 0 }))\r\n            }\r\n        }\r\n        return []\r\n    }\r\n\r\n    const setCountryCodeListOptions = () => {\r\n        let sortedCountryCodeList = sortBy(countryCodeList, ['code']);\r\n        return sortedCountryCodeList.map(\r\n            value => <Option key={value.code} value={value.code}>{value.code}</Option>\r\n        )\r\n    }\r\n\r\n    const prefixSelector = (\r\n        <Form.Item name='prefix' noStyle>\r\n            <Select\r\n                style={{ width: 100 }}\r\n                showSearch\r\n                optionFilterProp='children'\r\n                filterOption={true}\r\n            >\r\n                {\r\n                    setCountryCodeListOptions()\r\n                }\r\n            </Select>\r\n        </Form.Item>\r\n    );\r\n\r\n    const navigateBack = () => {\r\n        const { history } = props;\r\n        history.goBack();\r\n    }\r\n\r\n    const navigateToPartnerList = () => {\r\n        const { history } = props;\r\n        history.push('/admin/partner-list');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <h1 className='title gx-mb-4'>\r\n                        <LeftOutlined className='mr-5' onClick={navigateBack} />\r\n                        {editFlag ? 'Edit Partner' : 'Add Partner'}\r\n                    </h1>\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Card className='gx-card'>\r\n                        <Row>\r\n                            <Col span={22}>\r\n                                <Form\r\n                                    {...formItemLayout}\r\n                                    form={form}\r\n                                    name='add-partner'\r\n                                    onFinish={onFinish}\r\n                                    initialValues={{\r\n                                        prefix: '+91',\r\n                                        active_products: [{ product_id: null, status: \"\", product_name: \"\" }],\r\n                                        employee: [{ first_name: '', last_name: '', contact_number: '' }]\r\n                                    }}\r\n                                    scrollToFirstError\r\n                                >\r\n                                    <Form.Item name='company_name' label='Company Name' rules={[{ required: true, message: <IntlMessages id='error.company_required' /> }]}>\r\n                                        <Input />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        name='email'\r\n                                        label='E-mail'\r\n                                        rules={[\r\n                                            {\r\n                                                type: 'email',\r\n                                                message: <IntlMessages id='error.email_valid' />,\r\n                                            },\r\n                                            {\r\n                                                required: true,\r\n                                                message: <IntlMessages id='error.email_required' />,\r\n                                            },\r\n                                        ]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        name='contact'\r\n                                        label='Contact Number'\r\n                                        rules={[\r\n                                            { required: true, message: <IntlMessages id='error.contact_required' /> },\r\n                                            { len: 10, message: <IntlMessages id='error.contact_length' /> },\r\n                                            { pattern: /^[0-9]+$/, message: <IntlMessages id='error.contact_valid' /> },\r\n                                        ]}\r\n                                    >\r\n                                        <Input addonBefore={prefixSelector} style={{ width: '100%' }} />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item name='address' label='Address' rules={[{ required: false, message: <IntlMessages id='error.address_required' /> }]}>\r\n                                        <Input.TextArea />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        name='region'\r\n                                        label='Region'\r\n                                        hasFeedback\r\n                                        rules={[{ required: true, message: <IntlMessages id='error.region_required' /> }]}\r\n                                    >\r\n                                        <Select\r\n                                            placeholder='Please select a region'\r\n                                            showSearch\r\n                                            optionFilterProp='children'\r\n                                            filterOption={true}\r\n                                        >\r\n                                            {\r\n                                                countryList.map(\r\n                                                    value => <Option key={value} value={value}>{value}</Option>\r\n                                                )\r\n                                            }\r\n                                        </Select>\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        label='Active Products'\r\n                                        className='mb-0'\r\n                                    >\r\n                                        <Form.List\r\n                                            name='active_products'\r\n                                        >\r\n                                            {(fields, { add, remove }) => {\r\n                                                return (\r\n                                                    <div>\r\n                                                        {fields.map((field, index) => (\r\n                                                            <Form.Item\r\n                                                                wrapperCol={{ sm: 24 }}\r\n                                                                key={field.key}\r\n                                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                                rules={[\r\n                                                                    {\r\n                                                                        required: false,\r\n                                                                        message: 'Please enter details',\r\n                                                                    },\r\n                                                                ]}\r\n                                                            >\r\n                                                                <div className='flex-d-row'>\r\n                                                                    <Col span={22}>\r\n                                                                        <Row>\r\n                                                                            <Col span={12}>\r\n                                                                                <FormItem\r\n                                                                                    {...field}\r\n                                                                                    className='mb-0'\r\n                                                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                                                    name={[field.name, 'product_id']}\r\n                                                                                    fieldKey={[field.fieldKey, 'product_id']}\r\n                                                                                    rules={[\r\n                                                                                        {\r\n                                                                                            required: true,\r\n                                                                                            message: 'Please select product.',\r\n                                                                                        },\r\n                                                                                    ]}\r\n                                                                                >\r\n                                                                                    <Select\r\n                                                                                        placeholder='Please select product'\r\n                                                                                        className='product-select'\r\n                                                                                        showSearch\r\n                                                                                        optionFilterProp='children'\r\n                                                                                        filterOption={true}\r\n                                                                                    >\r\n                                                                                        {\r\n                                                                                            productList && productList.length ? productList.map(\r\n                                                                                                value => (<Option key={productList.indexOf(value)} value={value.product_id}>{value.product_name}</Option>)\r\n                                                                                            ) : []\r\n                                                                                        }\r\n                                                                                    </Select>\r\n                                                                                </FormItem>\r\n                                                                            </Col>\r\n                                                                            <Col span={12}>\r\n                                                                                <FormItem\r\n                                                                                    {...field}\r\n                                                                                    className='mb-0'\r\n                                                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                                                    name={[field.name, 'status']}\r\n                                                                                    fieldKey={[field.fieldKey, 'status']}\r\n                                                                                    rules={[\r\n                                                                                        {\r\n                                                                                            required: true,\r\n                                                                                            message: 'Please enter status.',\r\n                                                                                        },\r\n                                                                                    ]}\r\n                                                                                >\r\n                                                                                    <Select placeholder='Please select product status' className='product-select'>\r\n                                                                                        {\r\n                                                                                            statusArray && statusArray.length ? statusArray.map(\r\n                                                                                                value => (<Option key={statusArray.indexOf(value)} value={value.id}>{value.name}</Option>)\r\n                                                                                            ) : []\r\n                                                                                        }\r\n                                                                                    </Select>\r\n                                                                                </FormItem>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n                                                                    </Col>\r\n                                                                    <Col span={2} className='flex-d-row align-items-center'>\r\n                                                                        <MinusCircleOutlined\r\n                                                                            className='dynamic-delete-button'\r\n                                                                            style={{ margin: '0 8px' }}\r\n                                                                            onClick={() => {\r\n                                                                                remove(field.name);\r\n                                                                            }}\r\n                                                                        />\r\n                                                                    </Col>\r\n                                                                </div>\r\n                                                            </Form.Item>\r\n                                                        ))}\r\n\r\n                                                        <Form.Item className='flex-d-row-reverse'>\r\n                                                            <Button\r\n                                                                type='dashed'\r\n                                                                onClick={() => {\r\n                                                                    add();\r\n                                                                }}\r\n                                                                className='ml-20 width-60'\r\n                                                            >\r\n                                                                <PlusOutlined /> Add Product\r\n                                                            </Button>\r\n                                                        </Form.Item>\r\n                                                    </div>\r\n                                                );\r\n                                            }}\r\n                                        </Form.List>\r\n                                    </Form.Item>\r\n\r\n                                    <Form.List name='employee'>\r\n                                        {(fields, { add, remove }) => {\r\n                                            return (\r\n                                                <div>\r\n                                                    {fields.map((field, index) => (\r\n                                                        <Form.Item\r\n                                                            label={'Person ' + (index + 1)}\r\n                                                            key={field.key}\r\n                                                            validateTrigger={['onChange', 'onBlur']}\r\n                                                            rules={[\r\n                                                                {\r\n                                                                    required: false,\r\n                                                                    message: 'Please enter details',\r\n                                                                },\r\n                                                            ]}\r\n                                                        >\r\n                                                            <div className='flex-d-row'>\r\n                                                                <Col span={22}>\r\n                                                                    <Row>\r\n                                                                        <Col span={8}>\r\n                                                                            <FormItem\r\n                                                                                {...field}\r\n                                                                                className='mb-0'\r\n                                                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                                                name={[field.name, 'first_name']}\r\n                                                                                fieldKey={[field.fieldKey, 'first_name']}\r\n                                                                                rules={[\r\n                                                                                    {\r\n                                                                                        required: true,\r\n                                                                                        message: 'Please enter first name.',\r\n                                                                                    },\r\n                                                                                ]}\r\n\r\n                                                                            >\r\n                                                                                <Input className='people-info' placeholder='first name' />\r\n                                                                            </FormItem>\r\n                                                                        </Col>\r\n                                                                        <Col span={8}>\r\n                                                                            <FormItem\r\n                                                                                {...field}\r\n                                                                                className='mb-0'\r\n                                                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                                                name={[field.name, 'last_name']}\r\n                                                                                fieldKey={[field.fieldKey, 'last_name']}\r\n                                                                                rules={[\r\n                                                                                    {\r\n                                                                                        required: true,\r\n                                                                                        message: 'Please enter last name.',\r\n                                                                                    },\r\n                                                                                ]}\r\n                                                                            >\r\n                                                                                <Input className='people-info' placeholder='last name' />\r\n                                                                            </FormItem>\r\n                                                                        </Col>\r\n                                                                        <Col span={8}>\r\n                                                                            <FormItem\r\n                                                                                {...field}\r\n                                                                                className='mb-0'\r\n                                                                                validateTrigger={['onChange', 'onBlur']}\r\n                                                                                name={[field.name, 'contact_number']}\r\n                                                                                fieldKey={[field.fieldKey, 'contact_number']}\r\n                                                                                rules={[\r\n                                                                                    { required: true, message: <IntlMessages id='error.contact_required' /> },\r\n                                                                                    { len: 10, message: <IntlMessages id='error.contact_length' /> },\r\n                                                                                    { pattern: /^[0-9]+$/, message: <IntlMessages id='error.contact_valid' /> },\r\n                                                                                ]}\r\n                                                                            >\r\n                                                                                <Input className='people-info' placeholder='phone number' />\r\n                                                                            </FormItem>\r\n                                                                        </Col>\r\n                                                                    </Row>\r\n                                                                </Col>\r\n                                                                <Col span={2} className='flex-d-row align-items-center'>\r\n                                                                    <MinusCircleOutlined\r\n                                                                        className='dynamic-delete-button'\r\n                                                                        style={{ margin: '0 8px' }}\r\n                                                                        onClick={() => {\r\n                                                                            remove(field.name);\r\n                                                                        }}\r\n                                                                    />\r\n                                                                </Col>\r\n                                                            </div>\r\n                                                        </Form.Item>\r\n                                                    ))}\r\n                                                    <Form.Item className='flex-d-row-reverse'>\r\n                                                        <Button\r\n                                                            type='dashed'\r\n                                                            onClick={() => {\r\n                                                                add();\r\n                                                            }}\r\n                                                            style={{ width: '60%' }}\r\n                                                        >\r\n                                                            <PlusOutlined /> Add people\r\n                                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                    </Form.List>\r\n\r\n                                    <Form.Item className='flex-d-row-reverse'>\r\n                                        <Button type='primary' htmlType='submit'>\r\n                                            {editFlag ? 'Save' : 'Add Partner'}\r\n                                        </Button>\r\n                                        <Button onClick={navigateToPartnerList} >\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </Col>\r\n                            <Col span={2}></Col>\r\n                        </Row>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddPartner\r\n","import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Card,\r\n    Radio\r\n} from 'antd';\r\nimport { LeftOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { adminAddProduct, adminEditProduct, getAdminProduct, resetProduct } from '../../../appRedux/actions';\r\nimport './add-product.css'\r\n\r\nconst { Option } = Select;\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n    },\r\n};\r\n\r\nconst AddProduct = (props) => {\r\n\r\n    const { product_id } = props.match.params;\r\n    const { isProductAdded, isLoaded, productItem, isProductEdited } = useSelector(({ adminProducts }) => adminProducts);\r\n    const [editFlag, setEditFlag] = useState(false);\r\n    const dispatch = useDispatch();\r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n        if (product_id) {\r\n            setEditFlag(true)\r\n            dispatch(getAdminProduct(product_id))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isProductAdded || isProductEdited) {\r\n            form.resetFields();\r\n            props.history.push('/admin/product-list')\r\n        }\r\n        if (isLoaded && editFlag) {\r\n            form.setFieldsValue(productItem)\r\n        }\r\n    }, [isProductAdded, isProductEdited, isLoaded])\r\n\r\n\r\n    const navigateBack = () => {\r\n        const { history } = props;\r\n        history.goBack();\r\n    }\r\n\r\n    const navigateToProductList = () => {\r\n        const { history } = props;\r\n        history.push('/admin/product-list');\r\n    }\r\n\r\n    const onFinish = values => {\r\n        if (editFlag) {\r\n            dispatch(adminEditProduct(product_id, values, () => {\r\n                dispatch(resetProduct())\r\n            }))\r\n        } else {\r\n            dispatch(adminAddProduct(values, () => {\r\n                dispatch(resetProduct())\r\n            }));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <h1 className='title gx-mb-4'>\r\n                        <LeftOutlined className='mr-5' onClick={navigateBack} />\r\n                        {editFlag ? 'Edit Product' : 'Add Product'}\r\n                    </h1>\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Card className='gx-card'>\r\n                        <Row>\r\n                            <Col span={22}>\r\n                                <Form\r\n                                    {...formItemLayout}\r\n                                    form={form}\r\n                                    name='add-product'\r\n                                    onFinish={onFinish}\r\n                                    scrollToFirstError\r\n                                >\r\n                                    <Form.Item\r\n                                        name='product_name'\r\n                                        label='Product Name'\r\n                                        rules={[{ required: true, message: 'Please enter product name!' }]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name='category'\r\n                                        label='Category'\r\n                                        rules={[{ required: true, message: 'Please select category!' }]}\r\n                                    >\r\n                                        <Radio.Group disabled={editFlag}>\r\n                                            <Radio value='FDF'>FDF</Radio>\r\n                                            <Radio value='API'>API</Radio>\r\n                                        </Radio.Group>\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        label='Stages'\r\n                                    >\r\n                                        <Row>\r\n                                            <Col span={12}>\r\n                                                <Row>\r\n                                                    <span className='stages-title'>FDF</span>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <ol>\r\n                                                        <li> Development set-up</li>\r\n                                                        <li> Trial Batch</li>\r\n                                                        <li> Pilot BE</li>\r\n                                                        <li> Exhibit batches</li>\r\n                                                        <li> Pivotal BE</li>\r\n                                                        <li> Stability loading in different packs</li>\r\n                                                        <li> Stability data  6 months</li>\r\n                                                        <li> Dossier Compilation</li>\r\n                                                        <li> DF Dossier Filing USFDA</li>\r\n                                                        <li> DF Dossier Filing WHO</li>\r\n                                                        <li>USFDA Approval (FDF)</li>\r\n                                                        <li>WHO-PQ Approval (FDF)</li>\r\n                                                    </ol>\r\n                                                </Row>\r\n                                            </Col>\r\n                                            <Col span={12}>\r\n                                                <Row>\r\n                                                    <span className='stages-title'>API</span>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <ol>\r\n                                                        <li>Investigation and route selection</li>\r\n                                                        <li>R&D Batch API</li>\r\n                                                        <li>Lab scale batch API</li>\r\n                                                        <li>RM Procurement</li>\r\n                                                        <li>API Trial Batch</li>\r\n                                                        <li>API Validation Batches</li>\r\n                                                        <li>API Stability loading</li>\r\n                                                        <li>API Stability Study</li>\r\n                                                        <li>DMF Compilation</li>\r\n                                                        <li>DMF Filing USFDA</li>\r\n                                                        <li>DMF Filing WHO-PQ</li>\r\n                                                        <li>USFDA Approval (API)</li>\r\n                                                        <li>WHO-PQ Approval (API)</li>\r\n                                                    </ol>\r\n                                                </Row>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item\r\n                                        name='therapy_area'\r\n                                        label='Therapy Area'\r\n                                        hasFeedback\r\n                                        rules={[{ required: true, message: 'Please select therapy area!' }]}\r\n                                    >\r\n                                        <Select placeholder='Please select therapy area'>\r\n                                            <Option value='HIV'>HIV</Option>\r\n                                            <Option value='HCV'>HCV</Option>\r\n                                            <Option value='HBV'>HBV</Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item className='flex-d-row-reverse'>\r\n                                        <Button type='primary' htmlType='submit'>\r\n                                            {editFlag ? 'Edit Product' : 'Add Product'}\r\n                                        </Button>\r\n                                        <Button onClick={navigateToProductList}>\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </Col>\r\n                            <Col span={2}></Col>\r\n                        </Row>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddProduct\r\n","import React, { useEffect, useState } from 'react';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { Card, Table, Row, Col, Button, Tooltip } from 'antd';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAdminPDTReport, downloadPDTReport } from '../../../appRedux/actions/ProductDevelopmentTimeline';\r\n\r\nconst PDTReport = (props) => {\r\n\r\n    const { isLoaded, pdtReportData } = useSelector(({ pdt }) => pdt)\r\n    const dispatch = useDispatch();\r\n    const [rows, setRows] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [total, setTotal] = useState(0);\r\n    const [requestObj, setRequestObj] = useState({ page_number: 1, page_size: 50 });\r\n\r\n    useEffect(() => {\r\n        dispatch(getAdminPDTReport(requestObj));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(getAdminPDTReport(requestObj));\r\n    }, [requestObj])\r\n\r\n    useEffect(() => {\r\n        if (isLoaded) {\r\n            const { quarter_order, rows, total_rows } = pdtReportData;\r\n            let dataCols = [{\r\n                title: 'Company Name',\r\n                dataIndex: 'company',\r\n                key: 'company',\r\n                render: name => <span className='text-capitalize'>{name}</span>\r\n            }, {\r\n                title: 'Product',\r\n                dataIndex: 'product',\r\n                key: 'product',\r\n            }, {\r\n                title: 'Stage',\r\n                dataIndex: 'stage',\r\n                key: 'stage',\r\n            },{\r\n                title: 'Status',\r\n                dataIndex: 'product_status',\r\n                key: 'product_status',\r\n            }]\r\n            if (quarter_order && quarter_order.length) {\r\n                quarter_order.forEach(\r\n                    (value, index) => {\r\n                        dataCols.push({\r\n                            title: value,\r\n                            key: index,\r\n                            children: [\r\n                                {\r\n                                    title: 'Start Date',\r\n                                    dataIndex: 'start_date_' + value,\r\n                                    key: 'start_date_' + value,\r\n                                    width: 120\r\n                                },\r\n                                {\r\n                                    title: 'End Date',\r\n                                    dataIndex: 'end_date_' + value,\r\n                                    key: 'end_date_' + value,\r\n                                    width: 120\r\n                                },\r\n                            ]\r\n                        })\r\n                    }\r\n                )\r\n            }\r\n            setColumns(dataCols);\r\n            setRows(rows);\r\n            setTotal(total_rows)\r\n        }\r\n    }, [isLoaded, pdtReportData])\r\n\r\n    const handleTableChange = (pagination) => {\r\n        const { current, pageSize } = pagination\r\n        setRequestObj({\r\n            page_size: pageSize,\r\n            page_number: current\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <div className='gx-flex-row gx-align-items-center gx-justify-content-between'>\r\n                        <h1 className='title gx-mb-4'><IntlMessages id='report.pdt' /></h1>\r\n                        <div className='gx-flex-row'>\r\n                            <Tooltip title={<IntlMessages id='report.download' />}>\r\n                                <Button className='mr-0' onClick={() => dispatch(downloadPDTReport('pdt-report.csv'))} >\r\n                                    <DownloadOutlined className='font-20' />\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Card className='mb-0'>\r\n                        <Table\r\n                            className='gx-table-responsive mpp-list-table'\r\n                            columns={columns}\r\n                            dataSource={rows}\r\n                            pagination={{\r\n                                pageSize: requestObj.page_size,\r\n                                current: requestObj.page_number,\r\n                                total,\r\n                            }}\r\n                            size='small'\r\n                            loading={!isLoaded}\r\n                            onChange={handleTableChange}\r\n                            bordered\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PDTReport\r\n","import React, { useEffect, useState } from 'react';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { Card, Table, Row, Col, Button, Tooltip } from 'antd';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { downloadFilingReport, getAdminFilingPlansReport } from '../../../appRedux/actions/FilingPlans';\r\n\r\nconst FilingPlansReport = (props) => {\r\n\r\n    const { isLoaded, plansReportData } = useSelector(({ filingPlans }) => filingPlans)\r\n    const dispatch = useDispatch();\r\n    const [rows, setRows] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [total, setTotal] = useState(0);\r\n    const [requestObj, setRequestObj] = useState({ page_number: 1, page_size: 50 });\r\n\r\n    useEffect(() => {\r\n        dispatch(getAdminFilingPlansReport(requestObj));\r\n    }, [requestObj])\r\n\r\n    useEffect(() => {\r\n        if (isLoaded) {\r\n            const { product_order, rows, total_rows } = plansReportData;\r\n            let dataCols = [{\r\n                title: 'Company Name',\r\n                dataIndex: 'company_name',\r\n                key: 'company_name',\r\n                fixed: 'left',\r\n                render: name => <div className='text-capitalize'>{name}</div>,\r\n                width: 150\r\n            }, {\r\n                title: 'Country',\r\n                dataIndex: 'country',\r\n                key: 'country',\r\n                fixed: 'left',\r\n                render: name => <div className='text-capitalize'>{name}</div>,\r\n                width: 150\r\n            }]\r\n            if (product_order && product_order.length) {\r\n                product_order.forEach(\r\n                    (value, index) => {\r\n                        dataCols.push({\r\n                            title: value,\r\n                            dataIndex: value,\r\n                            key: value,\r\n                            width: 120\r\n                        })\r\n                    }\r\n                )\r\n            }\r\n            setColumns(dataCols);\r\n            setRows(rows);\r\n            setTotal(total_rows)\r\n        }\r\n    }, [isLoaded, plansReportData])\r\n\r\n    const handleTableChange = (pagination) => {\r\n        const { current, pageSize } = pagination\r\n        setRequestObj({\r\n            page_size: pageSize,\r\n            page_number: current\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <div className='gx-flex-row gx-align-items-center gx-justify-content-between'>\r\n                        <h1 className='title gx-mb-4'><IntlMessages id='report.filing-plans' /></h1>\r\n                        <div className='gx-flex-row'>\r\n                            <Tooltip title={<IntlMessages id='report.download' />}>\r\n                                <Button\r\n                                    className='mr-0'\r\n                                    onClick={() => dispatch(downloadFilingReport('filing-plans.csv'))}\r\n                                >\r\n                                    <DownloadOutlined className='font-20' />\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Card className='mb-0'>\r\n                        <Table\r\n                            className='gx-table-responsive mpp-list-table'\r\n                            columns={columns}\r\n                            dataSource={rows}\r\n                            pagination={{\r\n                                pageSize: requestObj.page_size,\r\n                                current: requestObj.page_number,\r\n                                total,\r\n                            }}\r\n                            scroll={{ x: 300 }}\r\n                            size='small'\r\n                            loading={!isLoaded}\r\n                            onChange={handleTableChange}\r\n                            bordered\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilingPlansReport\r\n","import React, { useEffect, useState } from 'react';\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { Card, Table, Row, Col, Button, Tooltip, Tabs } from 'antd';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { downloadApiSalesReport, downloadFdfSalesReport, getAdminConsolidatedApiReport, getAdminConsolidatedFdfReport } from '../../../appRedux/actions/SalesReport';\r\n\r\nconst TabPane = Tabs.TabPane;\r\n\r\n\r\nconst ConsolidatedSalesReport = (props) => {\r\n\r\n    const { isLoaded, apiSalesReportData, fdfSalesReportData } = useSelector(({ salesReport }) => salesReport);\r\n    const dispatch = useDispatch();\r\n    const [apiRows, setApiRows] = useState([]);\r\n    const [fdfRows, setFdfRows] = useState([]);\r\n    const [apitotal, setApiTotal] = useState(0);\r\n    const [fdftotal, setFdfTotal] = useState(0);\r\n    const [apiRequestObj, setApiRequestObj] = useState({ page_number: 1, page_size: 100 });\r\n    const [fdfRequestObj, setFdfRequestObj] = useState({ page_number: 1, page_size: 100 });\r\n    const [tabKey, setTabKey] = useState('api');\r\n\r\n    useEffect(() => {\r\n        if (tabKey === 'api') {\r\n            dispatch(getAdminConsolidatedApiReport(apiRequestObj));\r\n        } else {\r\n            dispatch(getAdminConsolidatedFdfReport(fdfRequestObj))\r\n        }\r\n    }, [apiRequestObj, tabKey, fdfRequestObj])\r\n\r\n    useEffect(() => {\r\n        if (isLoaded) {\r\n            if (tabKey === 'api') {\r\n                const { total_rows, rows } = apiSalesReportData;\r\n                setApiTotal(total_rows);\r\n                setApiRows(rows);\r\n            } else {\r\n                const { total_rows, rows } = fdfSalesReportData;\r\n                setFdfTotal(total_rows);\r\n                setFdfRows(rows);\r\n            }\r\n        }\r\n    }, [isLoaded, apiSalesReportData, fdfSalesReportData])\r\n\r\n    const handleApiTableChange = (pagination) => {\r\n        const { current, pageSize } = pagination\r\n        setApiRequestObj({\r\n            page_size: pageSize,\r\n            page_number: current\r\n        })\r\n    }\r\n\r\n    const handleFdfTableChange = (pagination) => {\r\n        const { current, pageSize } = pagination\r\n        setFdfRequestObj({\r\n            page_size: pageSize,\r\n            page_number: current\r\n        })\r\n    }\r\n\r\n    const apiColumns = [\r\n        {\r\n            title: 'Company Name',\r\n            dataIndex: 'company_name',\r\n            key: 'company_name',\r\n            ellipsis: true,\r\n            fixed: 'left',\r\n            render: name => <span className='text-capitalize'>{name}</span>,\r\n            width: 250\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Country',\r\n            dataIndex: 'country_name',\r\n            key: 'country_name',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Purchaser',\r\n            dataIndex: 'purchaser',\r\n            key: 'purchaser',\r\n            render: name => <span className='text-capitalize'>{name}</span>,\r\n            width: 200,\r\n        },\r\n        {\r\n            title: 'Api Name',\r\n            dataIndex: 'product_name',\r\n            key: 'product_name',\r\n            width: 200\r\n        },\r\n        {\r\n            title: 'Quantity (Kg)',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Total Value (USD)',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        }\r\n    ]\r\n\r\n    const fdfColumns = [\r\n        {\r\n            title: 'Company Name',\r\n            dataIndex: 'company_name',\r\n            key: 'company_name',\r\n            ellipsis: true,\r\n            fixed: 'left',\r\n            render: name => <span className='text-capitalize'>{name}</span>,\r\n            width: 250\r\n        },\r\n        {\r\n            title: 'Year',\r\n            dataIndex: 'year',\r\n            key: 'year',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Month',\r\n            dataIndex: 'month',\r\n            key: 'month',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Country',\r\n            dataIndex: 'country_name',\r\n            key: 'country_name',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Product',\r\n            dataIndex: 'product_name',\r\n            key: 'product_name',\r\n            width: 200\r\n        },\r\n        {\r\n            title: 'Purchaser',\r\n            dataIndex: 'purchaser',\r\n            key: 'purchaser',\r\n            render: name => <span className='text-capitalize'>{name}</span>,\r\n            width: 200,\r\n        },\r\n        {\r\n            title: 'Strength',\r\n            dataIndex: 'strength',\r\n            key: 'strength',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Formulation Type',\r\n            dataIndex: 'formulation_md',\r\n            key: 'formulation_md',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Pack Size',\r\n            dataIndex: 'pack_size',\r\n            key: 'pack_size',\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'Currency',\r\n            dataIndex: 'currency',\r\n            key: 'currency',\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'Gross Sale Price (per pack) (Local Currency)',\r\n            dataIndex: 'gross_sale_price_currency',\r\n            key: 'gross_sale_price_currency',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Applicable Currency Exchange Rate to USD',\r\n            dataIndex: 'usd_exchange_rate',\r\n            key: 'usd_exchange_rate',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Gross Sale Price (per pack) (USD)',\r\n            dataIndex: 'gross_sale_price_usd',\r\n            key: 'gross_sale_price_usd',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Deductable Expenses (USD)',\r\n            dataIndex: 'deductable_expenses',\r\n            key: 'deductable_expenses',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Total Net Sales Value',\r\n            dataIndex: 'total_value',\r\n            key: 'total_value',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Royalty %',\r\n            dataIndex: 'royalty_percent',\r\n            key: 'royalty_percent',\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'Royalty Due',\r\n            dataIndex: 'royalty_due',\r\n            key: 'royalty_due',\r\n            width: 100\r\n        },\r\n        {\r\n            title: 'Procurement Agency End-Country',\r\n            dataIndex: 'procurement_end_country',\r\n            key: 'procurement_end_country',\r\n            width: 150\r\n        },\r\n        {\r\n            title: 'Comments',\r\n            dataIndex: 'comments',\r\n            key: 'comments',\r\n            width: 200\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <div className='gx-flex-row gx-align-items-center gx-justify-content-between'>\r\n                        <h1 className='title gx-mb-4'><IntlMessages id='report.sales-report' /></h1>\r\n                    </div>\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Card className='mb-0'>\r\n                        <Tabs\r\n                            tabPosition='top'\r\n                            type='card'\r\n                            className='sales-report-tabs'\r\n                            tabBarExtraContent={\r\n                                <div>\r\n                                    <Tooltip title={tabKey === 'api' ? 'download API report!' : 'download FDF report!'}>\r\n                                        <Button\r\n                                            className='mb-0'\r\n                                            onClick={() => {\r\n                                                tabKey === 'api' ?\r\n                                                    dispatch(downloadApiSalesReport('api-sales-report.csv'))\r\n                                                    : dispatch(downloadFdfSalesReport('fdf-sales-report.csv'))\r\n                                            }}\r\n                                        >\r\n                                            <DownloadOutlined className='font-20' />\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </div>\r\n                            }\r\n                            onChange={(currentTabKey) => { setTabKey(currentTabKey) }}\r\n                        >\r\n                            <TabPane tab='API' key='api'>\r\n                                <Table\r\n                                    className='gx-table-responsive mpp-list-table'\r\n                                    columns={apiColumns}\r\n                                    dataSource={apiRows}\r\n                                    pagination={{\r\n                                        pageSize: apiRequestObj.page_size,\r\n                                        current: apiRequestObj.page_number,\r\n                                        total: apitotal,\r\n                                    }}\r\n                                    size='small'\r\n                                    loading={!isLoaded}\r\n                                    onChange={handleApiTableChange}\r\n                                />\r\n                            </TabPane>\r\n                            <TabPane tab='FDF' key='fdf'>\r\n                                <Table\r\n                                    className='gx-table-responsive mpp-list-table'\r\n                                    columns={fdfColumns}\r\n                                    dataSource={fdfRows}\r\n                                    pagination={{\r\n                                        pageSize: fdfRequestObj.page_size,\r\n                                        current: fdfRequestObj.page_number,\r\n                                        total: fdftotal,\r\n                                    }}\r\n                                    size='small'\r\n                                    loading={!isLoaded}\r\n                                    onChange={handleFdfTableChange}\r\n                                    bordered\r\n                                />\r\n                            </TabPane>\r\n                        </Tabs>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConsolidatedSalesReport\r\n","import React from 'react';\r\nimport Auxiliary from 'util/Auxiliary';\r\n\r\n\r\nconst AboutItem = ({ data }) => {\r\n  const { title, icon, desc, userList, descClass } = data;\r\n  return (\r\n    <Auxiliary>\r\n      <div className='gx-media gx-flex-nowrap gx-mt-3 gx-mt-lg-4 gx-mb-2'>\r\n        <div className='gx-mr-3'>\r\n          <i className={`icon icon-${icon} gx-fs-xlxl gx-text-secondary`} />\r\n        </div>\r\n        <div className='gx-media-body'>\r\n          <h6 className='gx-mb-1 gx-text-grey'>{title}</h6>\r\n          {userList === '' ? null : userList}\r\n          {desc === '' ? null : <p className={'gx-mb-0 ' + descClass}>{desc}</p>}\r\n        </div>\r\n      </div>\r\n    </Auxiliary>\r\n  );\r\n};\r\n\r\nexport default AboutItem;\r\n","import React from 'react';\r\nimport { Col, Row } from 'antd';\r\nimport Widget from 'components/Widget';\r\nimport AboutItem from './AboutItem';\r\n\r\nconst About = (props) => {\r\n\r\n  return (\r\n    <Widget title='Profile' styleName='gx-card-tabs gx-card-tabs-right gx-card-profile'>\r\n      <div className='gx-mb-2'>\r\n        <Row>\r\n          {props.aboutList.map((about, index) =>\r\n            <Col key={index} xl={8} lg={12} md={12} sm={12} xs={24}>\r\n              <AboutItem data={about} />\r\n            </Col>\r\n          )}\r\n        </Row>\r\n      </div>\r\n    </Widget>\r\n  );\r\n}\r\n\r\n\r\nexport default About;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Avatar, Table, Row, Col, Button, Tooltip } from 'antd';\r\nimport About from 'components/profile-userInfo'\r\nimport { getRole, getUserDetails, getUserInfo } from '../../../helpers';\r\n\r\n\r\nconst UserProfilePage = (props) => {\r\n\r\n    const [isUserAdmin, setIsUserAdmin] = useState(false);\r\n    const [userDetails, setUserDetails] = useState({});\r\n\r\n    useEffect(() => {\r\n        setIsUserAdmin(getRole() === 'ADMIN')\r\n        setUserDetails(getUserInfo())\r\n    }, [])\r\n\r\n    const setInfoList = () => {\r\n        if (isUserAdmin) {\r\n            return [\r\n                {\r\n                    id: 1,\r\n                    title: 'User Name',\r\n                    icon: 'user-o',\r\n                    userList: '',\r\n                    descClass: 'gx-text-capitalize',\r\n                    desc: [userDetails.name]\r\n                },\r\n                {\r\n                    id: 2,\r\n                    title: 'email',\r\n                    icon: 'email',\r\n                    userList: '',\r\n                    descClass: '',\r\n                    desc: [userDetails.email]\r\n                }\r\n            ]\r\n        } else {\r\n            return [\r\n                {\r\n                    id: 1,\r\n                    title: 'Company Name',\r\n                    icon: 'company',\r\n                    userList: '',\r\n                    descClass: 'gx-text-capitalize',\r\n                    desc: [userDetails.company_name]\r\n                },\r\n                {\r\n                    id: 2,\r\n                    title: 'email',\r\n                    icon: 'email',\r\n                    userList: '',\r\n                    descClass: '',\r\n                    desc: [userDetails.email]\r\n                },\r\n                {\r\n                    id: 2,\r\n                    title: 'Contact Number',\r\n                    icon: 'phone',\r\n                    descClass: '',\r\n                    userList: '',\r\n                    desc: [userDetails.contact_number]\r\n                },\r\n                {\r\n                    id: 3,\r\n                    title: 'Region',\r\n                    icon: 'map-google',\r\n                    userList: '',\r\n                    descClass: 'gx-text-capitalize',\r\n                    desc: [userDetails.region]\r\n                },\r\n                {\r\n                    id: 4,\r\n                    title: 'Address',\r\n                    icon: 'home',\r\n                    userList: '',\r\n                    descClass: 'gx-text-capitalize',\r\n                    desc: [userDetails.address ? userDetails.address : '---']\r\n                }\r\n            ]\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"gx-profile-content\">\r\n            <Row>\r\n                <Col span={24}>\r\n                    <About aboutList={setInfoList()} />\r\n                </Col>\r\n            </Row>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default UserProfilePage\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Button, DatePicker, Form, Card, Col, Row } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { adminGetCutOffDate, adminSetCutOffDate } from '../../../appRedux/actions';\r\nimport { LeftOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n    },\r\n};\r\n\r\nconst AdminSettings = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [form] = Form.useForm();\r\n\r\n    const { isLoaded, cutOffDate } = useSelector(({ adminPartner }) => adminPartner);\r\n\r\n    useEffect(() => {\r\n        dispatch(adminGetCutOffDate())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isLoaded) {\r\n            form.setFieldsValue({\r\n                date: cutOffDate && cutOffDate.cut_off_date ? moment(cutOffDate.cut_off_date) : ''\r\n            })\r\n        }\r\n    }, [isLoaded])\r\n\r\n    const config = {\r\n        rules: [{ type: 'object', required: true, message: 'Please select date!' }],\r\n    };\r\n\r\n    const navigateBack = () => {\r\n        props.history.goBack()\r\n    }\r\n\r\n    const navigateToDashboard = () => {\r\n        props.history.push('/')\r\n    }\r\n\r\n    const onFinish = values => {\r\n        dispatch(adminSetCutOffDate({ 'date': values.date.format('DD-MM-yyyy') }))\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <Col span={24}>\r\n                    <h1 className='title gx-mb-4'>\r\n                        <LeftOutlined className='mr-5' onClick={navigateBack} />\r\n                        Admin Settings\r\n                    </h1>\r\n                </Col>\r\n                <Col span={24}>\r\n                    <Card className='gx-card'>\r\n                        <Row>\r\n                            <Col span={22}>\r\n                                <Form\r\n                                    name='time_related_controls'\r\n                                    onFinish={onFinish}\r\n                                    form={form}\r\n                                    className='gx-signin-form gx-form-row0'\r\n                                    {...formItemLayout}\r\n                                >\r\n                                    <Form.Item\r\n                                        name='date'\r\n                                        {...config}\r\n                                        label='Set Report submission date'\r\n                                    >\r\n                                        <DatePicker format='DD-MM-YYYY' />\r\n                                    </Form.Item>\r\n\r\n                                    <Form.Item className='flex-d-row-reverse'>\r\n                                        <Button type='primary' htmlType='submit'>\r\n                                            Save\r\n                                        </Button>\r\n                                        <Button onClick={navigateToDashboard}>\r\n                                            Cancel\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n\r\n                            </Col>\r\n                            <Col span={2}></Col>\r\n                        </Row>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AdminSettings;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { Auth } from '../helpers/auth'\r\nimport { roleConstants } from '../constants';\r\n\r\nimport AdminDashboard from './pages/dashboard/adminDashboard';\r\nimport PartnerDashboard from './pages/partner-dashboard';\r\nimport PartnerListNew from './pages/partner-list-new';\r\nimport PartnerPerformance from './pages/partner-peformance';\r\nimport ProductList from './pages/product-list';\r\nimport DevelopmentTimeline from './pages/development-timeline';\r\nimport FilingPlans from './pages/filing-plans';\r\nimport SalesReport from './pages/sales-report';\r\nimport ChangePassword from \"./pages/change-password\";\r\nimport AddPartner from \"./pages/add-partner\";\r\nimport AddProduct from \"./pages/add-product\";\r\nimport PDTReport from \"./pages/report-pdt\";\r\nimport FilingPlansReport from \"./pages/report-filing-plans\";\r\nimport ConsolidatedSalesReport from \"./pages/report-sales-report\";\r\nimport UserProfilePage from \"./pages/profile\";\r\nimport AdminSettings from \"./pages/admin-settings\";\r\n\r\nconst AdminDashboardPage = Auth(AdminDashboard, [roleConstants.ADMIN, roleConstants.PARTNER]);\r\nconst PartnerDashboardPage = Auth(PartnerDashboard, [roleConstants.PARTNER]);\r\nconst ChangePasswordPage = Auth(ChangePassword, [roleConstants.ADMIN, roleConstants.PARTNER]);\r\nconst AdminProfilePage = Auth(UserProfilePage, [roleConstants.ADMIN]);\r\nconst PartnerProfilePage = Auth(UserProfilePage, [roleConstants.PARTNER]);\r\nconst PartnerListNewPage = Auth(PartnerListNew, [roleConstants.ADMIN]);\r\nconst AddPartnerPage = Auth(AddPartner, [roleConstants.ADMIN]);\r\nconst PartnerPerformancePage = Auth(PartnerPerformance, [roleConstants.ADMIN]);\r\nconst ProductListPage = Auth(ProductList, [roleConstants.ADMIN]);\r\nconst AddProductPage = Auth(AddProduct, [roleConstants.ADMIN]);\r\nconst DevelopmentTimelinePage = Auth(DevelopmentTimeline, [roleConstants.PARTNER, roleConstants.ADMIN]);\r\nconst FilingPlansPage = Auth(FilingPlans, [roleConstants.PARTNER, roleConstants.ADMIN]);\r\nconst SalesReportPage = Auth(SalesReport, [roleConstants.PARTNER, roleConstants.ADMIN]);\r\nconst PDTReportPage = Auth(PDTReport, [roleConstants.ADMIN]);\r\nconst FilingPlansReportPage = Auth(FilingPlansReport, [roleConstants.ADMIN]);\r\nconst ConsolidatedSalesReportPage = Auth(ConsolidatedSalesReport, [roleConstants.ADMIN]);\r\nconst AdminSettingsPage = Auth(AdminSettings, [roleConstants.ADMIN]);\r\n\r\n\r\n\r\nconst NotFoundRedirect = () => <Redirect to='/error-404' />\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"gx-main-content-wrapper\">\r\n        <Switch>\r\n          <Route exact path='/change-password' component={ChangePasswordPage} />\r\n          <Route exact path='/admin/dashboard' component={AdminDashboardPage} />\r\n          <Route exact path='/admin/partner-list' component={PartnerListNewPage} />\r\n          <Route exact path='/admin/edit-partner/:id' component={AddPartnerPage} />\r\n          <Route exact path='/admin/add-partner' component={AddPartnerPage} />\r\n          <Route exact path='/admin/partner-performance' component={PartnerPerformancePage} />\r\n          <Route exact path='/admin/product-list' component={ProductListPage} />\r\n          <Route exact path='/admin/add-product' component={AddProductPage} />\r\n          <Route exact path='/admin/edit-product/:product_id' component={AddProductPage} />\r\n          <Route exact path='/admin/development-timeline/:id' component={DevelopmentTimelinePage} />\r\n          <Route exact path='/admin/filing-plans/:id' component={FilingPlansPage} />\r\n          <Route exact path='/admin/sales-report/:id' component={SalesReportPage} />\r\n          <Route exact path='/admin/report/development-timeline' component={PDTReportPage} />\r\n          <Route exact path='/admin/report/filing-plans' component={FilingPlansReportPage} />\r\n          <Route exact path='/admin/report/sales-report' component={ConsolidatedSalesReportPage} />\r\n          <Route exact path='/admin/profile' component={AdminProfilePage} />\r\n          <Route exact path='/admin/settings' component={AdminSettingsPage} />\r\n\r\n\r\n          <Route exact path='/partner/dashboard' component={PartnerDashboardPage} />\r\n          <Route exact path='/partner/development-timeline' component={DevelopmentTimelinePage} />\r\n          <Route exact path='/partner/filing-plans' component={FilingPlansPage} />\r\n          <Route exact path='/partner/sales-report' component={SalesReportPage} />\r\n          <Route exact path='/partner/profile' component={PartnerProfilePage} />\r\n\r\n\r\n          <Route component={NotFoundRedirect} />\r\n        </Switch>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { Layout } from \"antd\";\r\n\r\nimport Sidebar from \"../Sidebar/index\";\r\nimport HorizontalDefault from \"../Topbar/HorizontalDefault/index\";\r\nimport HorizontalDark from \"../Topbar/HorizontalDark/index\";\r\nimport InsideHeader from \"../Topbar/InsideHeader/index\";\r\nimport AboveHeader from \"../Topbar/AboveHeader/index\";\r\nimport BelowHeader from \"../Topbar/BelowHeader/index\";\r\n\r\nimport Topbar from \"../Topbar/index\";\r\nimport { footerText } from \"util/config\";\r\nimport App from \"routes/index\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  NAV_STYLE_ABOVE_HEADER,\r\n  NAV_STYLE_BELOW_HEADER,\r\n  NAV_STYLE_DARK_HORIZONTAL,\r\n  NAV_STYLE_DEFAULT_HORIZONTAL,\r\n  NAV_STYLE_DRAWER,\r\n  NAV_STYLE_FIXED,\r\n  NAV_STYLE_INSIDE_HEADER_HORIZONTAL,\r\n  NAV_STYLE_MINI_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\r\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\r\n  TAB_SIZE\r\n} from \"../../constants/ThemeSetting\";\r\n// import NoHeaderNotification from \"../Topbar/NoHeaderNotification/index\";\r\n\r\nconst { Content, Footer } = Layout;\r\n\r\nconst MainApp = (props) => {\r\n\r\n  const navStyle = useSelector(({ settings }) => settings.navStyle);\r\n  const width = useSelector(({ settings }) => settings.width);\r\n\r\n  const getContainerClass = (navStyle) => {\r\n    switch (navStyle) {\r\n      case NAV_STYLE_DARK_HORIZONTAL:\r\n        return \"gx-container-wrap\";\r\n      case NAV_STYLE_DEFAULT_HORIZONTAL:\r\n        return \"gx-container-wrap\";\r\n      case NAV_STYLE_INSIDE_HEADER_HORIZONTAL:\r\n        return \"gx-container-wrap\";\r\n      case NAV_STYLE_BELOW_HEADER:\r\n        return \"gx-container-wrap\";\r\n      case NAV_STYLE_ABOVE_HEADER:\r\n        return \"gx-container-wrap\";\r\n      default:\r\n        return \"\"\r\n    }\r\n  };\r\n  const getNavStyles = (navStyle) => {\r\n    switch (navStyle) {\r\n      case NAV_STYLE_DEFAULT_HORIZONTAL:\r\n        return <HorizontalDefault />;\r\n      case NAV_STYLE_DARK_HORIZONTAL:\r\n        return <HorizontalDark />;\r\n      case NAV_STYLE_INSIDE_HEADER_HORIZONTAL:\r\n        return <InsideHeader />;\r\n      case NAV_STYLE_ABOVE_HEADER:\r\n        return <AboveHeader />;\r\n      case NAV_STYLE_BELOW_HEADER:\r\n        return <BelowHeader />;\r\n      case NAV_STYLE_FIXED:\r\n        // return <Topbar />;\r\n      case NAV_STYLE_DRAWER:\r\n        return <Topbar />;\r\n      case NAV_STYLE_MINI_SIDEBAR:\r\n        // return <Topbar />;\r\n        return null;\r\n      case NAV_STYLE_NO_HEADER_MINI_SIDEBAR:\r\n        // return <NoHeaderNotification/>;\r\n        return null;\r\n      case NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR:\r\n        // return <NoHeaderNotification />;\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n  const getSidebar = (navStyle, width) => {\r\n    if (width < TAB_SIZE) {\r\n      return <Sidebar />;\r\n    }\r\n    switch (navStyle) {\r\n      case NAV_STYLE_FIXED:\r\n        return <Sidebar history={props.history} />;\r\n      case NAV_STYLE_DRAWER:\r\n        return <Sidebar />;\r\n      case NAV_STYLE_MINI_SIDEBAR:\r\n        return <Sidebar history={props.history} />;\r\n      case NAV_STYLE_NO_HEADER_MINI_SIDEBAR:\r\n        return <Sidebar />;\r\n      case NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR:\r\n        return <Sidebar />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Layout className=\"gx-app-layout\">\r\n      {getSidebar(navStyle, width)}\r\n      <Layout>\r\n        {getNavStyles(navStyle)}\r\n        <Content className={`gx-layout-content ${getContainerClass(navStyle)}`}>\r\n          <App />\r\n          {false ?\r\n            <Footer>\r\n              <div className=\"gx-layout-footer-content\">\r\n                {footerText}\r\n              </div>\r\n            </Footer>\r\n            : null\r\n          }\r\n        </Content>\r\n      </Layout>\r\n    </Layout>\r\n  )\r\n};\r\n\r\n\r\nexport default MainApp;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { Button, Form, Input, Checkbox } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { userLogin } from '../appRedux/actions/Auth';\r\nimport { roleConstants } from '../constants'\r\n\r\nimport UserOutlined from '@ant-design/icons/lib/icons/UserOutlined';\r\nimport LockOutlined from '@ant-design/icons/lib/icons/LockOutlined';\r\nimport IntlMessages from 'util/IntlMessages';\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst Login = (props) => {\r\n\r\n  const isLoggedIn = useSelector(state => state.authentication.isUserLoggedIn);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    navigatePostLogin()\r\n  }, [isLoggedIn])\r\n\r\n  const navigatePostLogin = () => {\r\n    let user = JSON.parse(localStorage.getItem('user'));\r\n    if (user) {\r\n      if (user.role === roleConstants.ADMIN) {\r\n        props.history.push('/admin/dashboard');\r\n      } else {\r\n        props.history.push('/partner/dashboard');\r\n      }\r\n    } else {\r\n      props.history.push('/login');\r\n    }\r\n  }\r\n\r\n  const onFinish = values => {\r\n    dispatch(userLogin({\r\n      email: values.email.trim().toLowerCase(),\r\n      password: values.password.trim()\r\n    }, navigatePostLogin()))\r\n  };\r\n\r\n  return (\r\n    <div className='gx-login-container'>\r\n      <div className='gx-login-content'>\r\n        <div className='gx-login-header gx-text-center'>\r\n          <img className='mb-30' src={require('assets/images/logo-white.png')} alt='mpp' title='mpp' />\r\n          <p><IntlMessages id=\"app.userAuth.welcome\" /></p>\r\n          <h1 className='gx-login-title'>Login</h1>\r\n        </div>\r\n        <Form\r\n          name='login'\r\n          onFinish={onFinish}\r\n          className='gx-signin-form gx-form-row0'>\r\n          <FormItem\r\n            rules={[\r\n              { required: true, message: <IntlMessages id='error.email_required' /> },\r\n              { type: 'email', message: <IntlMessages id='error.email_valid' /> }\r\n            ]}\r\n            name='email'\r\n          >\r\n            <Input prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              placeholder='Email' />\r\n          </FormItem>\r\n          <FormItem rules={[{ required: true, message: <IntlMessages id='error.password_required' /> }]} name='password'>\r\n            <Input.Password prefix={<LockOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n              placeholder='Password' />\r\n          </FormItem>\r\n          <div className='gx-flex-row align-items-baseline'>\r\n            <FormItem name='remember' valuePropName='checked'>\r\n              <Checkbox>Remember me</Checkbox>\r\n            </FormItem>\r\n            <Link className='gx-login-form-forgot gx-ml-auto float-right' to='/reset-password'><IntlMessages id='app.userAuth.forgotPassword' /></Link>\r\n          </div>\r\n          <FormItem className='gx-text-center'>\r\n            <Button className='gx-img-fluid-full' type='primary' htmlType='submit'>\r\n              <IntlMessages id='app.userAuth.login' />\r\n            </Button>\r\n          </FormItem>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { userLogout } from \"../appRedux/actions/Auth\";\r\n\r\nconst Logout = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(userLogout());\r\n        props.history.push('/login')\r\n    })\r\n\r\n    return (\r\n        <></>\r\n    )\r\n\r\n}\r\n\r\nexport default Logout;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport IntlMessages from \"util/IntlMessages\";\r\nimport { authConstants } from \"../constants\";\r\nimport { userForgetPassword } from \"../appRedux/actions/Auth\";\r\nimport { getUserDetails, showMessage } from '../helpers';\r\n\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst ResetPassword = (props) => {\r\n  const dispatch = useDispatch();\r\n  const { isMailSend } = useSelector(({ authentication }) => authentication);\r\n  const [isResetToken, setIsResetToken] = useState(false)\r\n\r\n  useEffect(() => {\r\n\r\n    if (getUserDetails() !== '') {\r\n      showMessage('info', 'Access Denied!');\r\n      props.history.push('/logout')\r\n    }\r\n\r\n    const urlParams = new URLSearchParams(window.location.search)\r\n    if (urlParams.get('token') === 'true') {\r\n      setIsResetToken(true)\r\n    }\r\n\r\n    return () => {\r\n      dispatch({ type: authConstants.FORGOT_PASSWORD_REQUEST });\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (isMailSend) {\r\n      props.history.push('/login')\r\n    }\r\n  }, [isMailSend])\r\n\r\n  const onFinishFailed = errorInfo => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const onFinish = values => {\r\n    dispatch(userForgetPassword({\r\n      email: values.email.trim().toLowerCase()\r\n    }))\r\n  };\r\n\r\n  return (\r\n    <div className=\"gx-login-container\">\r\n      <div className=\"gx-login-content\">\r\n        <div className=\"gx-login-header\">\r\n          <img src={require(\"assets/images/logo-white.png\")} alt=\"mpp\" title=\"mpp\" />\r\n        </div>\r\n        <div className=\"gx-mb-4\">\r\n          <h2>{isResetToken ? 'Resend set password link' : 'Forgot Your Password ?'}</h2>\r\n          <p>{isResetToken ? 'Enter below the registered e-mail id' : <IntlMessages id=\"app.userAuth.forgot\" />}</p>\r\n        </div>\r\n\r\n        <Form\r\n          name=\"basic\"\r\n          onFinish={onFinish}\r\n          onFinishFailed={onFinishFailed}\r\n          className=\"gx-signin-form gx-form-row0\">\r\n          <FormItem name=\"email\" rules={[{ required: true, message: 'Please input your E-mail!' }, { type: 'email', message: <IntlMessages id='error.email_valid' /> }]}>\r\n            <Input className='gx-input-lineheight' type=\"email\" placeholder=\"E-Mail Address\" />\r\n          </FormItem>\r\n\r\n          <FormItem>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n              <IntlMessages id=\"app.userAuth.send\" />\r\n            </Button>\r\n          </FormItem>\r\n        </Form>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import React from \"react\";\r\nimport loader from \"../../assets/images/loader.svg\"\r\n\r\nconst CircularProgress = ({className}) => <div className={`loader ${className}`}>\r\n  <img src={loader} alt=\"loader\"/>\r\n</div>;\r\nexport default CircularProgress;\r\n","import React, { useEffect } from 'react';\r\nimport { Button, Form, Input } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { validateToken, setPassword } from '../appRedux/actions/Auth';\r\n\r\nimport IntlMessages from 'util/IntlMessages';\r\nimport { getUserDetails, showMessage } from '../helpers';\r\n\r\nconst FormItem = Form.Item;\r\n\r\nconst SetPassword = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (getUserDetails() === '') {\r\n            const token = props.match.params.token\r\n            dispatch(validateToken({ 'token': token }))\r\n        } else {\r\n            showMessage('info', 'Access Denied!');\r\n            props.history.push('/logout')\r\n        }\r\n    }, []);\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const onFinish = values => {\r\n        const token = props.match.params.token\r\n        dispatch(setPassword({ 'password': values.password, 'token': token }, navigatePostSetPassword()))\r\n    };\r\n\r\n    const navigatePostSetPassword = () => {\r\n        props.history.push('/login');\r\n    }\r\n\r\n    return (\r\n        <div className='gx-login-container'>\r\n            <div className='gx-login-content'>\r\n\r\n                <div className='gx-login-header'>\r\n                    <img src={require('assets/images/logo-white.png')} alt='wieldy' title='wieldy' />\r\n                </div>\r\n                <div className='gx-mb-4'>\r\n                    <h2>Change Password</h2>\r\n                    <p><IntlMessages id='appModule.enterPasswordReset' /></p>\r\n                </div>\r\n\r\n                <Form\r\n                    initialValues={{ remember: true }}\r\n                    name='reset-password'\r\n                    onFinish={onFinish}\r\n                    onFinishFailed={onFinishFailed}\r\n                    className='gx-signin-form gx-form-row0'>\r\n\r\n                    <FormItem\r\n                        rules={[\r\n                            { required: true, message: 'Please input your Password!' },\r\n                            { min: 8, message: <IntlMessages id='error.password_min' /> },\r\n                            { pattern: /^(?=.*\\d)(?=.*[a-z]).{8,100}$/, message: <IntlMessages id='error.password_valid' /> }\r\n                        ]}\r\n                        name='password'\r\n                    >\r\n                        <Input.Password placeholder='Password' />\r\n                    </FormItem>\r\n\r\n                    <FormItem\r\n                        name='confirm'\r\n                        dependencies={['password']}\r\n                        hasFeedback\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please confirm your password!',\r\n                            },\r\n                            ({ getFieldValue }) => ({\r\n                                validator(rule, value) {\r\n                                    if (!value || getFieldValue('password') === value) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject('The two passwords that you entered do not match!');\r\n                                },\r\n                            }),\r\n                        ]}\r\n                    >\r\n                        <Input.Password placeholder='Retype New Password' />\r\n                    </FormItem>\r\n\r\n                    <FormItem>\r\n                        <Button type='primary' htmlType='submit'>\r\n                            <IntlMessages id='app.userAuth.setPassword' />\r\n                        </Button>\r\n                    </FormItem>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SetPassword;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport URLSearchParams from 'url-search-params'\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { ConfigProvider } from 'antd';\r\nimport { IntlProvider } from \"react-intl\";\r\n\r\nimport AppLocale from \"lngProvider\";\r\nimport MainApp from \"./MainApp\";\r\nimport Login from \"../Login\";\r\nimport Logout from \"../Logout\";\r\nimport ResetPassword from \"../ResetPassword\";\r\nimport asyncComponent from \"util/asyncComponent\";\r\nimport { onLayoutTypeChange, onNavStyleChange, setThemeType } from \"../../appRedux/actions/Setting\";\r\n\r\nimport {\r\n  LAYOUT_TYPE_BOXED,\r\n  LAYOUT_TYPE_FRAMED,\r\n  LAYOUT_TYPE_FULL,\r\n  NAV_STYLE_ABOVE_HEADER,\r\n  NAV_STYLE_BELOW_HEADER,\r\n  NAV_STYLE_DARK_HORIZONTAL,\r\n  NAV_STYLE_DEFAULT_HORIZONTAL,\r\n  NAV_STYLE_INSIDE_HEADER_HORIZONTAL,\r\n  THEME_TYPE_DARK\r\n} from \"../../constants/ThemeSetting\";\r\n\r\nimport './custom-style.css'\r\nimport SetPassword from \"../SetPassword\";\r\n\r\nconst RestrictedRoute = ({ component: Component, location, authUser, ...rest }) =>\r\n  <Route\r\n    {...rest}\r\n    render={\r\n      props =>\r\n        authUser\r\n          ? <Component {...props} />\r\n          : <Redirect\r\n            to={{\r\n              pathname: '/login',\r\n              state: { from: location }\r\n            }}\r\n          />\r\n    }\r\n  />;\r\n\r\nconst App = (props) => {\r\n\r\n  const { location } = props;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const locale = useSelector(({ settings }) => settings.locale);\r\n  const navStyle = useSelector(({ settings }) => settings.navStyle);\r\n  const themeType = useSelector(({ settings }) => settings.themeType);\r\n  const layoutType = useSelector(({ settings }) => settings.layoutType);\r\n\r\n  useEffect(() => {\r\n\r\n    const params = new URLSearchParams(location.search);\r\n    if (params.has(\"theme\")) {\r\n      dispatch(setThemeType(params.get('theme')));\r\n    }\r\n    if (params.has(\"nav-style\")) {\r\n      dispatch(onNavStyleChange(params.get('nav-style')));\r\n    }\r\n    if (params.has(\"layout-type\")) {\r\n      dispatch(onLayoutTypeChange(params.get('layout-type')));\r\n    }\r\n  }, [dispatch, location.search]);\r\n\r\n\r\n  const setLayoutType = (layoutType) => {\r\n    if (layoutType === LAYOUT_TYPE_FULL) {\r\n      document.body.classList.remove('boxed-layout');\r\n      document.body.classList.remove('framed-layout');\r\n      document.body.classList.add('full-layout');\r\n    } else if (layoutType === LAYOUT_TYPE_BOXED) {\r\n      document.body.classList.remove('full-layout');\r\n      document.body.classList.remove('framed-layout');\r\n      document.body.classList.add('boxed-layout');\r\n    } else if (layoutType === LAYOUT_TYPE_FRAMED) {\r\n      document.body.classList.remove('boxed-layout');\r\n      document.body.classList.remove('full-layout');\r\n      document.body.classList.add('framed-layout');\r\n    }\r\n  };\r\n\r\n  const setNavStyle = (navStyle) => {\r\n    if (navStyle === NAV_STYLE_DEFAULT_HORIZONTAL ||\r\n      navStyle === NAV_STYLE_DARK_HORIZONTAL ||\r\n      navStyle === NAV_STYLE_INSIDE_HEADER_HORIZONTAL ||\r\n      navStyle === NAV_STYLE_ABOVE_HEADER ||\r\n      navStyle === NAV_STYLE_BELOW_HEADER) {\r\n      document.body.classList.add('full-scroll');\r\n      document.body.classList.add('horizontal-layout');\r\n    } else {\r\n      document.body.classList.remove('full-scroll');\r\n      document.body.classList.remove('horizontal-layout');\r\n    }\r\n  };\r\n\r\n  if (themeType === THEME_TYPE_DARK) {\r\n    document.body.classList.add('dark-theme');\r\n  }\r\n  if (location.pathname === '/') {\r\n    return (<Redirect to={'/login'} />);\r\n  }\r\n\r\n  const NotFoundRedirect = () => <Redirect to='/error-404' />\r\n\r\n  setLayoutType(layoutType);\r\n\r\n  setNavStyle(navStyle);\r\n\r\n  const currentAppLocale = AppLocale[locale.locale];\r\n\r\n  return (\r\n    <ConfigProvider locale={currentAppLocale.antd}>\r\n      <IntlProvider\r\n        locale={currentAppLocale.locale}\r\n        messages={currentAppLocale.messages}>\r\n        <Switch>\r\n          <Route exact path='/login' component={Login} />\r\n          <Route path={`/logout`} component={Logout} />\r\n          <Route path={`/set-password/:token`} component={SetPassword} />\r\n          <Route exact path='/reset-password' component={ResetPassword} />\r\n          <Route path={`/error-404`} component={asyncComponent(() => import('../error-pages/404'))} />\r\n          <RestrictedRoute authUser={true} component={MainApp} />\r\n          <Route component={NotFoundRedirect} />\r\n        </Switch>\r\n      </IntlProvider>\r\n    </ConfigProvider>\r\n  )\r\n};\r\n\r\nexport default App;\r\n","import React, {Component} from \"react\";\r\nimport Nprogress from \"nprogress\";\r\nimport ReactPlaceholder from \"react-placeholder\";\r\nimport \"nprogress/nprogress.css\";\r\n\r\nimport \"react-placeholder/lib/reactPlaceholder.css\";\r\nimport CircularProgress from \"components/CircularProgress\";\r\n\r\nexport default function asyncComponent(importComponent) {\r\n  class AsyncFunc extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        component: null\r\n      };\r\n    }\r\n\r\n    componentWillMount() {\r\n      Nprogress.start();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.mounted = false;\r\n    }\r\n\r\n    async componentDidMount() {\r\n      this.mounted = true;\r\n      const {default: Component} = await importComponent();\r\n      Nprogress.done();\r\n      if (this.mounted) {\r\n        this.setState({\r\n          component: <Component {...this.props} />\r\n        });\r\n      }\r\n    }\r\n\r\n    render() {\r\n      const Component = this.state.component || <CircularProgress/>;\r\n      return (\r\n        <ReactPlaceholder type=\"text\" rows={7} ready={Component !== null}>\r\n          {Component}\r\n        </ReactPlaceholder>\r\n      );\r\n    }\r\n  }\r\n\r\n  return AsyncFunc;\r\n}\r\n","import React from 'react';\r\nimport { Spin } from 'antd';\r\nimport { useSelector } from \"react-redux\";\r\nimport './loader.css';\r\n\r\nconst Loader = () => {\r\n\r\n    const showLoader = useSelector(state => state.loader.showLoader);\r\n    return (\r\n        <div>\r\n            { showLoader ? (\r\n                <div className=\"app-loader-wrapper\">\r\n                    <div className=\"app-loader\">\r\n                        <Spin size='large' />\r\n                    </div>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport { Provider } from 'react-redux'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport \"assets/vendors/style\";\r\nimport \"styles/wieldy.less\";\r\n\r\nimport configureStore, { history } from './appRedux/store';\r\nimport App from \"./containers/App/index\";\r\nimport Loader from \"./components/loader\";\r\n\r\n// const store = configureStore(/ provide initial state if any /);\r\nconst store = configureStore();\r\n\r\nconst NextApp = () =>\r\n  <Provider store={store}>\r\n    <ConnectedRouter history={history}>\r\n      <Switch>\r\n        <Route path=\"/\" component={App}/>\r\n      </Switch>\r\n    </ConnectedRouter>\r\n    <Loader/>\r\n  </Provider>;\r\n\r\n\r\nexport default NextApp;\r\n","import { combineReducers } from \"redux\";\r\nimport { connectRouter } from 'connected-react-router'\r\nimport Settings from \"./Settings\";\r\nimport Common from \"./Common\";\r\nimport Loader from \"./Loader\";\r\nimport AdminProducts from \"./AdminProducts\";\r\nimport AdminPartner from \"./AdminPartner\";\r\nimport PartnerDashboard from \"./PartnerDashboard\";\r\nimport ProductDevelopmentTimeline from \"./ProductDevelopmentTimeline\";\r\nimport FilingPlans from \"./FilingPlans\";\r\nimport SalesReport from \"./SalesReport\";\r\nimport UserAuthentication from \"./UserAuthentication\";\r\nimport AdminDashboard from \"./AdminDashboard\"\r\n\r\nexport default (history) => combineReducers({\r\n  router: connectRouter(history),\r\n  settings: Settings,\r\n  commonData: Common,\r\n  authentication: UserAuthentication,\r\n  loader: Loader,\r\n  adminProducts: AdminProducts,\r\n  adminPartner: AdminPartner,\r\n  partnerDashboard: PartnerDashboard,\r\n  pdt: ProductDevelopmentTimeline,\r\n  filingPlans: FilingPlans,\r\n  salesReport: SalesReport,\r\n  adminDashboard:AdminDashboard\r\n});\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport NextApp from './NextApp';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n// Add this import:\r\nimport { AppContainer } from 'react-hot-loader';\r\nimport * as Sentry from '@sentry/react';\r\nimport { Integrations } from '@sentry/tracing';\r\nimport { sentryData } from './constants';\r\n\r\nSentry.init({\r\n  dsn: sentryData.SENTRY_DSN,\r\n  integrations: [\r\n    new Integrations.BrowserTracing(),\r\n  ],\r\n  tracesSampleRate: 1.0,\r\n});\r\n\r\n\r\n// Wrap the rendering in a function:\r\nconst render = Component => {\r\n  ReactDOM.render(\r\n    // Wrap App inside AppContainer\r\n    <AppContainer>\r\n      <Component />\r\n    </AppContainer>,\r\n    document.getElementById('root')\r\n  );\r\n};\r\n\r\n// Do this once\r\nregisterServiceWorker();\r\n\r\n// Render once\r\nrender(NextApp);\r\n\r\n// Webpack Hot Module Replacement API\r\nif (module.hot) {\r\n  module.hot.accept('./NextApp', () => {\r\n    render(NextApp);\r\n  });\r\n}\r\n"],"sourceRoot":""}